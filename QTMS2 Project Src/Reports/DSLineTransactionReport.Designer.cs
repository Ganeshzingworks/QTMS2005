//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.8009
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace QTMS.Reports {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("DSLineTransactionReport")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class DSLineTransactionReport : global::System.Data.DataSet {
        
        private STP_SelectLineTransactionMasterReportDataTable tableSTP_SelectLineTransactionMasterReport;
        
        private STP_SelectLineTransactionReportDataTable tableSTP_SelectLineTransactionReport;
        
        private STP_Select_tblLineQualityRiskAnalysisFileMasterDataTable tableSTP_Select_tblLineQualityRiskAnalysisFileMaster;
        
        private dtLineTransactionDataTable tabledtLineTransaction;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public DSLineTransactionReport() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected DSLineTransactionReport(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["STP_SelectLineTransactionMasterReport"] != null)) {
                    base.Tables.Add(new STP_SelectLineTransactionMasterReportDataTable(ds.Tables["STP_SelectLineTransactionMasterReport"]));
                }
                if ((ds.Tables["STP_SelectLineTransactionReport"] != null)) {
                    base.Tables.Add(new STP_SelectLineTransactionReportDataTable(ds.Tables["STP_SelectLineTransactionReport"]));
                }
                if ((ds.Tables["STP_Select_tblLineQualityRiskAnalysisFileMaster"] != null)) {
                    base.Tables.Add(new STP_Select_tblLineQualityRiskAnalysisFileMasterDataTable(ds.Tables["STP_Select_tblLineQualityRiskAnalysisFileMaster"]));
                }
                if ((ds.Tables["dtLineTransaction"] != null)) {
                    base.Tables.Add(new dtLineTransactionDataTable(ds.Tables["dtLineTransaction"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public STP_SelectLineTransactionMasterReportDataTable STP_SelectLineTransactionMasterReport {
            get {
                return this.tableSTP_SelectLineTransactionMasterReport;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public STP_SelectLineTransactionReportDataTable STP_SelectLineTransactionReport {
            get {
                return this.tableSTP_SelectLineTransactionReport;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public STP_Select_tblLineQualityRiskAnalysisFileMasterDataTable STP_Select_tblLineQualityRiskAnalysisFileMaster {
            get {
                return this.tableSTP_Select_tblLineQualityRiskAnalysisFileMaster;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public dtLineTransactionDataTable dtLineTransaction {
            get {
                return this.tabledtLineTransaction;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            DSLineTransactionReport cln = ((DSLineTransactionReport)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["STP_SelectLineTransactionMasterReport"] != null)) {
                    base.Tables.Add(new STP_SelectLineTransactionMasterReportDataTable(ds.Tables["STP_SelectLineTransactionMasterReport"]));
                }
                if ((ds.Tables["STP_SelectLineTransactionReport"] != null)) {
                    base.Tables.Add(new STP_SelectLineTransactionReportDataTable(ds.Tables["STP_SelectLineTransactionReport"]));
                }
                if ((ds.Tables["STP_Select_tblLineQualityRiskAnalysisFileMaster"] != null)) {
                    base.Tables.Add(new STP_Select_tblLineQualityRiskAnalysisFileMasterDataTable(ds.Tables["STP_Select_tblLineQualityRiskAnalysisFileMaster"]));
                }
                if ((ds.Tables["dtLineTransaction"] != null)) {
                    base.Tables.Add(new dtLineTransactionDataTable(ds.Tables["dtLineTransaction"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableSTP_SelectLineTransactionMasterReport = ((STP_SelectLineTransactionMasterReportDataTable)(base.Tables["STP_SelectLineTransactionMasterReport"]));
            if ((initTable == true)) {
                if ((this.tableSTP_SelectLineTransactionMasterReport != null)) {
                    this.tableSTP_SelectLineTransactionMasterReport.InitVars();
                }
            }
            this.tableSTP_SelectLineTransactionReport = ((STP_SelectLineTransactionReportDataTable)(base.Tables["STP_SelectLineTransactionReport"]));
            if ((initTable == true)) {
                if ((this.tableSTP_SelectLineTransactionReport != null)) {
                    this.tableSTP_SelectLineTransactionReport.InitVars();
                }
            }
            this.tableSTP_Select_tblLineQualityRiskAnalysisFileMaster = ((STP_Select_tblLineQualityRiskAnalysisFileMasterDataTable)(base.Tables["STP_Select_tblLineQualityRiskAnalysisFileMaster"]));
            if ((initTable == true)) {
                if ((this.tableSTP_Select_tblLineQualityRiskAnalysisFileMaster != null)) {
                    this.tableSTP_Select_tblLineQualityRiskAnalysisFileMaster.InitVars();
                }
            }
            this.tabledtLineTransaction = ((dtLineTransactionDataTable)(base.Tables["dtLineTransaction"]));
            if ((initTable == true)) {
                if ((this.tabledtLineTransaction != null)) {
                    this.tabledtLineTransaction.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "DSLineTransactionReport";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/DSLineTransactionReport.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableSTP_SelectLineTransactionMasterReport = new STP_SelectLineTransactionMasterReportDataTable();
            base.Tables.Add(this.tableSTP_SelectLineTransactionMasterReport);
            this.tableSTP_SelectLineTransactionReport = new STP_SelectLineTransactionReportDataTable();
            base.Tables.Add(this.tableSTP_SelectLineTransactionReport);
            this.tableSTP_Select_tblLineQualityRiskAnalysisFileMaster = new STP_Select_tblLineQualityRiskAnalysisFileMasterDataTable();
            base.Tables.Add(this.tableSTP_Select_tblLineQualityRiskAnalysisFileMaster);
            this.tabledtLineTransaction = new dtLineTransactionDataTable();
            base.Tables.Add(this.tabledtLineTransaction);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeSTP_SelectLineTransactionMasterReport() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeSTP_SelectLineTransactionReport() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeSTP_Select_tblLineQualityRiskAnalysisFileMaster() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializedtLineTransaction() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            DSLineTransactionReport ds = new DSLineTransactionReport();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void STP_SelectLineTransactionMasterReportRowChangeEventHandler(object sender, STP_SelectLineTransactionMasterReportRowChangeEvent e);
        
        public delegate void STP_SelectLineTransactionReportRowChangeEventHandler(object sender, STP_SelectLineTransactionReportRowChangeEvent e);
        
        public delegate void STP_Select_tblLineQualityRiskAnalysisFileMasterRowChangeEventHandler(object sender, STP_Select_tblLineQualityRiskAnalysisFileMasterRowChangeEvent e);
        
        public delegate void dtLineTransactionRowChangeEventHandler(object sender, dtLineTransactionRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class STP_SelectLineTransactionMasterReportDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnValidFrom;
            
            private global::System.Data.DataColumn columnValidTo;
            
            private global::System.Data.DataColumn columnName;
            
            private global::System.Data.DataColumn columnParameter;
            
            private global::System.Data.DataColumn columnMinVal;
            
            private global::System.Data.DataColumn columnMaxVal;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public STP_SelectLineTransactionMasterReportDataTable() {
                this.TableName = "STP_SelectLineTransactionMasterReport";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal STP_SelectLineTransactionMasterReportDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected STP_SelectLineTransactionMasterReportDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ValidFromColumn {
                get {
                    return this.columnValidFrom;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ValidToColumn {
                get {
                    return this.columnValidTo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ParameterColumn {
                get {
                    return this.columnParameter;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MinValColumn {
                get {
                    return this.columnMinVal;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MaxValColumn {
                get {
                    return this.columnMaxVal;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public STP_SelectLineTransactionMasterReportRow this[int index] {
                get {
                    return ((STP_SelectLineTransactionMasterReportRow)(this.Rows[index]));
                }
            }
            
            public event STP_SelectLineTransactionMasterReportRowChangeEventHandler STP_SelectLineTransactionMasterReportRowChanging;
            
            public event STP_SelectLineTransactionMasterReportRowChangeEventHandler STP_SelectLineTransactionMasterReportRowChanged;
            
            public event STP_SelectLineTransactionMasterReportRowChangeEventHandler STP_SelectLineTransactionMasterReportRowDeleting;
            
            public event STP_SelectLineTransactionMasterReportRowChangeEventHandler STP_SelectLineTransactionMasterReportRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddSTP_SelectLineTransactionMasterReportRow(STP_SelectLineTransactionMasterReportRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public STP_SelectLineTransactionMasterReportRow AddSTP_SelectLineTransactionMasterReportRow(System.DateTime ValidFrom, System.DateTime ValidTo, string Name, string Parameter, string MinVal, string MaxVal) {
                STP_SelectLineTransactionMasterReportRow rowSTP_SelectLineTransactionMasterReportRow = ((STP_SelectLineTransactionMasterReportRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ValidFrom,
                        ValidTo,
                        Name,
                        Parameter,
                        MinVal,
                        MaxVal};
                rowSTP_SelectLineTransactionMasterReportRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowSTP_SelectLineTransactionMasterReportRow);
                return rowSTP_SelectLineTransactionMasterReportRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                STP_SelectLineTransactionMasterReportDataTable cln = ((STP_SelectLineTransactionMasterReportDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new STP_SelectLineTransactionMasterReportDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnValidFrom = base.Columns["ValidFrom"];
                this.columnValidTo = base.Columns["ValidTo"];
                this.columnName = base.Columns["Name"];
                this.columnParameter = base.Columns["Parameter"];
                this.columnMinVal = base.Columns["MinVal"];
                this.columnMaxVal = base.Columns["MaxVal"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnValidFrom = new global::System.Data.DataColumn("ValidFrom", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnValidFrom);
                this.columnValidTo = new global::System.Data.DataColumn("ValidTo", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnValidTo);
                this.columnName = new global::System.Data.DataColumn("Name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnName);
                this.columnParameter = new global::System.Data.DataColumn("Parameter", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnParameter);
                this.columnMinVal = new global::System.Data.DataColumn("MinVal", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMinVal);
                this.columnMaxVal = new global::System.Data.DataColumn("MaxVal", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMaxVal);
                this.columnName.MaxLength = 2147483647;
                this.columnParameter.MaxLength = 2147483647;
                this.columnMinVal.MaxLength = 2147483647;
                this.columnMaxVal.MaxLength = 2147483647;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public STP_SelectLineTransactionMasterReportRow NewSTP_SelectLineTransactionMasterReportRow() {
                return ((STP_SelectLineTransactionMasterReportRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new STP_SelectLineTransactionMasterReportRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(STP_SelectLineTransactionMasterReportRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.STP_SelectLineTransactionMasterReportRowChanged != null)) {
                    this.STP_SelectLineTransactionMasterReportRowChanged(this, new STP_SelectLineTransactionMasterReportRowChangeEvent(((STP_SelectLineTransactionMasterReportRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.STP_SelectLineTransactionMasterReportRowChanging != null)) {
                    this.STP_SelectLineTransactionMasterReportRowChanging(this, new STP_SelectLineTransactionMasterReportRowChangeEvent(((STP_SelectLineTransactionMasterReportRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.STP_SelectLineTransactionMasterReportRowDeleted != null)) {
                    this.STP_SelectLineTransactionMasterReportRowDeleted(this, new STP_SelectLineTransactionMasterReportRowChangeEvent(((STP_SelectLineTransactionMasterReportRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.STP_SelectLineTransactionMasterReportRowDeleting != null)) {
                    this.STP_SelectLineTransactionMasterReportRowDeleting(this, new STP_SelectLineTransactionMasterReportRowChangeEvent(((STP_SelectLineTransactionMasterReportRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveSTP_SelectLineTransactionMasterReportRow(STP_SelectLineTransactionMasterReportRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DSLineTransactionReport ds = new DSLineTransactionReport();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "STP_SelectLineTransactionMasterReportDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class STP_SelectLineTransactionReportDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnLineTransactionMasterId;
            
            private global::System.Data.DataColumn columnDate;
            
            private global::System.Data.DataColumn columnName;
            
            private global::System.Data.DataColumn columnParameter;
            
            private global::System.Data.DataColumn columnMinVal;
            
            private global::System.Data.DataColumn columnMaxVal;
            
            private global::System.Data.DataColumn columnTransactionDate;
            
            private global::System.Data.DataColumn columnDueDate;
            
            private global::System.Data.DataColumn columnResult;
            
            private global::System.Data.DataColumn columnStatus;
            
            private global::System.Data.DataColumn columnAttachedFilePath;
            
            private global::System.Data.DataColumn columnActionPlanFileName;
            
            private global::System.Data.DataColumn columnActionPlanFilePath;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public STP_SelectLineTransactionReportDataTable() {
                this.TableName = "STP_SelectLineTransactionReport";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal STP_SelectLineTransactionReportDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected STP_SelectLineTransactionReportDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LineTransactionMasterIdColumn {
                get {
                    return this.columnLineTransactionMasterId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DateColumn {
                get {
                    return this.columnDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ParameterColumn {
                get {
                    return this.columnParameter;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MinValColumn {
                get {
                    return this.columnMinVal;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MaxValColumn {
                get {
                    return this.columnMaxVal;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TransactionDateColumn {
                get {
                    return this.columnTransactionDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DueDateColumn {
                get {
                    return this.columnDueDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ResultColumn {
                get {
                    return this.columnResult;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StatusColumn {
                get {
                    return this.columnStatus;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AttachedFilePathColumn {
                get {
                    return this.columnAttachedFilePath;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ActionPlanFileNameColumn {
                get {
                    return this.columnActionPlanFileName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ActionPlanFilePathColumn {
                get {
                    return this.columnActionPlanFilePath;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public STP_SelectLineTransactionReportRow this[int index] {
                get {
                    return ((STP_SelectLineTransactionReportRow)(this.Rows[index]));
                }
            }
            
            public event STP_SelectLineTransactionReportRowChangeEventHandler STP_SelectLineTransactionReportRowChanging;
            
            public event STP_SelectLineTransactionReportRowChangeEventHandler STP_SelectLineTransactionReportRowChanged;
            
            public event STP_SelectLineTransactionReportRowChangeEventHandler STP_SelectLineTransactionReportRowDeleting;
            
            public event STP_SelectLineTransactionReportRowChangeEventHandler STP_SelectLineTransactionReportRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddSTP_SelectLineTransactionReportRow(STP_SelectLineTransactionReportRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public STP_SelectLineTransactionReportRow AddSTP_SelectLineTransactionReportRow(long LineTransactionMasterId, System.DateTime Date, string Name, string Parameter, string MinVal, string MaxVal, System.DateTime TransactionDate, System.DateTime DueDate, string Result, string Status, string AttachedFilePath, string ActionPlanFileName, string ActionPlanFilePath) {
                STP_SelectLineTransactionReportRow rowSTP_SelectLineTransactionReportRow = ((STP_SelectLineTransactionReportRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        LineTransactionMasterId,
                        Date,
                        Name,
                        Parameter,
                        MinVal,
                        MaxVal,
                        TransactionDate,
                        DueDate,
                        Result,
                        Status,
                        AttachedFilePath,
                        ActionPlanFileName,
                        ActionPlanFilePath};
                rowSTP_SelectLineTransactionReportRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowSTP_SelectLineTransactionReportRow);
                return rowSTP_SelectLineTransactionReportRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                STP_SelectLineTransactionReportDataTable cln = ((STP_SelectLineTransactionReportDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new STP_SelectLineTransactionReportDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnLineTransactionMasterId = base.Columns["LineTransactionMasterId"];
                this.columnDate = base.Columns["Date"];
                this.columnName = base.Columns["Name"];
                this.columnParameter = base.Columns["Parameter"];
                this.columnMinVal = base.Columns["MinVal"];
                this.columnMaxVal = base.Columns["MaxVal"];
                this.columnTransactionDate = base.Columns["TransactionDate"];
                this.columnDueDate = base.Columns["DueDate"];
                this.columnResult = base.Columns["Result"];
                this.columnStatus = base.Columns["Status"];
                this.columnAttachedFilePath = base.Columns["AttachedFilePath"];
                this.columnActionPlanFileName = base.Columns["ActionPlanFileName"];
                this.columnActionPlanFilePath = base.Columns["ActionPlanFilePath"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnLineTransactionMasterId = new global::System.Data.DataColumn("LineTransactionMasterId", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLineTransactionMasterId);
                this.columnDate = new global::System.Data.DataColumn("Date", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDate);
                this.columnName = new global::System.Data.DataColumn("Name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnName);
                this.columnParameter = new global::System.Data.DataColumn("Parameter", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnParameter);
                this.columnMinVal = new global::System.Data.DataColumn("MinVal", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMinVal);
                this.columnMaxVal = new global::System.Data.DataColumn("MaxVal", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMaxVal);
                this.columnTransactionDate = new global::System.Data.DataColumn("TransactionDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTransactionDate);
                this.columnDueDate = new global::System.Data.DataColumn("DueDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDueDate);
                this.columnResult = new global::System.Data.DataColumn("Result", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnResult);
                this.columnStatus = new global::System.Data.DataColumn("Status", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStatus);
                this.columnAttachedFilePath = new global::System.Data.DataColumn("AttachedFilePath", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAttachedFilePath);
                this.columnActionPlanFileName = new global::System.Data.DataColumn("ActionPlanFileName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnActionPlanFileName);
                this.columnActionPlanFilePath = new global::System.Data.DataColumn("ActionPlanFilePath", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnActionPlanFilePath);
                this.columnName.MaxLength = 2147483647;
                this.columnParameter.MaxLength = 2147483647;
                this.columnMinVal.MaxLength = 2147483647;
                this.columnMaxVal.MaxLength = 2147483647;
                this.columnResult.MaxLength = 2147483647;
                this.columnStatus.MaxLength = 2147483647;
                this.columnAttachedFilePath.MaxLength = 2147483647;
                this.columnActionPlanFileName.MaxLength = 2147483647;
                this.columnActionPlanFilePath.MaxLength = 2147483647;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public STP_SelectLineTransactionReportRow NewSTP_SelectLineTransactionReportRow() {
                return ((STP_SelectLineTransactionReportRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new STP_SelectLineTransactionReportRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(STP_SelectLineTransactionReportRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.STP_SelectLineTransactionReportRowChanged != null)) {
                    this.STP_SelectLineTransactionReportRowChanged(this, new STP_SelectLineTransactionReportRowChangeEvent(((STP_SelectLineTransactionReportRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.STP_SelectLineTransactionReportRowChanging != null)) {
                    this.STP_SelectLineTransactionReportRowChanging(this, new STP_SelectLineTransactionReportRowChangeEvent(((STP_SelectLineTransactionReportRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.STP_SelectLineTransactionReportRowDeleted != null)) {
                    this.STP_SelectLineTransactionReportRowDeleted(this, new STP_SelectLineTransactionReportRowChangeEvent(((STP_SelectLineTransactionReportRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.STP_SelectLineTransactionReportRowDeleting != null)) {
                    this.STP_SelectLineTransactionReportRowDeleting(this, new STP_SelectLineTransactionReportRowChangeEvent(((STP_SelectLineTransactionReportRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveSTP_SelectLineTransactionReportRow(STP_SelectLineTransactionReportRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DSLineTransactionReport ds = new DSLineTransactionReport();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "STP_SelectLineTransactionReportDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class STP_Select_tblLineQualityRiskAnalysisFileMasterDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnId;
            
            private global::System.Data.DataColumn columnLineTransactionMasterId;
            
            private global::System.Data.DataColumn columnQualityRiskAnalysisFilePath;
            
            private global::System.Data.DataColumn columnQualityRiskAnalysisFileName;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public STP_Select_tblLineQualityRiskAnalysisFileMasterDataTable() {
                this.TableName = "STP_Select_tblLineQualityRiskAnalysisFileMaster";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal STP_Select_tblLineQualityRiskAnalysisFileMasterDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected STP_Select_tblLineQualityRiskAnalysisFileMasterDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IdColumn {
                get {
                    return this.columnId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LineTransactionMasterIdColumn {
                get {
                    return this.columnLineTransactionMasterId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn QualityRiskAnalysisFilePathColumn {
                get {
                    return this.columnQualityRiskAnalysisFilePath;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn QualityRiskAnalysisFileNameColumn {
                get {
                    return this.columnQualityRiskAnalysisFileName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public STP_Select_tblLineQualityRiskAnalysisFileMasterRow this[int index] {
                get {
                    return ((STP_Select_tblLineQualityRiskAnalysisFileMasterRow)(this.Rows[index]));
                }
            }
            
            public event STP_Select_tblLineQualityRiskAnalysisFileMasterRowChangeEventHandler STP_Select_tblLineQualityRiskAnalysisFileMasterRowChanging;
            
            public event STP_Select_tblLineQualityRiskAnalysisFileMasterRowChangeEventHandler STP_Select_tblLineQualityRiskAnalysisFileMasterRowChanged;
            
            public event STP_Select_tblLineQualityRiskAnalysisFileMasterRowChangeEventHandler STP_Select_tblLineQualityRiskAnalysisFileMasterRowDeleting;
            
            public event STP_Select_tblLineQualityRiskAnalysisFileMasterRowChangeEventHandler STP_Select_tblLineQualityRiskAnalysisFileMasterRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddSTP_Select_tblLineQualityRiskAnalysisFileMasterRow(STP_Select_tblLineQualityRiskAnalysisFileMasterRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public STP_Select_tblLineQualityRiskAnalysisFileMasterRow AddSTP_Select_tblLineQualityRiskAnalysisFileMasterRow(long LineTransactionMasterId, string QualityRiskAnalysisFilePath, string QualityRiskAnalysisFileName) {
                STP_Select_tblLineQualityRiskAnalysisFileMasterRow rowSTP_Select_tblLineQualityRiskAnalysisFileMasterRow = ((STP_Select_tblLineQualityRiskAnalysisFileMasterRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        LineTransactionMasterId,
                        QualityRiskAnalysisFilePath,
                        QualityRiskAnalysisFileName};
                rowSTP_Select_tblLineQualityRiskAnalysisFileMasterRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowSTP_Select_tblLineQualityRiskAnalysisFileMasterRow);
                return rowSTP_Select_tblLineQualityRiskAnalysisFileMasterRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public STP_Select_tblLineQualityRiskAnalysisFileMasterRow FindById(long Id) {
                return ((STP_Select_tblLineQualityRiskAnalysisFileMasterRow)(this.Rows.Find(new object[] {
                            Id})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                STP_Select_tblLineQualityRiskAnalysisFileMasterDataTable cln = ((STP_Select_tblLineQualityRiskAnalysisFileMasterDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new STP_Select_tblLineQualityRiskAnalysisFileMasterDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnId = base.Columns["Id"];
                this.columnLineTransactionMasterId = base.Columns["LineTransactionMasterId"];
                this.columnQualityRiskAnalysisFilePath = base.Columns["QualityRiskAnalysisFilePath"];
                this.columnQualityRiskAnalysisFileName = base.Columns["QualityRiskAnalysisFileName"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnId = new global::System.Data.DataColumn("Id", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnId);
                this.columnLineTransactionMasterId = new global::System.Data.DataColumn("LineTransactionMasterId", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLineTransactionMasterId);
                this.columnQualityRiskAnalysisFilePath = new global::System.Data.DataColumn("QualityRiskAnalysisFilePath", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnQualityRiskAnalysisFilePath);
                this.columnQualityRiskAnalysisFileName = new global::System.Data.DataColumn("QualityRiskAnalysisFileName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnQualityRiskAnalysisFileName);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnId}, true));
                this.columnId.AutoIncrement = true;
                this.columnId.AllowDBNull = false;
                this.columnId.ReadOnly = true;
                this.columnId.Unique = true;
                this.columnQualityRiskAnalysisFilePath.MaxLength = 2147483647;
                this.columnQualityRiskAnalysisFileName.MaxLength = 2147483647;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public STP_Select_tblLineQualityRiskAnalysisFileMasterRow NewSTP_Select_tblLineQualityRiskAnalysisFileMasterRow() {
                return ((STP_Select_tblLineQualityRiskAnalysisFileMasterRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new STP_Select_tblLineQualityRiskAnalysisFileMasterRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(STP_Select_tblLineQualityRiskAnalysisFileMasterRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.STP_Select_tblLineQualityRiskAnalysisFileMasterRowChanged != null)) {
                    this.STP_Select_tblLineQualityRiskAnalysisFileMasterRowChanged(this, new STP_Select_tblLineQualityRiskAnalysisFileMasterRowChangeEvent(((STP_Select_tblLineQualityRiskAnalysisFileMasterRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.STP_Select_tblLineQualityRiskAnalysisFileMasterRowChanging != null)) {
                    this.STP_Select_tblLineQualityRiskAnalysisFileMasterRowChanging(this, new STP_Select_tblLineQualityRiskAnalysisFileMasterRowChangeEvent(((STP_Select_tblLineQualityRiskAnalysisFileMasterRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.STP_Select_tblLineQualityRiskAnalysisFileMasterRowDeleted != null)) {
                    this.STP_Select_tblLineQualityRiskAnalysisFileMasterRowDeleted(this, new STP_Select_tblLineQualityRiskAnalysisFileMasterRowChangeEvent(((STP_Select_tblLineQualityRiskAnalysisFileMasterRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.STP_Select_tblLineQualityRiskAnalysisFileMasterRowDeleting != null)) {
                    this.STP_Select_tblLineQualityRiskAnalysisFileMasterRowDeleting(this, new STP_Select_tblLineQualityRiskAnalysisFileMasterRowChangeEvent(((STP_Select_tblLineQualityRiskAnalysisFileMasterRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveSTP_Select_tblLineQualityRiskAnalysisFileMasterRow(STP_Select_tblLineQualityRiskAnalysisFileMasterRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DSLineTransactionReport ds = new DSLineTransactionReport();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "STP_Select_tblLineQualityRiskAnalysisFileMasterDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class dtLineTransactionDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnPKey;
            
            private global::System.Data.DataColumn columnId;
            
            private global::System.Data.DataColumn columnLineDecriptionId;
            
            private global::System.Data.DataColumn columnDate;
            
            private global::System.Data.DataColumn columnShort_Term_Colorant;
            
            private global::System.Data.DataColumn columnShort_Term_Developer;
            
            private global::System.Data.DataColumn columnLong_Term_Colorant;
            
            private global::System.Data.DataColumn columnLong_Term_Developer;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtLineTransactionDataTable() {
                this.TableName = "dtLineTransaction";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal dtLineTransactionDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected dtLineTransactionDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PKeyColumn {
                get {
                    return this.columnPKey;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IdColumn {
                get {
                    return this.columnId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LineDecriptionIdColumn {
                get {
                    return this.columnLineDecriptionId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DateColumn {
                get {
                    return this.columnDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Short_Term_ColorantColumn {
                get {
                    return this.columnShort_Term_Colorant;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Short_Term_DeveloperColumn {
                get {
                    return this.columnShort_Term_Developer;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Long_Term_ColorantColumn {
                get {
                    return this.columnLong_Term_Colorant;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Long_Term_DeveloperColumn {
                get {
                    return this.columnLong_Term_Developer;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtLineTransactionRow this[int index] {
                get {
                    return ((dtLineTransactionRow)(this.Rows[index]));
                }
            }
            
            public event dtLineTransactionRowChangeEventHandler dtLineTransactionRowChanging;
            
            public event dtLineTransactionRowChangeEventHandler dtLineTransactionRowChanged;
            
            public event dtLineTransactionRowChangeEventHandler dtLineTransactionRowDeleting;
            
            public event dtLineTransactionRowChangeEventHandler dtLineTransactionRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AdddtLineTransactionRow(dtLineTransactionRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtLineTransactionRow AdddtLineTransactionRow(string PKey, string Id, string LineDecriptionId, System.DateTime Date, string Short_Term_Colorant, string Short_Term_Developer, string Long_Term_Colorant, string Long_Term_Developer) {
                dtLineTransactionRow rowdtLineTransactionRow = ((dtLineTransactionRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        PKey,
                        Id,
                        LineDecriptionId,
                        Date,
                        Short_Term_Colorant,
                        Short_Term_Developer,
                        Long_Term_Colorant,
                        Long_Term_Developer};
                rowdtLineTransactionRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowdtLineTransactionRow);
                return rowdtLineTransactionRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                dtLineTransactionDataTable cln = ((dtLineTransactionDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new dtLineTransactionDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnPKey = base.Columns["PKey"];
                this.columnId = base.Columns["Id"];
                this.columnLineDecriptionId = base.Columns["LineDecriptionId"];
                this.columnDate = base.Columns["Date"];
                this.columnShort_Term_Colorant = base.Columns["Short Term Colorant"];
                this.columnShort_Term_Developer = base.Columns["Short Term Developer"];
                this.columnLong_Term_Colorant = base.Columns["Long Term Colorant"];
                this.columnLong_Term_Developer = base.Columns["Long Term Developer"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnPKey = new global::System.Data.DataColumn("PKey", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPKey);
                this.columnId = new global::System.Data.DataColumn("Id", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnId);
                this.columnLineDecriptionId = new global::System.Data.DataColumn("LineDecriptionId", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLineDecriptionId);
                this.columnDate = new global::System.Data.DataColumn("Date", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDate);
                this.columnShort_Term_Colorant = new global::System.Data.DataColumn("Short Term Colorant", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnShort_Term_Colorant);
                this.columnShort_Term_Developer = new global::System.Data.DataColumn("Short Term Developer", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnShort_Term_Developer);
                this.columnLong_Term_Colorant = new global::System.Data.DataColumn("Long Term Colorant", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLong_Term_Colorant);
                this.columnLong_Term_Developer = new global::System.Data.DataColumn("Long Term Developer", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLong_Term_Developer);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtLineTransactionRow NewdtLineTransactionRow() {
                return ((dtLineTransactionRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new dtLineTransactionRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(dtLineTransactionRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.dtLineTransactionRowChanged != null)) {
                    this.dtLineTransactionRowChanged(this, new dtLineTransactionRowChangeEvent(((dtLineTransactionRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.dtLineTransactionRowChanging != null)) {
                    this.dtLineTransactionRowChanging(this, new dtLineTransactionRowChangeEvent(((dtLineTransactionRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.dtLineTransactionRowDeleted != null)) {
                    this.dtLineTransactionRowDeleted(this, new dtLineTransactionRowChangeEvent(((dtLineTransactionRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.dtLineTransactionRowDeleting != null)) {
                    this.dtLineTransactionRowDeleting(this, new dtLineTransactionRowChangeEvent(((dtLineTransactionRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovedtLineTransactionRow(dtLineTransactionRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DSLineTransactionReport ds = new DSLineTransactionReport();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "dtLineTransactionDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class STP_SelectLineTransactionMasterReportRow : global::System.Data.DataRow {
            
            private STP_SelectLineTransactionMasterReportDataTable tableSTP_SelectLineTransactionMasterReport;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal STP_SelectLineTransactionMasterReportRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableSTP_SelectLineTransactionMasterReport = ((STP_SelectLineTransactionMasterReportDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime ValidFrom {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableSTP_SelectLineTransactionMasterReport.ValidFromColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ValidFrom\' in table \'STP_SelectLineTransactionMasterReport\'" +
                                " is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSTP_SelectLineTransactionMasterReport.ValidFromColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime ValidTo {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableSTP_SelectLineTransactionMasterReport.ValidToColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ValidTo\' in table \'STP_SelectLineTransactionMasterReport\' i" +
                                "s DBNull.", e);
                    }
                }
                set {
                    this[this.tableSTP_SelectLineTransactionMasterReport.ValidToColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name {
                get {
                    try {
                        return ((string)(this[this.tableSTP_SelectLineTransactionMasterReport.NameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Name\' in table \'STP_SelectLineTransactionMasterReport\' is D" +
                                "BNull.", e);
                    }
                }
                set {
                    this[this.tableSTP_SelectLineTransactionMasterReport.NameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Parameter {
                get {
                    try {
                        return ((string)(this[this.tableSTP_SelectLineTransactionMasterReport.ParameterColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Parameter\' in table \'STP_SelectLineTransactionMasterReport\'" +
                                " is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSTP_SelectLineTransactionMasterReport.ParameterColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MinVal {
                get {
                    try {
                        return ((string)(this[this.tableSTP_SelectLineTransactionMasterReport.MinValColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MinVal\' in table \'STP_SelectLineTransactionMasterReport\' is" +
                                " DBNull.", e);
                    }
                }
                set {
                    this[this.tableSTP_SelectLineTransactionMasterReport.MinValColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MaxVal {
                get {
                    try {
                        return ((string)(this[this.tableSTP_SelectLineTransactionMasterReport.MaxValColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MaxVal\' in table \'STP_SelectLineTransactionMasterReport\' is" +
                                " DBNull.", e);
                    }
                }
                set {
                    this[this.tableSTP_SelectLineTransactionMasterReport.MaxValColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsValidFromNull() {
                return this.IsNull(this.tableSTP_SelectLineTransactionMasterReport.ValidFromColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetValidFromNull() {
                this[this.tableSTP_SelectLineTransactionMasterReport.ValidFromColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsValidToNull() {
                return this.IsNull(this.tableSTP_SelectLineTransactionMasterReport.ValidToColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetValidToNull() {
                this[this.tableSTP_SelectLineTransactionMasterReport.ValidToColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNameNull() {
                return this.IsNull(this.tableSTP_SelectLineTransactionMasterReport.NameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNameNull() {
                this[this.tableSTP_SelectLineTransactionMasterReport.NameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsParameterNull() {
                return this.IsNull(this.tableSTP_SelectLineTransactionMasterReport.ParameterColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetParameterNull() {
                this[this.tableSTP_SelectLineTransactionMasterReport.ParameterColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMinValNull() {
                return this.IsNull(this.tableSTP_SelectLineTransactionMasterReport.MinValColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMinValNull() {
                this[this.tableSTP_SelectLineTransactionMasterReport.MinValColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMaxValNull() {
                return this.IsNull(this.tableSTP_SelectLineTransactionMasterReport.MaxValColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMaxValNull() {
                this[this.tableSTP_SelectLineTransactionMasterReport.MaxValColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class STP_SelectLineTransactionReportRow : global::System.Data.DataRow {
            
            private STP_SelectLineTransactionReportDataTable tableSTP_SelectLineTransactionReport;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal STP_SelectLineTransactionReportRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableSTP_SelectLineTransactionReport = ((STP_SelectLineTransactionReportDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long LineTransactionMasterId {
                get {
                    try {
                        return ((long)(this[this.tableSTP_SelectLineTransactionReport.LineTransactionMasterIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LineTransactionMasterId\' in table \'STP_SelectLineTransactio" +
                                "nReport\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSTP_SelectLineTransactionReport.LineTransactionMasterIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime Date {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableSTP_SelectLineTransactionReport.DateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Date\' in table \'STP_SelectLineTransactionReport\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableSTP_SelectLineTransactionReport.DateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name {
                get {
                    try {
                        return ((string)(this[this.tableSTP_SelectLineTransactionReport.NameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Name\' in table \'STP_SelectLineTransactionReport\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableSTP_SelectLineTransactionReport.NameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Parameter {
                get {
                    try {
                        return ((string)(this[this.tableSTP_SelectLineTransactionReport.ParameterColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Parameter\' in table \'STP_SelectLineTransactionReport\' is DB" +
                                "Null.", e);
                    }
                }
                set {
                    this[this.tableSTP_SelectLineTransactionReport.ParameterColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MinVal {
                get {
                    try {
                        return ((string)(this[this.tableSTP_SelectLineTransactionReport.MinValColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MinVal\' in table \'STP_SelectLineTransactionReport\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableSTP_SelectLineTransactionReport.MinValColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MaxVal {
                get {
                    try {
                        return ((string)(this[this.tableSTP_SelectLineTransactionReport.MaxValColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MaxVal\' in table \'STP_SelectLineTransactionReport\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableSTP_SelectLineTransactionReport.MaxValColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime TransactionDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableSTP_SelectLineTransactionReport.TransactionDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TransactionDate\' in table \'STP_SelectLineTransactionReport\'" +
                                " is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSTP_SelectLineTransactionReport.TransactionDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime DueDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableSTP_SelectLineTransactionReport.DueDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DueDate\' in table \'STP_SelectLineTransactionReport\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tableSTP_SelectLineTransactionReport.DueDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Result {
                get {
                    try {
                        return ((string)(this[this.tableSTP_SelectLineTransactionReport.ResultColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Result\' in table \'STP_SelectLineTransactionReport\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableSTP_SelectLineTransactionReport.ResultColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Status {
                get {
                    try {
                        return ((string)(this[this.tableSTP_SelectLineTransactionReport.StatusColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Status\' in table \'STP_SelectLineTransactionReport\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableSTP_SelectLineTransactionReport.StatusColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AttachedFilePath {
                get {
                    try {
                        return ((string)(this[this.tableSTP_SelectLineTransactionReport.AttachedFilePathColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AttachedFilePath\' in table \'STP_SelectLineTransactionReport" +
                                "\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSTP_SelectLineTransactionReport.AttachedFilePathColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ActionPlanFileName {
                get {
                    try {
                        return ((string)(this[this.tableSTP_SelectLineTransactionReport.ActionPlanFileNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ActionPlanFileName\' in table \'STP_SelectLineTransactionRepo" +
                                "rt\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSTP_SelectLineTransactionReport.ActionPlanFileNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ActionPlanFilePath {
                get {
                    try {
                        return ((string)(this[this.tableSTP_SelectLineTransactionReport.ActionPlanFilePathColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ActionPlanFilePath\' in table \'STP_SelectLineTransactionRepo" +
                                "rt\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSTP_SelectLineTransactionReport.ActionPlanFilePathColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLineTransactionMasterIdNull() {
                return this.IsNull(this.tableSTP_SelectLineTransactionReport.LineTransactionMasterIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLineTransactionMasterIdNull() {
                this[this.tableSTP_SelectLineTransactionReport.LineTransactionMasterIdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDateNull() {
                return this.IsNull(this.tableSTP_SelectLineTransactionReport.DateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDateNull() {
                this[this.tableSTP_SelectLineTransactionReport.DateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNameNull() {
                return this.IsNull(this.tableSTP_SelectLineTransactionReport.NameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNameNull() {
                this[this.tableSTP_SelectLineTransactionReport.NameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsParameterNull() {
                return this.IsNull(this.tableSTP_SelectLineTransactionReport.ParameterColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetParameterNull() {
                this[this.tableSTP_SelectLineTransactionReport.ParameterColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMinValNull() {
                return this.IsNull(this.tableSTP_SelectLineTransactionReport.MinValColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMinValNull() {
                this[this.tableSTP_SelectLineTransactionReport.MinValColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMaxValNull() {
                return this.IsNull(this.tableSTP_SelectLineTransactionReport.MaxValColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMaxValNull() {
                this[this.tableSTP_SelectLineTransactionReport.MaxValColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTransactionDateNull() {
                return this.IsNull(this.tableSTP_SelectLineTransactionReport.TransactionDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTransactionDateNull() {
                this[this.tableSTP_SelectLineTransactionReport.TransactionDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDueDateNull() {
                return this.IsNull(this.tableSTP_SelectLineTransactionReport.DueDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDueDateNull() {
                this[this.tableSTP_SelectLineTransactionReport.DueDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsResultNull() {
                return this.IsNull(this.tableSTP_SelectLineTransactionReport.ResultColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetResultNull() {
                this[this.tableSTP_SelectLineTransactionReport.ResultColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStatusNull() {
                return this.IsNull(this.tableSTP_SelectLineTransactionReport.StatusColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStatusNull() {
                this[this.tableSTP_SelectLineTransactionReport.StatusColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAttachedFilePathNull() {
                return this.IsNull(this.tableSTP_SelectLineTransactionReport.AttachedFilePathColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAttachedFilePathNull() {
                this[this.tableSTP_SelectLineTransactionReport.AttachedFilePathColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsActionPlanFileNameNull() {
                return this.IsNull(this.tableSTP_SelectLineTransactionReport.ActionPlanFileNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetActionPlanFileNameNull() {
                this[this.tableSTP_SelectLineTransactionReport.ActionPlanFileNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsActionPlanFilePathNull() {
                return this.IsNull(this.tableSTP_SelectLineTransactionReport.ActionPlanFilePathColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetActionPlanFilePathNull() {
                this[this.tableSTP_SelectLineTransactionReport.ActionPlanFilePathColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class STP_Select_tblLineQualityRiskAnalysisFileMasterRow : global::System.Data.DataRow {
            
            private STP_Select_tblLineQualityRiskAnalysisFileMasterDataTable tableSTP_Select_tblLineQualityRiskAnalysisFileMaster;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal STP_Select_tblLineQualityRiskAnalysisFileMasterRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableSTP_Select_tblLineQualityRiskAnalysisFileMaster = ((STP_Select_tblLineQualityRiskAnalysisFileMasterDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long Id {
                get {
                    return ((long)(this[this.tableSTP_Select_tblLineQualityRiskAnalysisFileMaster.IdColumn]));
                }
                set {
                    this[this.tableSTP_Select_tblLineQualityRiskAnalysisFileMaster.IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long LineTransactionMasterId {
                get {
                    try {
                        return ((long)(this[this.tableSTP_Select_tblLineQualityRiskAnalysisFileMaster.LineTransactionMasterIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LineTransactionMasterId\' in table \'STP_Select_tblLineQualit" +
                                "yRiskAnalysisFileMaster\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSTP_Select_tblLineQualityRiskAnalysisFileMaster.LineTransactionMasterIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string QualityRiskAnalysisFilePath {
                get {
                    try {
                        return ((string)(this[this.tableSTP_Select_tblLineQualityRiskAnalysisFileMaster.QualityRiskAnalysisFilePathColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'QualityRiskAnalysisFilePath\' in table \'STP_Select_tblLineQu" +
                                "alityRiskAnalysisFileMaster\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSTP_Select_tblLineQualityRiskAnalysisFileMaster.QualityRiskAnalysisFilePathColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string QualityRiskAnalysisFileName {
                get {
                    try {
                        return ((string)(this[this.tableSTP_Select_tblLineQualityRiskAnalysisFileMaster.QualityRiskAnalysisFileNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'QualityRiskAnalysisFileName\' in table \'STP_Select_tblLineQu" +
                                "alityRiskAnalysisFileMaster\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSTP_Select_tblLineQualityRiskAnalysisFileMaster.QualityRiskAnalysisFileNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLineTransactionMasterIdNull() {
                return this.IsNull(this.tableSTP_Select_tblLineQualityRiskAnalysisFileMaster.LineTransactionMasterIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLineTransactionMasterIdNull() {
                this[this.tableSTP_Select_tblLineQualityRiskAnalysisFileMaster.LineTransactionMasterIdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsQualityRiskAnalysisFilePathNull() {
                return this.IsNull(this.tableSTP_Select_tblLineQualityRiskAnalysisFileMaster.QualityRiskAnalysisFilePathColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetQualityRiskAnalysisFilePathNull() {
                this[this.tableSTP_Select_tblLineQualityRiskAnalysisFileMaster.QualityRiskAnalysisFilePathColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsQualityRiskAnalysisFileNameNull() {
                return this.IsNull(this.tableSTP_Select_tblLineQualityRiskAnalysisFileMaster.QualityRiskAnalysisFileNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetQualityRiskAnalysisFileNameNull() {
                this[this.tableSTP_Select_tblLineQualityRiskAnalysisFileMaster.QualityRiskAnalysisFileNameColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class dtLineTransactionRow : global::System.Data.DataRow {
            
            private dtLineTransactionDataTable tabledtLineTransaction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal dtLineTransactionRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tabledtLineTransaction = ((dtLineTransactionDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PKey {
                get {
                    try {
                        return ((string)(this[this.tabledtLineTransaction.PKeyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PKey\' in table \'dtLineTransaction\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtLineTransaction.PKeyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Id {
                get {
                    try {
                        return ((string)(this[this.tabledtLineTransaction.IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Id\' in table \'dtLineTransaction\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtLineTransaction.IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LineDecriptionId {
                get {
                    try {
                        return ((string)(this[this.tabledtLineTransaction.LineDecriptionIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LineDecriptionId\' in table \'dtLineTransaction\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtLineTransaction.LineDecriptionIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime Date {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tabledtLineTransaction.DateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Date\' in table \'dtLineTransaction\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtLineTransaction.DateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Short_Term_Colorant {
                get {
                    try {
                        return ((string)(this[this.tabledtLineTransaction.Short_Term_ColorantColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Short Term Colorant\' in table \'dtLineTransaction\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tabledtLineTransaction.Short_Term_ColorantColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Short_Term_Developer {
                get {
                    try {
                        return ((string)(this[this.tabledtLineTransaction.Short_Term_DeveloperColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Short Term Developer\' in table \'dtLineTransaction\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tabledtLineTransaction.Short_Term_DeveloperColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Long_Term_Colorant {
                get {
                    try {
                        return ((string)(this[this.tabledtLineTransaction.Long_Term_ColorantColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Long Term Colorant\' in table \'dtLineTransaction\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tabledtLineTransaction.Long_Term_ColorantColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Long_Term_Developer {
                get {
                    try {
                        return ((string)(this[this.tabledtLineTransaction.Long_Term_DeveloperColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Long Term Developer\' in table \'dtLineTransaction\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tabledtLineTransaction.Long_Term_DeveloperColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPKeyNull() {
                return this.IsNull(this.tabledtLineTransaction.PKeyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPKeyNull() {
                this[this.tabledtLineTransaction.PKeyColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIdNull() {
                return this.IsNull(this.tabledtLineTransaction.IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIdNull() {
                this[this.tabledtLineTransaction.IdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLineDecriptionIdNull() {
                return this.IsNull(this.tabledtLineTransaction.LineDecriptionIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLineDecriptionIdNull() {
                this[this.tabledtLineTransaction.LineDecriptionIdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDateNull() {
                return this.IsNull(this.tabledtLineTransaction.DateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDateNull() {
                this[this.tabledtLineTransaction.DateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsShort_Term_ColorantNull() {
                return this.IsNull(this.tabledtLineTransaction.Short_Term_ColorantColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetShort_Term_ColorantNull() {
                this[this.tabledtLineTransaction.Short_Term_ColorantColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsShort_Term_DeveloperNull() {
                return this.IsNull(this.tabledtLineTransaction.Short_Term_DeveloperColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetShort_Term_DeveloperNull() {
                this[this.tabledtLineTransaction.Short_Term_DeveloperColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLong_Term_ColorantNull() {
                return this.IsNull(this.tabledtLineTransaction.Long_Term_ColorantColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLong_Term_ColorantNull() {
                this[this.tabledtLineTransaction.Long_Term_ColorantColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLong_Term_DeveloperNull() {
                return this.IsNull(this.tabledtLineTransaction.Long_Term_DeveloperColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLong_Term_DeveloperNull() {
                this[this.tabledtLineTransaction.Long_Term_DeveloperColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class STP_SelectLineTransactionMasterReportRowChangeEvent : global::System.EventArgs {
            
            private STP_SelectLineTransactionMasterReportRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public STP_SelectLineTransactionMasterReportRowChangeEvent(STP_SelectLineTransactionMasterReportRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public STP_SelectLineTransactionMasterReportRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class STP_SelectLineTransactionReportRowChangeEvent : global::System.EventArgs {
            
            private STP_SelectLineTransactionReportRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public STP_SelectLineTransactionReportRowChangeEvent(STP_SelectLineTransactionReportRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public STP_SelectLineTransactionReportRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class STP_Select_tblLineQualityRiskAnalysisFileMasterRowChangeEvent : global::System.EventArgs {
            
            private STP_Select_tblLineQualityRiskAnalysisFileMasterRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public STP_Select_tblLineQualityRiskAnalysisFileMasterRowChangeEvent(STP_Select_tblLineQualityRiskAnalysisFileMasterRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public STP_Select_tblLineQualityRiskAnalysisFileMasterRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class dtLineTransactionRowChangeEvent : global::System.EventArgs {
            
            private dtLineTransactionRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtLineTransactionRowChangeEvent(dtLineTransactionRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtLineTransactionRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
namespace QTMS.Reports.DSLineTransactionReportTableAdapters {
    
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class STP_SelectLineTransactionMasterReportTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public STP_SelectLineTransactionMasterReportTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "STP_SelectLineTransactionMasterReport";
            tableMapping.ColumnMappings.Add("ValidFrom", "ValidFrom");
            tableMapping.ColumnMappings.Add("ValidTo", "ValidTo");
            tableMapping.ColumnMappings.Add("Name", "Name");
            tableMapping.ColumnMappings.Add("Parameter", "Parameter");
            tableMapping.ColumnMappings.Add("MinVal", "MinVal");
            tableMapping.ColumnMappings.Add("MaxVal", "MaxVal");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::QTMS.Properties.Settings.Default.QTMS2ConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "dbo.STP_SelectLineTransactionMasterReport";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.StoredProcedure;
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RETURN_VALUE", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.ReturnValue, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@LineDescriptionId", global::System.Data.SqlDbType.BigInt, 8, global::System.Data.ParameterDirection.Input, 19, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@fromDate", global::System.Data.SqlDbType.DateTime, 8, global::System.Data.ParameterDirection.Input, 23, 3, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@toDate", global::System.Data.SqlDbType.DateTime, 8, global::System.Data.ParameterDirection.Input, 23, 3, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(DSLineTransactionReport.STP_SelectLineTransactionMasterReportDataTable dataTable, global::System.Nullable<long> LineDescriptionId, global::System.Nullable<global::System.DateTime> fromDate, global::System.Nullable<global::System.DateTime> toDate) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((LineDescriptionId.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[1].Value = ((long)(LineDescriptionId.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((fromDate.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[2].Value = ((System.DateTime)(fromDate.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((toDate.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[3].Value = ((System.DateTime)(toDate.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual DSLineTransactionReport.STP_SelectLineTransactionMasterReportDataTable GetData(global::System.Nullable<long> LineDescriptionId, global::System.Nullable<global::System.DateTime> fromDate, global::System.Nullable<global::System.DateTime> toDate) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((LineDescriptionId.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[1].Value = ((long)(LineDescriptionId.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((fromDate.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[2].Value = ((System.DateTime)(fromDate.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((toDate.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[3].Value = ((System.DateTime)(toDate.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            DSLineTransactionReport.STP_SelectLineTransactionMasterReportDataTable dataTable = new DSLineTransactionReport.STP_SelectLineTransactionMasterReportDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class STP_SelectLineTransactionReportTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public STP_SelectLineTransactionReportTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "STP_SelectLineTransactionReport";
            tableMapping.ColumnMappings.Add("LineTransactionMasterId", "LineTransactionMasterId");
            tableMapping.ColumnMappings.Add("Date", "Date");
            tableMapping.ColumnMappings.Add("Name", "Name");
            tableMapping.ColumnMappings.Add("Parameter", "Parameter");
            tableMapping.ColumnMappings.Add("MinVal", "MinVal");
            tableMapping.ColumnMappings.Add("MaxVal", "MaxVal");
            tableMapping.ColumnMappings.Add("TransactionDate", "TransactionDate");
            tableMapping.ColumnMappings.Add("DueDate", "DueDate");
            tableMapping.ColumnMappings.Add("Result", "Result");
            tableMapping.ColumnMappings.Add("Status", "Status");
            tableMapping.ColumnMappings.Add("AttachedFilePath", "AttachedFilePath");
            tableMapping.ColumnMappings.Add("ActionPlanFileName", "ActionPlanFileName");
            tableMapping.ColumnMappings.Add("ActionPlanFilePath", "ActionPlanFilePath");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::QTMS.Properties.Settings.Default.QTMS2ConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "dbo.STP_SelectLineTransactionReport";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.StoredProcedure;
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RETURN_VALUE", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.ReturnValue, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@LineDescriptionId", global::System.Data.SqlDbType.BigInt, 8, global::System.Data.ParameterDirection.Input, 19, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@fromDate", global::System.Data.SqlDbType.DateTime, 8, global::System.Data.ParameterDirection.Input, 23, 3, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@toDate", global::System.Data.SqlDbType.DateTime, 8, global::System.Data.ParameterDirection.Input, 23, 3, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(DSLineTransactionReport.STP_SelectLineTransactionReportDataTable dataTable, global::System.Nullable<long> LineDescriptionId, global::System.Nullable<global::System.DateTime> fromDate, global::System.Nullable<global::System.DateTime> toDate) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((LineDescriptionId.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[1].Value = ((long)(LineDescriptionId.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((fromDate.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[2].Value = ((System.DateTime)(fromDate.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((toDate.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[3].Value = ((System.DateTime)(toDate.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual DSLineTransactionReport.STP_SelectLineTransactionReportDataTable GetData(global::System.Nullable<long> LineDescriptionId, global::System.Nullable<global::System.DateTime> fromDate, global::System.Nullable<global::System.DateTime> toDate) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((LineDescriptionId.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[1].Value = ((long)(LineDescriptionId.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((fromDate.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[2].Value = ((System.DateTime)(fromDate.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((toDate.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[3].Value = ((System.DateTime)(toDate.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            DSLineTransactionReport.STP_SelectLineTransactionReportDataTable dataTable = new DSLineTransactionReport.STP_SelectLineTransactionReportDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class STP_Select_tblLineQualityRiskAnalysisFileMasterTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public STP_Select_tblLineQualityRiskAnalysisFileMasterTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "STP_Select_tblLineQualityRiskAnalysisFileMaster";
            tableMapping.ColumnMappings.Add("Id", "Id");
            tableMapping.ColumnMappings.Add("LineTransactionMasterId", "LineTransactionMasterId");
            tableMapping.ColumnMappings.Add("QualityRiskAnalysisFilePath", "QualityRiskAnalysisFilePath");
            tableMapping.ColumnMappings.Add("QualityRiskAnalysisFileName", "QualityRiskAnalysisFileName");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::QTMS.Properties.Settings.Default.QTMS2ConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "dbo.STP_Select_tblLineQualityRiskAnalysisFileMaster";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.StoredProcedure;
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RETURN_VALUE", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.ReturnValue, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@LineTransactionMasterId", global::System.Data.SqlDbType.BigInt, 8, global::System.Data.ParameterDirection.Input, 19, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(DSLineTransactionReport.STP_Select_tblLineQualityRiskAnalysisFileMasterDataTable dataTable, global::System.Nullable<long> LineTransactionMasterId) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((LineTransactionMasterId.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[1].Value = ((long)(LineTransactionMasterId.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual DSLineTransactionReport.STP_Select_tblLineQualityRiskAnalysisFileMasterDataTable GetData(global::System.Nullable<long> LineTransactionMasterId) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((LineTransactionMasterId.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[1].Value = ((long)(LineTransactionMasterId.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            DSLineTransactionReport.STP_Select_tblLineQualityRiskAnalysisFileMasterDataTable dataTable = new DSLineTransactionReport.STP_Select_tblLineQualityRiskAnalysisFileMasterDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
}

#pragma warning restore 1591