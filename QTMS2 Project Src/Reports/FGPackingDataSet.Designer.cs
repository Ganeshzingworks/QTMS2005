//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.8009
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace QTMS.Reports {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("FGPackingDataSet")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class FGPackingDataSet : global::System.Data.DataSet {
        
        private dtDataTable tabledt;
        
        private dtLoreaLResultDataTable tabledtLoreaLResult;
        
        private dtSupplierResultDataTable tabledtSupplierResult;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public FGPackingDataSet() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected FGPackingDataSet(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["dt"] != null)) {
                    base.Tables.Add(new dtDataTable(ds.Tables["dt"]));
                }
                if ((ds.Tables["dtLoreaLResult"] != null)) {
                    base.Tables.Add(new dtLoreaLResultDataTable(ds.Tables["dtLoreaLResult"]));
                }
                if ((ds.Tables["dtSupplierResult"] != null)) {
                    base.Tables.Add(new dtSupplierResultDataTable(ds.Tables["dtSupplierResult"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public dtDataTable dt {
            get {
                return this.tabledt;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public dtLoreaLResultDataTable dtLoreaLResult {
            get {
                return this.tabledtLoreaLResult;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public dtSupplierResultDataTable dtSupplierResult {
            get {
                return this.tabledtSupplierResult;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            FGPackingDataSet cln = ((FGPackingDataSet)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["dt"] != null)) {
                    base.Tables.Add(new dtDataTable(ds.Tables["dt"]));
                }
                if ((ds.Tables["dtLoreaLResult"] != null)) {
                    base.Tables.Add(new dtLoreaLResultDataTable(ds.Tables["dtLoreaLResult"]));
                }
                if ((ds.Tables["dtSupplierResult"] != null)) {
                    base.Tables.Add(new dtSupplierResultDataTable(ds.Tables["dtSupplierResult"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tabledt = ((dtDataTable)(base.Tables["dt"]));
            if ((initTable == true)) {
                if ((this.tabledt != null)) {
                    this.tabledt.InitVars();
                }
            }
            this.tabledtLoreaLResult = ((dtLoreaLResultDataTable)(base.Tables["dtLoreaLResult"]));
            if ((initTable == true)) {
                if ((this.tabledtLoreaLResult != null)) {
                    this.tabledtLoreaLResult.InitVars();
                }
            }
            this.tabledtSupplierResult = ((dtSupplierResultDataTable)(base.Tables["dtSupplierResult"]));
            if ((initTable == true)) {
                if ((this.tabledtSupplierResult != null)) {
                    this.tabledtSupplierResult.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "FGPackingDataSet";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/FGPackingDataSet.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tabledt = new dtDataTable();
            base.Tables.Add(this.tabledt);
            this.tabledtLoreaLResult = new dtLoreaLResultDataTable();
            base.Tables.Add(this.tabledtLoreaLResult);
            this.tabledtSupplierResult = new dtSupplierResultDataTable();
            base.Tables.Add(this.tabledtSupplierResult);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializedt() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializedtLoreaLResult() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializedtSupplierResult() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            FGPackingDataSet ds = new FGPackingDataSet();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void dtRowChangeEventHandler(object sender, dtRowChangeEvent e);
        
        public delegate void dtLoreaLResultRowChangeEventHandler(object sender, dtLoreaLResultRowChangeEvent e);
        
        public delegate void dtSupplierResultRowChangeEventHandler(object sender, dtSupplierResultRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class dtDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnTestMethod;
            
            private global::System.Data.DataColumn columnInspectionMethod;
            
            private global::System.Data.DataColumn columnFrequency;
            
            private global::System.Data.DataColumn columnLotSize;
            
            private global::System.Data.DataColumn columnSampleSizeStandard;
            
            private global::System.Data.DataColumn columnSampleSizeReading;
            
            private global::System.Data.DataColumn columnAQLStandard;
            
            private global::System.Data.DataColumn columnAQLReading;
            
            private global::System.Data.DataColumn columnAQLzStandard;
            
            private global::System.Data.DataColumn columnAQLzReading;
            
            private global::System.Data.DataColumn columnAQLcStandard;
            
            private global::System.Data.DataColumn columnAQLcReading;
            
            private global::System.Data.DataColumn columnAQLMStandard;
            
            private global::System.Data.DataColumn columnAQLMReading;
            
            private global::System.Data.DataColumn columnAQLM1Standard;
            
            private global::System.Data.DataColumn columnAQLM1Reading;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtDataTable() {
                this.TableName = "dt";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal dtDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected dtDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TestMethodColumn {
                get {
                    return this.columnTestMethod;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InspectionMethodColumn {
                get {
                    return this.columnInspectionMethod;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FrequencyColumn {
                get {
                    return this.columnFrequency;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LotSizeColumn {
                get {
                    return this.columnLotSize;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SampleSizeStandardColumn {
                get {
                    return this.columnSampleSizeStandard;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SampleSizeReadingColumn {
                get {
                    return this.columnSampleSizeReading;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AQLStandardColumn {
                get {
                    return this.columnAQLStandard;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AQLReadingColumn {
                get {
                    return this.columnAQLReading;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AQLzStandardColumn {
                get {
                    return this.columnAQLzStandard;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AQLzReadingColumn {
                get {
                    return this.columnAQLzReading;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AQLcStandardColumn {
                get {
                    return this.columnAQLcStandard;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AQLcReadingColumn {
                get {
                    return this.columnAQLcReading;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AQLMStandardColumn {
                get {
                    return this.columnAQLMStandard;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AQLMReadingColumn {
                get {
                    return this.columnAQLMReading;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AQLM1StandardColumn {
                get {
                    return this.columnAQLM1Standard;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AQLM1ReadingColumn {
                get {
                    return this.columnAQLM1Reading;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtRow this[int index] {
                get {
                    return ((dtRow)(this.Rows[index]));
                }
            }
            
            public event dtRowChangeEventHandler dtRowChanging;
            
            public event dtRowChangeEventHandler dtRowChanged;
            
            public event dtRowChangeEventHandler dtRowDeleting;
            
            public event dtRowChangeEventHandler dtRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AdddtRow(dtRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtRow AdddtRow(
                        string TestMethod, 
                        string InspectionMethod, 
                        string Frequency, 
                        string LotSize, 
                        string SampleSizeStandard, 
                        string SampleSizeReading, 
                        string AQLStandard, 
                        string AQLReading, 
                        string AQLzStandard, 
                        string AQLzReading, 
                        string AQLcStandard, 
                        string AQLcReading, 
                        string AQLMStandard, 
                        string AQLMReading, 
                        string AQLM1Standard, 
                        string AQLM1Reading) {
                dtRow rowdtRow = ((dtRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        TestMethod,
                        InspectionMethod,
                        Frequency,
                        LotSize,
                        SampleSizeStandard,
                        SampleSizeReading,
                        AQLStandard,
                        AQLReading,
                        AQLzStandard,
                        AQLzReading,
                        AQLcStandard,
                        AQLcReading,
                        AQLMStandard,
                        AQLMReading,
                        AQLM1Standard,
                        AQLM1Reading};
                rowdtRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowdtRow);
                return rowdtRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                dtDataTable cln = ((dtDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new dtDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnTestMethod = base.Columns["TestMethod"];
                this.columnInspectionMethod = base.Columns["InspectionMethod"];
                this.columnFrequency = base.Columns["Frequency"];
                this.columnLotSize = base.Columns["LotSize"];
                this.columnSampleSizeStandard = base.Columns["SampleSizeStandard"];
                this.columnSampleSizeReading = base.Columns["SampleSizeReading"];
                this.columnAQLStandard = base.Columns["AQLStandard"];
                this.columnAQLReading = base.Columns["AQLReading"];
                this.columnAQLzStandard = base.Columns["AQLzStandard"];
                this.columnAQLzReading = base.Columns["AQLzReading"];
                this.columnAQLcStandard = base.Columns["AQLcStandard"];
                this.columnAQLcReading = base.Columns["AQLcReading"];
                this.columnAQLMStandard = base.Columns["AQLMStandard"];
                this.columnAQLMReading = base.Columns["AQLMReading"];
                this.columnAQLM1Standard = base.Columns["AQLM1Standard"];
                this.columnAQLM1Reading = base.Columns["AQLM1Reading"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnTestMethod = new global::System.Data.DataColumn("TestMethod", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTestMethod);
                this.columnInspectionMethod = new global::System.Data.DataColumn("InspectionMethod", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInspectionMethod);
                this.columnFrequency = new global::System.Data.DataColumn("Frequency", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFrequency);
                this.columnLotSize = new global::System.Data.DataColumn("LotSize", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLotSize);
                this.columnSampleSizeStandard = new global::System.Data.DataColumn("SampleSizeStandard", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSampleSizeStandard);
                this.columnSampleSizeReading = new global::System.Data.DataColumn("SampleSizeReading", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSampleSizeReading);
                this.columnAQLStandard = new global::System.Data.DataColumn("AQLStandard", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAQLStandard);
                this.columnAQLReading = new global::System.Data.DataColumn("AQLReading", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAQLReading);
                this.columnAQLzStandard = new global::System.Data.DataColumn("AQLzStandard", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAQLzStandard);
                this.columnAQLzReading = new global::System.Data.DataColumn("AQLzReading", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAQLzReading);
                this.columnAQLcStandard = new global::System.Data.DataColumn("AQLcStandard", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAQLcStandard);
                this.columnAQLcReading = new global::System.Data.DataColumn("AQLcReading", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAQLcReading);
                this.columnAQLMStandard = new global::System.Data.DataColumn("AQLMStandard", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAQLMStandard);
                this.columnAQLMReading = new global::System.Data.DataColumn("AQLMReading", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAQLMReading);
                this.columnAQLM1Standard = new global::System.Data.DataColumn("AQLM1Standard", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAQLM1Standard);
                this.columnAQLM1Reading = new global::System.Data.DataColumn("AQLM1Reading", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAQLM1Reading);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtRow NewdtRow() {
                return ((dtRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new dtRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(dtRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.dtRowChanged != null)) {
                    this.dtRowChanged(this, new dtRowChangeEvent(((dtRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.dtRowChanging != null)) {
                    this.dtRowChanging(this, new dtRowChangeEvent(((dtRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.dtRowDeleted != null)) {
                    this.dtRowDeleted(this, new dtRowChangeEvent(((dtRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.dtRowDeleting != null)) {
                    this.dtRowDeleting(this, new dtRowChangeEvent(((dtRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovedtRow(dtRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                FGPackingDataSet ds = new FGPackingDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "dtDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class dtLoreaLResultDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnTestMethod;
            
            private global::System.Data.DataColumn columnInspectionMethod;
            
            private global::System.Data.DataColumn columnFrequency;
            
            private global::System.Data.DataColumn columnLotSize;
            
            private global::System.Data.DataColumn columnSampleSizeStandard;
            
            private global::System.Data.DataColumn columnSampleSizeReading;
            
            private global::System.Data.DataColumn columnAQLStandard;
            
            private global::System.Data.DataColumn columnAQLReading;
            
            private global::System.Data.DataColumn columnAQLzStandard;
            
            private global::System.Data.DataColumn columnAQLzReading;
            
            private global::System.Data.DataColumn columnAQLcStandard;
            
            private global::System.Data.DataColumn columnAQLcReading;
            
            private global::System.Data.DataColumn columnAQLMStandard;
            
            private global::System.Data.DataColumn columnAQLMReading;
            
            private global::System.Data.DataColumn columnAQLM1Standard;
            
            private global::System.Data.DataColumn columnAQLM1Reading;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtLoreaLResultDataTable() {
                this.TableName = "dtLoreaLResult";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal dtLoreaLResultDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected dtLoreaLResultDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TestMethodColumn {
                get {
                    return this.columnTestMethod;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InspectionMethodColumn {
                get {
                    return this.columnInspectionMethod;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FrequencyColumn {
                get {
                    return this.columnFrequency;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LotSizeColumn {
                get {
                    return this.columnLotSize;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SampleSizeStandardColumn {
                get {
                    return this.columnSampleSizeStandard;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SampleSizeReadingColumn {
                get {
                    return this.columnSampleSizeReading;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AQLStandardColumn {
                get {
                    return this.columnAQLStandard;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AQLReadingColumn {
                get {
                    return this.columnAQLReading;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AQLzStandardColumn {
                get {
                    return this.columnAQLzStandard;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AQLzReadingColumn {
                get {
                    return this.columnAQLzReading;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AQLcStandardColumn {
                get {
                    return this.columnAQLcStandard;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AQLcReadingColumn {
                get {
                    return this.columnAQLcReading;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AQLMStandardColumn {
                get {
                    return this.columnAQLMStandard;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AQLMReadingColumn {
                get {
                    return this.columnAQLMReading;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AQLM1StandardColumn {
                get {
                    return this.columnAQLM1Standard;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AQLM1ReadingColumn {
                get {
                    return this.columnAQLM1Reading;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtLoreaLResultRow this[int index] {
                get {
                    return ((dtLoreaLResultRow)(this.Rows[index]));
                }
            }
            
            public event dtLoreaLResultRowChangeEventHandler dtLoreaLResultRowChanging;
            
            public event dtLoreaLResultRowChangeEventHandler dtLoreaLResultRowChanged;
            
            public event dtLoreaLResultRowChangeEventHandler dtLoreaLResultRowDeleting;
            
            public event dtLoreaLResultRowChangeEventHandler dtLoreaLResultRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AdddtLoreaLResultRow(dtLoreaLResultRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtLoreaLResultRow AdddtLoreaLResultRow(
                        string TestMethod, 
                        string InspectionMethod, 
                        string Frequency, 
                        string LotSize, 
                        string SampleSizeStandard, 
                        string SampleSizeReading, 
                        string AQLStandard, 
                        string AQLReading, 
                        string AQLzStandard, 
                        string AQLzReading, 
                        string AQLcStandard, 
                        string AQLcReading, 
                        string AQLMStandard, 
                        string AQLMReading, 
                        string AQLM1Standard, 
                        string AQLM1Reading) {
                dtLoreaLResultRow rowdtLoreaLResultRow = ((dtLoreaLResultRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        TestMethod,
                        InspectionMethod,
                        Frequency,
                        LotSize,
                        SampleSizeStandard,
                        SampleSizeReading,
                        AQLStandard,
                        AQLReading,
                        AQLzStandard,
                        AQLzReading,
                        AQLcStandard,
                        AQLcReading,
                        AQLMStandard,
                        AQLMReading,
                        AQLM1Standard,
                        AQLM1Reading};
                rowdtLoreaLResultRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowdtLoreaLResultRow);
                return rowdtLoreaLResultRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                dtLoreaLResultDataTable cln = ((dtLoreaLResultDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new dtLoreaLResultDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnTestMethod = base.Columns["TestMethod"];
                this.columnInspectionMethod = base.Columns["InspectionMethod"];
                this.columnFrequency = base.Columns["Frequency"];
                this.columnLotSize = base.Columns["LotSize"];
                this.columnSampleSizeStandard = base.Columns["SampleSizeStandard"];
                this.columnSampleSizeReading = base.Columns["SampleSizeReading"];
                this.columnAQLStandard = base.Columns["AQLStandard"];
                this.columnAQLReading = base.Columns["AQLReading"];
                this.columnAQLzStandard = base.Columns["AQLzStandard"];
                this.columnAQLzReading = base.Columns["AQLzReading"];
                this.columnAQLcStandard = base.Columns["AQLcStandard"];
                this.columnAQLcReading = base.Columns["AQLcReading"];
                this.columnAQLMStandard = base.Columns["AQLMStandard"];
                this.columnAQLMReading = base.Columns["AQLMReading"];
                this.columnAQLM1Standard = base.Columns["AQLM1Standard"];
                this.columnAQLM1Reading = base.Columns["AQLM1Reading"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnTestMethod = new global::System.Data.DataColumn("TestMethod", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTestMethod);
                this.columnInspectionMethod = new global::System.Data.DataColumn("InspectionMethod", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInspectionMethod);
                this.columnFrequency = new global::System.Data.DataColumn("Frequency", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFrequency);
                this.columnLotSize = new global::System.Data.DataColumn("LotSize", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLotSize);
                this.columnSampleSizeStandard = new global::System.Data.DataColumn("SampleSizeStandard", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSampleSizeStandard);
                this.columnSampleSizeReading = new global::System.Data.DataColumn("SampleSizeReading", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSampleSizeReading);
                this.columnAQLStandard = new global::System.Data.DataColumn("AQLStandard", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAQLStandard);
                this.columnAQLReading = new global::System.Data.DataColumn("AQLReading", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAQLReading);
                this.columnAQLzStandard = new global::System.Data.DataColumn("AQLzStandard", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAQLzStandard);
                this.columnAQLzReading = new global::System.Data.DataColumn("AQLzReading", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAQLzReading);
                this.columnAQLcStandard = new global::System.Data.DataColumn("AQLcStandard", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAQLcStandard);
                this.columnAQLcReading = new global::System.Data.DataColumn("AQLcReading", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAQLcReading);
                this.columnAQLMStandard = new global::System.Data.DataColumn("AQLMStandard", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAQLMStandard);
                this.columnAQLMReading = new global::System.Data.DataColumn("AQLMReading", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAQLMReading);
                this.columnAQLM1Standard = new global::System.Data.DataColumn("AQLM1Standard", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAQLM1Standard);
                this.columnAQLM1Reading = new global::System.Data.DataColumn("AQLM1Reading", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAQLM1Reading);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtLoreaLResultRow NewdtLoreaLResultRow() {
                return ((dtLoreaLResultRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new dtLoreaLResultRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(dtLoreaLResultRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.dtLoreaLResultRowChanged != null)) {
                    this.dtLoreaLResultRowChanged(this, new dtLoreaLResultRowChangeEvent(((dtLoreaLResultRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.dtLoreaLResultRowChanging != null)) {
                    this.dtLoreaLResultRowChanging(this, new dtLoreaLResultRowChangeEvent(((dtLoreaLResultRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.dtLoreaLResultRowDeleted != null)) {
                    this.dtLoreaLResultRowDeleted(this, new dtLoreaLResultRowChangeEvent(((dtLoreaLResultRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.dtLoreaLResultRowDeleting != null)) {
                    this.dtLoreaLResultRowDeleting(this, new dtLoreaLResultRowChangeEvent(((dtLoreaLResultRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovedtLoreaLResultRow(dtLoreaLResultRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                FGPackingDataSet ds = new FGPackingDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "dtLoreaLResultDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class dtSupplierResultDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnTestMethod;
            
            private global::System.Data.DataColumn columnInspectionMethod;
            
            private global::System.Data.DataColumn columnFrequency;
            
            private global::System.Data.DataColumn columnLotSize;
            
            private global::System.Data.DataColumn columnSampleSizeStandard;
            
            private global::System.Data.DataColumn columnSampleSizeReading;
            
            private global::System.Data.DataColumn columnAQLStandard;
            
            private global::System.Data.DataColumn columnAQLReading;
            
            private global::System.Data.DataColumn columnAQLzStandard;
            
            private global::System.Data.DataColumn columnAQLzReading;
            
            private global::System.Data.DataColumn columnAQLcStandard;
            
            private global::System.Data.DataColumn columnAQLcReading;
            
            private global::System.Data.DataColumn columnAQLMStandard;
            
            private global::System.Data.DataColumn columnAQLMReading;
            
            private global::System.Data.DataColumn columnAQLM1Standard;
            
            private global::System.Data.DataColumn columnAQLM1Reading;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtSupplierResultDataTable() {
                this.TableName = "dtSupplierResult";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal dtSupplierResultDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected dtSupplierResultDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TestMethodColumn {
                get {
                    return this.columnTestMethod;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InspectionMethodColumn {
                get {
                    return this.columnInspectionMethod;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FrequencyColumn {
                get {
                    return this.columnFrequency;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LotSizeColumn {
                get {
                    return this.columnLotSize;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SampleSizeStandardColumn {
                get {
                    return this.columnSampleSizeStandard;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SampleSizeReadingColumn {
                get {
                    return this.columnSampleSizeReading;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AQLStandardColumn {
                get {
                    return this.columnAQLStandard;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AQLReadingColumn {
                get {
                    return this.columnAQLReading;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AQLzStandardColumn {
                get {
                    return this.columnAQLzStandard;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AQLzReadingColumn {
                get {
                    return this.columnAQLzReading;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AQLcStandardColumn {
                get {
                    return this.columnAQLcStandard;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AQLcReadingColumn {
                get {
                    return this.columnAQLcReading;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AQLMStandardColumn {
                get {
                    return this.columnAQLMStandard;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AQLMReadingColumn {
                get {
                    return this.columnAQLMReading;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AQLM1StandardColumn {
                get {
                    return this.columnAQLM1Standard;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AQLM1ReadingColumn {
                get {
                    return this.columnAQLM1Reading;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtSupplierResultRow this[int index] {
                get {
                    return ((dtSupplierResultRow)(this.Rows[index]));
                }
            }
            
            public event dtSupplierResultRowChangeEventHandler dtSupplierResultRowChanging;
            
            public event dtSupplierResultRowChangeEventHandler dtSupplierResultRowChanged;
            
            public event dtSupplierResultRowChangeEventHandler dtSupplierResultRowDeleting;
            
            public event dtSupplierResultRowChangeEventHandler dtSupplierResultRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AdddtSupplierResultRow(dtSupplierResultRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtSupplierResultRow AdddtSupplierResultRow(
                        string TestMethod, 
                        string InspectionMethod, 
                        string Frequency, 
                        string LotSize, 
                        string SampleSizeStandard, 
                        string SampleSizeReading, 
                        string AQLStandard, 
                        string AQLReading, 
                        string AQLzStandard, 
                        string AQLzReading, 
                        string AQLcStandard, 
                        string AQLcReading, 
                        string AQLMStandard, 
                        string AQLMReading, 
                        string AQLM1Standard, 
                        string AQLM1Reading) {
                dtSupplierResultRow rowdtSupplierResultRow = ((dtSupplierResultRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        TestMethod,
                        InspectionMethod,
                        Frequency,
                        LotSize,
                        SampleSizeStandard,
                        SampleSizeReading,
                        AQLStandard,
                        AQLReading,
                        AQLzStandard,
                        AQLzReading,
                        AQLcStandard,
                        AQLcReading,
                        AQLMStandard,
                        AQLMReading,
                        AQLM1Standard,
                        AQLM1Reading};
                rowdtSupplierResultRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowdtSupplierResultRow);
                return rowdtSupplierResultRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                dtSupplierResultDataTable cln = ((dtSupplierResultDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new dtSupplierResultDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnTestMethod = base.Columns["TestMethod"];
                this.columnInspectionMethod = base.Columns["InspectionMethod"];
                this.columnFrequency = base.Columns["Frequency"];
                this.columnLotSize = base.Columns["LotSize"];
                this.columnSampleSizeStandard = base.Columns["SampleSizeStandard"];
                this.columnSampleSizeReading = base.Columns["SampleSizeReading"];
                this.columnAQLStandard = base.Columns["AQLStandard"];
                this.columnAQLReading = base.Columns["AQLReading"];
                this.columnAQLzStandard = base.Columns["AQLzStandard"];
                this.columnAQLzReading = base.Columns["AQLzReading"];
                this.columnAQLcStandard = base.Columns["AQLcStandard"];
                this.columnAQLcReading = base.Columns["AQLcReading"];
                this.columnAQLMStandard = base.Columns["AQLMStandard"];
                this.columnAQLMReading = base.Columns["AQLMReading"];
                this.columnAQLM1Standard = base.Columns["AQLM1Standard"];
                this.columnAQLM1Reading = base.Columns["AQLM1Reading"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnTestMethod = new global::System.Data.DataColumn("TestMethod", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTestMethod);
                this.columnInspectionMethod = new global::System.Data.DataColumn("InspectionMethod", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInspectionMethod);
                this.columnFrequency = new global::System.Data.DataColumn("Frequency", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFrequency);
                this.columnLotSize = new global::System.Data.DataColumn("LotSize", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLotSize);
                this.columnSampleSizeStandard = new global::System.Data.DataColumn("SampleSizeStandard", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSampleSizeStandard);
                this.columnSampleSizeReading = new global::System.Data.DataColumn("SampleSizeReading", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSampleSizeReading);
                this.columnAQLStandard = new global::System.Data.DataColumn("AQLStandard", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAQLStandard);
                this.columnAQLReading = new global::System.Data.DataColumn("AQLReading", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAQLReading);
                this.columnAQLzStandard = new global::System.Data.DataColumn("AQLzStandard", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAQLzStandard);
                this.columnAQLzReading = new global::System.Data.DataColumn("AQLzReading", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAQLzReading);
                this.columnAQLcStandard = new global::System.Data.DataColumn("AQLcStandard", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAQLcStandard);
                this.columnAQLcReading = new global::System.Data.DataColumn("AQLcReading", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAQLcReading);
                this.columnAQLMStandard = new global::System.Data.DataColumn("AQLMStandard", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAQLMStandard);
                this.columnAQLMReading = new global::System.Data.DataColumn("AQLMReading", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAQLMReading);
                this.columnAQLM1Standard = new global::System.Data.DataColumn("AQLM1Standard", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAQLM1Standard);
                this.columnAQLM1Reading = new global::System.Data.DataColumn("AQLM1Reading", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAQLM1Reading);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtSupplierResultRow NewdtSupplierResultRow() {
                return ((dtSupplierResultRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new dtSupplierResultRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(dtSupplierResultRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.dtSupplierResultRowChanged != null)) {
                    this.dtSupplierResultRowChanged(this, new dtSupplierResultRowChangeEvent(((dtSupplierResultRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.dtSupplierResultRowChanging != null)) {
                    this.dtSupplierResultRowChanging(this, new dtSupplierResultRowChangeEvent(((dtSupplierResultRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.dtSupplierResultRowDeleted != null)) {
                    this.dtSupplierResultRowDeleted(this, new dtSupplierResultRowChangeEvent(((dtSupplierResultRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.dtSupplierResultRowDeleting != null)) {
                    this.dtSupplierResultRowDeleting(this, new dtSupplierResultRowChangeEvent(((dtSupplierResultRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovedtSupplierResultRow(dtSupplierResultRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                FGPackingDataSet ds = new FGPackingDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "dtSupplierResultDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class dtRow : global::System.Data.DataRow {
            
            private dtDataTable tabledt;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal dtRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tabledt = ((dtDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TestMethod {
                get {
                    try {
                        return ((string)(this[this.tabledt.TestMethodColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TestMethod\' in table \'dt\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledt.TestMethodColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string InspectionMethod {
                get {
                    try {
                        return ((string)(this[this.tabledt.InspectionMethodColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InspectionMethod\' in table \'dt\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledt.InspectionMethodColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Frequency {
                get {
                    try {
                        return ((string)(this[this.tabledt.FrequencyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Frequency\' in table \'dt\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledt.FrequencyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LotSize {
                get {
                    try {
                        return ((string)(this[this.tabledt.LotSizeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LotSize\' in table \'dt\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledt.LotSizeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SampleSizeStandard {
                get {
                    try {
                        return ((string)(this[this.tabledt.SampleSizeStandardColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SampleSizeStandard\' in table \'dt\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledt.SampleSizeStandardColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SampleSizeReading {
                get {
                    try {
                        return ((string)(this[this.tabledt.SampleSizeReadingColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SampleSizeReading\' in table \'dt\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledt.SampleSizeReadingColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AQLStandard {
                get {
                    try {
                        return ((string)(this[this.tabledt.AQLStandardColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AQLStandard\' in table \'dt\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledt.AQLStandardColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AQLReading {
                get {
                    try {
                        return ((string)(this[this.tabledt.AQLReadingColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AQLReading\' in table \'dt\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledt.AQLReadingColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AQLzStandard {
                get {
                    try {
                        return ((string)(this[this.tabledt.AQLzStandardColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AQLzStandard\' in table \'dt\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledt.AQLzStandardColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AQLzReading {
                get {
                    try {
                        return ((string)(this[this.tabledt.AQLzReadingColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AQLzReading\' in table \'dt\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledt.AQLzReadingColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AQLcStandard {
                get {
                    try {
                        return ((string)(this[this.tabledt.AQLcStandardColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AQLcStandard\' in table \'dt\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledt.AQLcStandardColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AQLcReading {
                get {
                    try {
                        return ((string)(this[this.tabledt.AQLcReadingColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AQLcReading\' in table \'dt\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledt.AQLcReadingColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AQLMStandard {
                get {
                    try {
                        return ((string)(this[this.tabledt.AQLMStandardColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AQLMStandard\' in table \'dt\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledt.AQLMStandardColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AQLMReading {
                get {
                    try {
                        return ((string)(this[this.tabledt.AQLMReadingColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AQLMReading\' in table \'dt\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledt.AQLMReadingColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AQLM1Standard {
                get {
                    try {
                        return ((string)(this[this.tabledt.AQLM1StandardColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AQLM1Standard\' in table \'dt\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledt.AQLM1StandardColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AQLM1Reading {
                get {
                    try {
                        return ((string)(this[this.tabledt.AQLM1ReadingColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AQLM1Reading\' in table \'dt\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledt.AQLM1ReadingColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTestMethodNull() {
                return this.IsNull(this.tabledt.TestMethodColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTestMethodNull() {
                this[this.tabledt.TestMethodColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInspectionMethodNull() {
                return this.IsNull(this.tabledt.InspectionMethodColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInspectionMethodNull() {
                this[this.tabledt.InspectionMethodColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFrequencyNull() {
                return this.IsNull(this.tabledt.FrequencyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFrequencyNull() {
                this[this.tabledt.FrequencyColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLotSizeNull() {
                return this.IsNull(this.tabledt.LotSizeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLotSizeNull() {
                this[this.tabledt.LotSizeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSampleSizeStandardNull() {
                return this.IsNull(this.tabledt.SampleSizeStandardColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSampleSizeStandardNull() {
                this[this.tabledt.SampleSizeStandardColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSampleSizeReadingNull() {
                return this.IsNull(this.tabledt.SampleSizeReadingColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSampleSizeReadingNull() {
                this[this.tabledt.SampleSizeReadingColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAQLStandardNull() {
                return this.IsNull(this.tabledt.AQLStandardColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAQLStandardNull() {
                this[this.tabledt.AQLStandardColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAQLReadingNull() {
                return this.IsNull(this.tabledt.AQLReadingColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAQLReadingNull() {
                this[this.tabledt.AQLReadingColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAQLzStandardNull() {
                return this.IsNull(this.tabledt.AQLzStandardColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAQLzStandardNull() {
                this[this.tabledt.AQLzStandardColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAQLzReadingNull() {
                return this.IsNull(this.tabledt.AQLzReadingColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAQLzReadingNull() {
                this[this.tabledt.AQLzReadingColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAQLcStandardNull() {
                return this.IsNull(this.tabledt.AQLcStandardColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAQLcStandardNull() {
                this[this.tabledt.AQLcStandardColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAQLcReadingNull() {
                return this.IsNull(this.tabledt.AQLcReadingColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAQLcReadingNull() {
                this[this.tabledt.AQLcReadingColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAQLMStandardNull() {
                return this.IsNull(this.tabledt.AQLMStandardColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAQLMStandardNull() {
                this[this.tabledt.AQLMStandardColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAQLMReadingNull() {
                return this.IsNull(this.tabledt.AQLMReadingColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAQLMReadingNull() {
                this[this.tabledt.AQLMReadingColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAQLM1StandardNull() {
                return this.IsNull(this.tabledt.AQLM1StandardColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAQLM1StandardNull() {
                this[this.tabledt.AQLM1StandardColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAQLM1ReadingNull() {
                return this.IsNull(this.tabledt.AQLM1ReadingColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAQLM1ReadingNull() {
                this[this.tabledt.AQLM1ReadingColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class dtLoreaLResultRow : global::System.Data.DataRow {
            
            private dtLoreaLResultDataTable tabledtLoreaLResult;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal dtLoreaLResultRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tabledtLoreaLResult = ((dtLoreaLResultDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TestMethod {
                get {
                    try {
                        return ((string)(this[this.tabledtLoreaLResult.TestMethodColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TestMethod\' in table \'dtLoreaLResult\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtLoreaLResult.TestMethodColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string InspectionMethod {
                get {
                    try {
                        return ((string)(this[this.tabledtLoreaLResult.InspectionMethodColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InspectionMethod\' in table \'dtLoreaLResult\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtLoreaLResult.InspectionMethodColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Frequency {
                get {
                    try {
                        return ((string)(this[this.tabledtLoreaLResult.FrequencyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Frequency\' in table \'dtLoreaLResult\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtLoreaLResult.FrequencyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LotSize {
                get {
                    try {
                        return ((string)(this[this.tabledtLoreaLResult.LotSizeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LotSize\' in table \'dtLoreaLResult\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtLoreaLResult.LotSizeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SampleSizeStandard {
                get {
                    try {
                        return ((string)(this[this.tabledtLoreaLResult.SampleSizeStandardColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SampleSizeStandard\' in table \'dtLoreaLResult\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtLoreaLResult.SampleSizeStandardColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SampleSizeReading {
                get {
                    try {
                        return ((string)(this[this.tabledtLoreaLResult.SampleSizeReadingColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SampleSizeReading\' in table \'dtLoreaLResult\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtLoreaLResult.SampleSizeReadingColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AQLStandard {
                get {
                    try {
                        return ((string)(this[this.tabledtLoreaLResult.AQLStandardColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AQLStandard\' in table \'dtLoreaLResult\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtLoreaLResult.AQLStandardColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AQLReading {
                get {
                    try {
                        return ((string)(this[this.tabledtLoreaLResult.AQLReadingColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AQLReading\' in table \'dtLoreaLResult\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtLoreaLResult.AQLReadingColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AQLzStandard {
                get {
                    try {
                        return ((string)(this[this.tabledtLoreaLResult.AQLzStandardColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AQLzStandard\' in table \'dtLoreaLResult\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtLoreaLResult.AQLzStandardColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AQLzReading {
                get {
                    try {
                        return ((string)(this[this.tabledtLoreaLResult.AQLzReadingColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AQLzReading\' in table \'dtLoreaLResult\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtLoreaLResult.AQLzReadingColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AQLcStandard {
                get {
                    try {
                        return ((string)(this[this.tabledtLoreaLResult.AQLcStandardColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AQLcStandard\' in table \'dtLoreaLResult\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtLoreaLResult.AQLcStandardColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AQLcReading {
                get {
                    try {
                        return ((string)(this[this.tabledtLoreaLResult.AQLcReadingColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AQLcReading\' in table \'dtLoreaLResult\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtLoreaLResult.AQLcReadingColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AQLMStandard {
                get {
                    try {
                        return ((string)(this[this.tabledtLoreaLResult.AQLMStandardColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AQLMStandard\' in table \'dtLoreaLResult\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtLoreaLResult.AQLMStandardColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AQLMReading {
                get {
                    try {
                        return ((string)(this[this.tabledtLoreaLResult.AQLMReadingColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AQLMReading\' in table \'dtLoreaLResult\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtLoreaLResult.AQLMReadingColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AQLM1Standard {
                get {
                    try {
                        return ((string)(this[this.tabledtLoreaLResult.AQLM1StandardColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AQLM1Standard\' in table \'dtLoreaLResult\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtLoreaLResult.AQLM1StandardColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AQLM1Reading {
                get {
                    try {
                        return ((string)(this[this.tabledtLoreaLResult.AQLM1ReadingColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AQLM1Reading\' in table \'dtLoreaLResult\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtLoreaLResult.AQLM1ReadingColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTestMethodNull() {
                return this.IsNull(this.tabledtLoreaLResult.TestMethodColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTestMethodNull() {
                this[this.tabledtLoreaLResult.TestMethodColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInspectionMethodNull() {
                return this.IsNull(this.tabledtLoreaLResult.InspectionMethodColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInspectionMethodNull() {
                this[this.tabledtLoreaLResult.InspectionMethodColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFrequencyNull() {
                return this.IsNull(this.tabledtLoreaLResult.FrequencyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFrequencyNull() {
                this[this.tabledtLoreaLResult.FrequencyColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLotSizeNull() {
                return this.IsNull(this.tabledtLoreaLResult.LotSizeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLotSizeNull() {
                this[this.tabledtLoreaLResult.LotSizeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSampleSizeStandardNull() {
                return this.IsNull(this.tabledtLoreaLResult.SampleSizeStandardColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSampleSizeStandardNull() {
                this[this.tabledtLoreaLResult.SampleSizeStandardColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSampleSizeReadingNull() {
                return this.IsNull(this.tabledtLoreaLResult.SampleSizeReadingColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSampleSizeReadingNull() {
                this[this.tabledtLoreaLResult.SampleSizeReadingColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAQLStandardNull() {
                return this.IsNull(this.tabledtLoreaLResult.AQLStandardColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAQLStandardNull() {
                this[this.tabledtLoreaLResult.AQLStandardColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAQLReadingNull() {
                return this.IsNull(this.tabledtLoreaLResult.AQLReadingColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAQLReadingNull() {
                this[this.tabledtLoreaLResult.AQLReadingColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAQLzStandardNull() {
                return this.IsNull(this.tabledtLoreaLResult.AQLzStandardColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAQLzStandardNull() {
                this[this.tabledtLoreaLResult.AQLzStandardColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAQLzReadingNull() {
                return this.IsNull(this.tabledtLoreaLResult.AQLzReadingColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAQLzReadingNull() {
                this[this.tabledtLoreaLResult.AQLzReadingColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAQLcStandardNull() {
                return this.IsNull(this.tabledtLoreaLResult.AQLcStandardColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAQLcStandardNull() {
                this[this.tabledtLoreaLResult.AQLcStandardColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAQLcReadingNull() {
                return this.IsNull(this.tabledtLoreaLResult.AQLcReadingColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAQLcReadingNull() {
                this[this.tabledtLoreaLResult.AQLcReadingColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAQLMStandardNull() {
                return this.IsNull(this.tabledtLoreaLResult.AQLMStandardColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAQLMStandardNull() {
                this[this.tabledtLoreaLResult.AQLMStandardColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAQLMReadingNull() {
                return this.IsNull(this.tabledtLoreaLResult.AQLMReadingColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAQLMReadingNull() {
                this[this.tabledtLoreaLResult.AQLMReadingColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAQLM1StandardNull() {
                return this.IsNull(this.tabledtLoreaLResult.AQLM1StandardColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAQLM1StandardNull() {
                this[this.tabledtLoreaLResult.AQLM1StandardColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAQLM1ReadingNull() {
                return this.IsNull(this.tabledtLoreaLResult.AQLM1ReadingColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAQLM1ReadingNull() {
                this[this.tabledtLoreaLResult.AQLM1ReadingColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class dtSupplierResultRow : global::System.Data.DataRow {
            
            private dtSupplierResultDataTable tabledtSupplierResult;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal dtSupplierResultRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tabledtSupplierResult = ((dtSupplierResultDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TestMethod {
                get {
                    try {
                        return ((string)(this[this.tabledtSupplierResult.TestMethodColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TestMethod\' in table \'dtSupplierResult\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtSupplierResult.TestMethodColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string InspectionMethod {
                get {
                    try {
                        return ((string)(this[this.tabledtSupplierResult.InspectionMethodColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InspectionMethod\' in table \'dtSupplierResult\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtSupplierResult.InspectionMethodColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Frequency {
                get {
                    try {
                        return ((string)(this[this.tabledtSupplierResult.FrequencyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Frequency\' in table \'dtSupplierResult\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtSupplierResult.FrequencyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LotSize {
                get {
                    try {
                        return ((string)(this[this.tabledtSupplierResult.LotSizeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LotSize\' in table \'dtSupplierResult\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtSupplierResult.LotSizeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SampleSizeStandard {
                get {
                    try {
                        return ((string)(this[this.tabledtSupplierResult.SampleSizeStandardColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SampleSizeStandard\' in table \'dtSupplierResult\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtSupplierResult.SampleSizeStandardColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SampleSizeReading {
                get {
                    try {
                        return ((string)(this[this.tabledtSupplierResult.SampleSizeReadingColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SampleSizeReading\' in table \'dtSupplierResult\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtSupplierResult.SampleSizeReadingColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AQLStandard {
                get {
                    try {
                        return ((string)(this[this.tabledtSupplierResult.AQLStandardColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AQLStandard\' in table \'dtSupplierResult\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtSupplierResult.AQLStandardColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AQLReading {
                get {
                    try {
                        return ((string)(this[this.tabledtSupplierResult.AQLReadingColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AQLReading\' in table \'dtSupplierResult\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtSupplierResult.AQLReadingColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AQLzStandard {
                get {
                    try {
                        return ((string)(this[this.tabledtSupplierResult.AQLzStandardColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AQLzStandard\' in table \'dtSupplierResult\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtSupplierResult.AQLzStandardColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AQLzReading {
                get {
                    try {
                        return ((string)(this[this.tabledtSupplierResult.AQLzReadingColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AQLzReading\' in table \'dtSupplierResult\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtSupplierResult.AQLzReadingColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AQLcStandard {
                get {
                    try {
                        return ((string)(this[this.tabledtSupplierResult.AQLcStandardColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AQLcStandard\' in table \'dtSupplierResult\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtSupplierResult.AQLcStandardColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AQLcReading {
                get {
                    try {
                        return ((string)(this[this.tabledtSupplierResult.AQLcReadingColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AQLcReading\' in table \'dtSupplierResult\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtSupplierResult.AQLcReadingColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AQLMStandard {
                get {
                    try {
                        return ((string)(this[this.tabledtSupplierResult.AQLMStandardColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AQLMStandard\' in table \'dtSupplierResult\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtSupplierResult.AQLMStandardColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AQLMReading {
                get {
                    try {
                        return ((string)(this[this.tabledtSupplierResult.AQLMReadingColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AQLMReading\' in table \'dtSupplierResult\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtSupplierResult.AQLMReadingColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AQLM1Standard {
                get {
                    try {
                        return ((string)(this[this.tabledtSupplierResult.AQLM1StandardColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AQLM1Standard\' in table \'dtSupplierResult\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtSupplierResult.AQLM1StandardColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AQLM1Reading {
                get {
                    try {
                        return ((string)(this[this.tabledtSupplierResult.AQLM1ReadingColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AQLM1Reading\' in table \'dtSupplierResult\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtSupplierResult.AQLM1ReadingColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTestMethodNull() {
                return this.IsNull(this.tabledtSupplierResult.TestMethodColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTestMethodNull() {
                this[this.tabledtSupplierResult.TestMethodColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInspectionMethodNull() {
                return this.IsNull(this.tabledtSupplierResult.InspectionMethodColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInspectionMethodNull() {
                this[this.tabledtSupplierResult.InspectionMethodColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFrequencyNull() {
                return this.IsNull(this.tabledtSupplierResult.FrequencyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFrequencyNull() {
                this[this.tabledtSupplierResult.FrequencyColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLotSizeNull() {
                return this.IsNull(this.tabledtSupplierResult.LotSizeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLotSizeNull() {
                this[this.tabledtSupplierResult.LotSizeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSampleSizeStandardNull() {
                return this.IsNull(this.tabledtSupplierResult.SampleSizeStandardColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSampleSizeStandardNull() {
                this[this.tabledtSupplierResult.SampleSizeStandardColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSampleSizeReadingNull() {
                return this.IsNull(this.tabledtSupplierResult.SampleSizeReadingColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSampleSizeReadingNull() {
                this[this.tabledtSupplierResult.SampleSizeReadingColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAQLStandardNull() {
                return this.IsNull(this.tabledtSupplierResult.AQLStandardColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAQLStandardNull() {
                this[this.tabledtSupplierResult.AQLStandardColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAQLReadingNull() {
                return this.IsNull(this.tabledtSupplierResult.AQLReadingColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAQLReadingNull() {
                this[this.tabledtSupplierResult.AQLReadingColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAQLzStandardNull() {
                return this.IsNull(this.tabledtSupplierResult.AQLzStandardColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAQLzStandardNull() {
                this[this.tabledtSupplierResult.AQLzStandardColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAQLzReadingNull() {
                return this.IsNull(this.tabledtSupplierResult.AQLzReadingColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAQLzReadingNull() {
                this[this.tabledtSupplierResult.AQLzReadingColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAQLcStandardNull() {
                return this.IsNull(this.tabledtSupplierResult.AQLcStandardColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAQLcStandardNull() {
                this[this.tabledtSupplierResult.AQLcStandardColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAQLcReadingNull() {
                return this.IsNull(this.tabledtSupplierResult.AQLcReadingColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAQLcReadingNull() {
                this[this.tabledtSupplierResult.AQLcReadingColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAQLMStandardNull() {
                return this.IsNull(this.tabledtSupplierResult.AQLMStandardColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAQLMStandardNull() {
                this[this.tabledtSupplierResult.AQLMStandardColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAQLMReadingNull() {
                return this.IsNull(this.tabledtSupplierResult.AQLMReadingColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAQLMReadingNull() {
                this[this.tabledtSupplierResult.AQLMReadingColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAQLM1StandardNull() {
                return this.IsNull(this.tabledtSupplierResult.AQLM1StandardColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAQLM1StandardNull() {
                this[this.tabledtSupplierResult.AQLM1StandardColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAQLM1ReadingNull() {
                return this.IsNull(this.tabledtSupplierResult.AQLM1ReadingColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAQLM1ReadingNull() {
                this[this.tabledtSupplierResult.AQLM1ReadingColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class dtRowChangeEvent : global::System.EventArgs {
            
            private dtRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtRowChangeEvent(dtRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class dtLoreaLResultRowChangeEvent : global::System.EventArgs {
            
            private dtLoreaLResultRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtLoreaLResultRowChangeEvent(dtLoreaLResultRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtLoreaLResultRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class dtSupplierResultRowChangeEvent : global::System.EventArgs {
            
            private dtSupplierResultRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtSupplierResultRowChangeEvent(dtSupplierResultRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtSupplierResultRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591