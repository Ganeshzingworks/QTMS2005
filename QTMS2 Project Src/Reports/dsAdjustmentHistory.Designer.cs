//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.8009
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace QTMS.Reports {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("dsAdjustmentHistory")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class dsAdjustmentHistory : global::System.Data.DataSet {
        
        private STP_Select_tblAdjustment_AdjID_ReportDataTable tableSTP_Select_tblAdjustment_AdjID_Report;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public dsAdjustmentHistory() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected dsAdjustmentHistory(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["STP_Select_tblAdjustment_AdjID_Report"] != null)) {
                    base.Tables.Add(new STP_Select_tblAdjustment_AdjID_ReportDataTable(ds.Tables["STP_Select_tblAdjustment_AdjID_Report"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public STP_Select_tblAdjustment_AdjID_ReportDataTable STP_Select_tblAdjustment_AdjID_Report {
            get {
                return this.tableSTP_Select_tblAdjustment_AdjID_Report;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            dsAdjustmentHistory cln = ((dsAdjustmentHistory)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["STP_Select_tblAdjustment_AdjID_Report"] != null)) {
                    base.Tables.Add(new STP_Select_tblAdjustment_AdjID_ReportDataTable(ds.Tables["STP_Select_tblAdjustment_AdjID_Report"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableSTP_Select_tblAdjustment_AdjID_Report = ((STP_Select_tblAdjustment_AdjID_ReportDataTable)(base.Tables["STP_Select_tblAdjustment_AdjID_Report"]));
            if ((initTable == true)) {
                if ((this.tableSTP_Select_tblAdjustment_AdjID_Report != null)) {
                    this.tableSTP_Select_tblAdjustment_AdjID_Report.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "dsAdjustmentHistory";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/dsAdjustmentHistory.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableSTP_Select_tblAdjustment_AdjID_Report = new STP_Select_tblAdjustment_AdjID_ReportDataTable();
            base.Tables.Add(this.tableSTP_Select_tblAdjustment_AdjID_Report);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeSTP_Select_tblAdjustment_AdjID_Report() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            dsAdjustmentHistory ds = new dsAdjustmentHistory();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void STP_Select_tblAdjustment_AdjID_ReportRowChangeEventHandler(object sender, STP_Select_tblAdjustment_AdjID_ReportRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class STP_Select_tblAdjustment_AdjID_ReportDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnAdjID;
            
            private global::System.Data.DataColumn columnRMSamplingID;
            
            private global::System.Data.DataColumn columnPHFlag;
            
            private global::System.Data.DataColumn columnPHRMCodeID;
            
            private global::System.Data.DataColumn columnVSFlag;
            
            private global::System.Data.DataColumn columnMfgWO;
            
            private global::System.Data.DataColumn columnBatchSize;
            
            private global::System.Data.DataColumn columnInitialPHValue;
            
            private global::System.Data.DataColumn columnInitialVSValue;
            
            private global::System.Data.DataColumn columnTotalPHPercent;
            
            private global::System.Data.DataColumn columnTotalPHQty;
            
            private global::System.Data.DataColumn columnTotalVSPercent;
            
            private global::System.Data.DataColumn columnTotalVSQty;
            
            private global::System.Data.DataColumn columnAdjDate;
            
            private global::System.Data.DataColumn columnFNo;
            
            private global::System.Data.DataColumn columnFormulaNo;
            
            private global::System.Data.DataColumn columnRMCodeID;
            
            private global::System.Data.DataColumn columnPHRMCode;
            
            private global::System.Data.DataColumn columnVSRMCodeID;
            
            private global::System.Data.DataColumn columnViscosityRMCode;
            
            private global::System.Data.DataColumn columnMainRMCode;
            
            private global::System.Data.DataColumn columnFinalPHValue;
            
            private global::System.Data.DataColumn columnFinalVSValue;
            
            private global::System.Data.DataColumn columnPlantLotNo;
            
            private global::System.Data.DataColumn columnRMSupplierName;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public STP_Select_tblAdjustment_AdjID_ReportDataTable() {
                this.TableName = "STP_Select_tblAdjustment_AdjID_Report";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal STP_Select_tblAdjustment_AdjID_ReportDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected STP_Select_tblAdjustment_AdjID_ReportDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AdjIDColumn {
                get {
                    return this.columnAdjID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RMSamplingIDColumn {
                get {
                    return this.columnRMSamplingID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PHFlagColumn {
                get {
                    return this.columnPHFlag;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PHRMCodeIDColumn {
                get {
                    return this.columnPHRMCodeID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn VSFlagColumn {
                get {
                    return this.columnVSFlag;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MfgWOColumn {
                get {
                    return this.columnMfgWO;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BatchSizeColumn {
                get {
                    return this.columnBatchSize;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InitialPHValueColumn {
                get {
                    return this.columnInitialPHValue;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InitialVSValueColumn {
                get {
                    return this.columnInitialVSValue;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalPHPercentColumn {
                get {
                    return this.columnTotalPHPercent;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalPHQtyColumn {
                get {
                    return this.columnTotalPHQty;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalVSPercentColumn {
                get {
                    return this.columnTotalVSPercent;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalVSQtyColumn {
                get {
                    return this.columnTotalVSQty;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AdjDateColumn {
                get {
                    return this.columnAdjDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FNoColumn {
                get {
                    return this.columnFNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FormulaNoColumn {
                get {
                    return this.columnFormulaNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RMCodeIDColumn {
                get {
                    return this.columnRMCodeID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PHRMCodeColumn {
                get {
                    return this.columnPHRMCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn VSRMCodeIDColumn {
                get {
                    return this.columnVSRMCodeID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ViscosityRMCodeColumn {
                get {
                    return this.columnViscosityRMCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MainRMCodeColumn {
                get {
                    return this.columnMainRMCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FinalPHValueColumn {
                get {
                    return this.columnFinalPHValue;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FinalVSValueColumn {
                get {
                    return this.columnFinalVSValue;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PlantLotNoColumn {
                get {
                    return this.columnPlantLotNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RMSupplierNameColumn {
                get {
                    return this.columnRMSupplierName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public STP_Select_tblAdjustment_AdjID_ReportRow this[int index] {
                get {
                    return ((STP_Select_tblAdjustment_AdjID_ReportRow)(this.Rows[index]));
                }
            }
            
            public event STP_Select_tblAdjustment_AdjID_ReportRowChangeEventHandler STP_Select_tblAdjustment_AdjID_ReportRowChanging;
            
            public event STP_Select_tblAdjustment_AdjID_ReportRowChangeEventHandler STP_Select_tblAdjustment_AdjID_ReportRowChanged;
            
            public event STP_Select_tblAdjustment_AdjID_ReportRowChangeEventHandler STP_Select_tblAdjustment_AdjID_ReportRowDeleting;
            
            public event STP_Select_tblAdjustment_AdjID_ReportRowChangeEventHandler STP_Select_tblAdjustment_AdjID_ReportRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddSTP_Select_tblAdjustment_AdjID_ReportRow(STP_Select_tblAdjustment_AdjID_ReportRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public STP_Select_tblAdjustment_AdjID_ReportRow AddSTP_Select_tblAdjustment_AdjID_ReportRow(
                        long RMSamplingID, 
                        byte PHFlag, 
                        long PHRMCodeID, 
                        byte VSFlag, 
                        string MfgWO, 
                        int BatchSize, 
                        double InitialPHValue, 
                        double InitialVSValue, 
                        double TotalPHPercent, 
                        double TotalPHQty, 
                        double TotalVSPercent, 
                        double TotalVSQty, 
                        System.DateTime AdjDate, 
                        string FormulaNo, 
                        string PHRMCode, 
                        string ViscosityRMCode, 
                        string MainRMCode, 
                        double FinalPHValue, 
                        double FinalVSValue, 
                        string PlantLotNo, 
                        string RMSupplierName) {
                STP_Select_tblAdjustment_AdjID_ReportRow rowSTP_Select_tblAdjustment_AdjID_ReportRow = ((STP_Select_tblAdjustment_AdjID_ReportRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        RMSamplingID,
                        PHFlag,
                        PHRMCodeID,
                        VSFlag,
                        MfgWO,
                        BatchSize,
                        InitialPHValue,
                        InitialVSValue,
                        TotalPHPercent,
                        TotalPHQty,
                        TotalVSPercent,
                        TotalVSQty,
                        AdjDate,
                        null,
                        FormulaNo,
                        null,
                        PHRMCode,
                        null,
                        ViscosityRMCode,
                        MainRMCode,
                        FinalPHValue,
                        FinalVSValue,
                        PlantLotNo,
                        RMSupplierName};
                rowSTP_Select_tblAdjustment_AdjID_ReportRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowSTP_Select_tblAdjustment_AdjID_ReportRow);
                return rowSTP_Select_tblAdjustment_AdjID_ReportRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                STP_Select_tblAdjustment_AdjID_ReportDataTable cln = ((STP_Select_tblAdjustment_AdjID_ReportDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new STP_Select_tblAdjustment_AdjID_ReportDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnAdjID = base.Columns["AdjID"];
                this.columnRMSamplingID = base.Columns["RMSamplingID"];
                this.columnPHFlag = base.Columns["PHFlag"];
                this.columnPHRMCodeID = base.Columns["PHRMCodeID"];
                this.columnVSFlag = base.Columns["VSFlag"];
                this.columnMfgWO = base.Columns["MfgWO"];
                this.columnBatchSize = base.Columns["BatchSize"];
                this.columnInitialPHValue = base.Columns["InitialPHValue"];
                this.columnInitialVSValue = base.Columns["InitialVSValue"];
                this.columnTotalPHPercent = base.Columns["TotalPHPercent"];
                this.columnTotalPHQty = base.Columns["TotalPHQty"];
                this.columnTotalVSPercent = base.Columns["TotalVSPercent"];
                this.columnTotalVSQty = base.Columns["TotalVSQty"];
                this.columnAdjDate = base.Columns["AdjDate"];
                this.columnFNo = base.Columns["FNo"];
                this.columnFormulaNo = base.Columns["FormulaNo"];
                this.columnRMCodeID = base.Columns["RMCodeID"];
                this.columnPHRMCode = base.Columns["PHRMCode"];
                this.columnVSRMCodeID = base.Columns["VSRMCodeID"];
                this.columnViscosityRMCode = base.Columns["ViscosityRMCode"];
                this.columnMainRMCode = base.Columns["MainRMCode"];
                this.columnFinalPHValue = base.Columns["FinalPHValue"];
                this.columnFinalVSValue = base.Columns["FinalVSValue"];
                this.columnPlantLotNo = base.Columns["PlantLotNo"];
                this.columnRMSupplierName = base.Columns["RMSupplierName"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnAdjID = new global::System.Data.DataColumn("AdjID", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAdjID);
                this.columnRMSamplingID = new global::System.Data.DataColumn("RMSamplingID", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRMSamplingID);
                this.columnPHFlag = new global::System.Data.DataColumn("PHFlag", typeof(byte), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPHFlag);
                this.columnPHRMCodeID = new global::System.Data.DataColumn("PHRMCodeID", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPHRMCodeID);
                this.columnVSFlag = new global::System.Data.DataColumn("VSFlag", typeof(byte), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnVSFlag);
                this.columnMfgWO = new global::System.Data.DataColumn("MfgWO", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMfgWO);
                this.columnBatchSize = new global::System.Data.DataColumn("BatchSize", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBatchSize);
                this.columnInitialPHValue = new global::System.Data.DataColumn("InitialPHValue", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInitialPHValue);
                this.columnInitialVSValue = new global::System.Data.DataColumn("InitialVSValue", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInitialVSValue);
                this.columnTotalPHPercent = new global::System.Data.DataColumn("TotalPHPercent", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalPHPercent);
                this.columnTotalPHQty = new global::System.Data.DataColumn("TotalPHQty", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalPHQty);
                this.columnTotalVSPercent = new global::System.Data.DataColumn("TotalVSPercent", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalVSPercent);
                this.columnTotalVSQty = new global::System.Data.DataColumn("TotalVSQty", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalVSQty);
                this.columnAdjDate = new global::System.Data.DataColumn("AdjDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAdjDate);
                this.columnFNo = new global::System.Data.DataColumn("FNo", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFNo);
                this.columnFormulaNo = new global::System.Data.DataColumn("FormulaNo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFormulaNo);
                this.columnRMCodeID = new global::System.Data.DataColumn("RMCodeID", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRMCodeID);
                this.columnPHRMCode = new global::System.Data.DataColumn("PHRMCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPHRMCode);
                this.columnVSRMCodeID = new global::System.Data.DataColumn("VSRMCodeID", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnVSRMCodeID);
                this.columnViscosityRMCode = new global::System.Data.DataColumn("ViscosityRMCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnViscosityRMCode);
                this.columnMainRMCode = new global::System.Data.DataColumn("MainRMCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMainRMCode);
                this.columnFinalPHValue = new global::System.Data.DataColumn("FinalPHValue", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFinalPHValue);
                this.columnFinalVSValue = new global::System.Data.DataColumn("FinalVSValue", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFinalVSValue);
                this.columnPlantLotNo = new global::System.Data.DataColumn("PlantLotNo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPlantLotNo);
                this.columnRMSupplierName = new global::System.Data.DataColumn("RMSupplierName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRMSupplierName);
                this.columnAdjID.AutoIncrement = true;
                this.columnAdjID.AllowDBNull = false;
                this.columnAdjID.ReadOnly = true;
                this.columnMfgWO.MaxLength = 200;
                this.columnFNo.AutoIncrement = true;
                this.columnFNo.AllowDBNull = false;
                this.columnFNo.ReadOnly = true;
                this.columnFormulaNo.AllowDBNull = false;
                this.columnFormulaNo.MaxLength = 200;
                this.columnRMCodeID.AutoIncrement = true;
                this.columnRMCodeID.ReadOnly = true;
                this.columnPHRMCode.MaxLength = 50;
                this.columnVSRMCodeID.AutoIncrement = true;
                this.columnVSRMCodeID.ReadOnly = true;
                this.columnViscosityRMCode.MaxLength = 50;
                this.columnMainRMCode.AllowDBNull = false;
                this.columnMainRMCode.MaxLength = 50;
                this.columnPlantLotNo.MaxLength = 50;
                this.columnRMSupplierName.MaxLength = 200;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public STP_Select_tblAdjustment_AdjID_ReportRow NewSTP_Select_tblAdjustment_AdjID_ReportRow() {
                return ((STP_Select_tblAdjustment_AdjID_ReportRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new STP_Select_tblAdjustment_AdjID_ReportRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(STP_Select_tblAdjustment_AdjID_ReportRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.STP_Select_tblAdjustment_AdjID_ReportRowChanged != null)) {
                    this.STP_Select_tblAdjustment_AdjID_ReportRowChanged(this, new STP_Select_tblAdjustment_AdjID_ReportRowChangeEvent(((STP_Select_tblAdjustment_AdjID_ReportRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.STP_Select_tblAdjustment_AdjID_ReportRowChanging != null)) {
                    this.STP_Select_tblAdjustment_AdjID_ReportRowChanging(this, new STP_Select_tblAdjustment_AdjID_ReportRowChangeEvent(((STP_Select_tblAdjustment_AdjID_ReportRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.STP_Select_tblAdjustment_AdjID_ReportRowDeleted != null)) {
                    this.STP_Select_tblAdjustment_AdjID_ReportRowDeleted(this, new STP_Select_tblAdjustment_AdjID_ReportRowChangeEvent(((STP_Select_tblAdjustment_AdjID_ReportRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.STP_Select_tblAdjustment_AdjID_ReportRowDeleting != null)) {
                    this.STP_Select_tblAdjustment_AdjID_ReportRowDeleting(this, new STP_Select_tblAdjustment_AdjID_ReportRowChangeEvent(((STP_Select_tblAdjustment_AdjID_ReportRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveSTP_Select_tblAdjustment_AdjID_ReportRow(STP_Select_tblAdjustment_AdjID_ReportRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                dsAdjustmentHistory ds = new dsAdjustmentHistory();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "STP_Select_tblAdjustment_AdjID_ReportDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class STP_Select_tblAdjustment_AdjID_ReportRow : global::System.Data.DataRow {
            
            private STP_Select_tblAdjustment_AdjID_ReportDataTable tableSTP_Select_tblAdjustment_AdjID_Report;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal STP_Select_tblAdjustment_AdjID_ReportRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableSTP_Select_tblAdjustment_AdjID_Report = ((STP_Select_tblAdjustment_AdjID_ReportDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long AdjID {
                get {
                    return ((long)(this[this.tableSTP_Select_tblAdjustment_AdjID_Report.AdjIDColumn]));
                }
                set {
                    this[this.tableSTP_Select_tblAdjustment_AdjID_Report.AdjIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long RMSamplingID {
                get {
                    try {
                        return ((long)(this[this.tableSTP_Select_tblAdjustment_AdjID_Report.RMSamplingIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RMSamplingID\' in table \'STP_Select_tblAdjustment_AdjID_Repo" +
                                "rt\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSTP_Select_tblAdjustment_AdjID_Report.RMSamplingIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte PHFlag {
                get {
                    try {
                        return ((byte)(this[this.tableSTP_Select_tblAdjustment_AdjID_Report.PHFlagColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PHFlag\' in table \'STP_Select_tblAdjustment_AdjID_Report\' is" +
                                " DBNull.", e);
                    }
                }
                set {
                    this[this.tableSTP_Select_tblAdjustment_AdjID_Report.PHFlagColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long PHRMCodeID {
                get {
                    try {
                        return ((long)(this[this.tableSTP_Select_tblAdjustment_AdjID_Report.PHRMCodeIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PHRMCodeID\' in table \'STP_Select_tblAdjustment_AdjID_Report" +
                                "\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSTP_Select_tblAdjustment_AdjID_Report.PHRMCodeIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte VSFlag {
                get {
                    try {
                        return ((byte)(this[this.tableSTP_Select_tblAdjustment_AdjID_Report.VSFlagColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'VSFlag\' in table \'STP_Select_tblAdjustment_AdjID_Report\' is" +
                                " DBNull.", e);
                    }
                }
                set {
                    this[this.tableSTP_Select_tblAdjustment_AdjID_Report.VSFlagColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MfgWO {
                get {
                    try {
                        return ((string)(this[this.tableSTP_Select_tblAdjustment_AdjID_Report.MfgWOColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MfgWO\' in table \'STP_Select_tblAdjustment_AdjID_Report\' is " +
                                "DBNull.", e);
                    }
                }
                set {
                    this[this.tableSTP_Select_tblAdjustment_AdjID_Report.MfgWOColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int BatchSize {
                get {
                    try {
                        return ((int)(this[this.tableSTP_Select_tblAdjustment_AdjID_Report.BatchSizeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BatchSize\' in table \'STP_Select_tblAdjustment_AdjID_Report\'" +
                                " is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSTP_Select_tblAdjustment_AdjID_Report.BatchSizeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double InitialPHValue {
                get {
                    try {
                        return ((double)(this[this.tableSTP_Select_tblAdjustment_AdjID_Report.InitialPHValueColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InitialPHValue\' in table \'STP_Select_tblAdjustment_AdjID_Re" +
                                "port\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSTP_Select_tblAdjustment_AdjID_Report.InitialPHValueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double InitialVSValue {
                get {
                    try {
                        return ((double)(this[this.tableSTP_Select_tblAdjustment_AdjID_Report.InitialVSValueColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InitialVSValue\' in table \'STP_Select_tblAdjustment_AdjID_Re" +
                                "port\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSTP_Select_tblAdjustment_AdjID_Report.InitialVSValueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double TotalPHPercent {
                get {
                    try {
                        return ((double)(this[this.tableSTP_Select_tblAdjustment_AdjID_Report.TotalPHPercentColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TotalPHPercent\' in table \'STP_Select_tblAdjustment_AdjID_Re" +
                                "port\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSTP_Select_tblAdjustment_AdjID_Report.TotalPHPercentColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double TotalPHQty {
                get {
                    try {
                        return ((double)(this[this.tableSTP_Select_tblAdjustment_AdjID_Report.TotalPHQtyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TotalPHQty\' in table \'STP_Select_tblAdjustment_AdjID_Report" +
                                "\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSTP_Select_tblAdjustment_AdjID_Report.TotalPHQtyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double TotalVSPercent {
                get {
                    try {
                        return ((double)(this[this.tableSTP_Select_tblAdjustment_AdjID_Report.TotalVSPercentColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TotalVSPercent\' in table \'STP_Select_tblAdjustment_AdjID_Re" +
                                "port\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSTP_Select_tblAdjustment_AdjID_Report.TotalVSPercentColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double TotalVSQty {
                get {
                    try {
                        return ((double)(this[this.tableSTP_Select_tblAdjustment_AdjID_Report.TotalVSQtyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TotalVSQty\' in table \'STP_Select_tblAdjustment_AdjID_Report" +
                                "\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSTP_Select_tblAdjustment_AdjID_Report.TotalVSQtyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime AdjDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableSTP_Select_tblAdjustment_AdjID_Report.AdjDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AdjDate\' in table \'STP_Select_tblAdjustment_AdjID_Report\' i" +
                                "s DBNull.", e);
                    }
                }
                set {
                    this[this.tableSTP_Select_tblAdjustment_AdjID_Report.AdjDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long FNo {
                get {
                    return ((long)(this[this.tableSTP_Select_tblAdjustment_AdjID_Report.FNoColumn]));
                }
                set {
                    this[this.tableSTP_Select_tblAdjustment_AdjID_Report.FNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FormulaNo {
                get {
                    return ((string)(this[this.tableSTP_Select_tblAdjustment_AdjID_Report.FormulaNoColumn]));
                }
                set {
                    this[this.tableSTP_Select_tblAdjustment_AdjID_Report.FormulaNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long RMCodeID {
                get {
                    try {
                        return ((long)(this[this.tableSTP_Select_tblAdjustment_AdjID_Report.RMCodeIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RMCodeID\' in table \'STP_Select_tblAdjustment_AdjID_Report\' " +
                                "is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSTP_Select_tblAdjustment_AdjID_Report.RMCodeIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PHRMCode {
                get {
                    try {
                        return ((string)(this[this.tableSTP_Select_tblAdjustment_AdjID_Report.PHRMCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PHRMCode\' in table \'STP_Select_tblAdjustment_AdjID_Report\' " +
                                "is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSTP_Select_tblAdjustment_AdjID_Report.PHRMCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long VSRMCodeID {
                get {
                    try {
                        return ((long)(this[this.tableSTP_Select_tblAdjustment_AdjID_Report.VSRMCodeIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'VSRMCodeID\' in table \'STP_Select_tblAdjustment_AdjID_Report" +
                                "\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSTP_Select_tblAdjustment_AdjID_Report.VSRMCodeIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ViscosityRMCode {
                get {
                    try {
                        return ((string)(this[this.tableSTP_Select_tblAdjustment_AdjID_Report.ViscosityRMCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ViscosityRMCode\' in table \'STP_Select_tblAdjustment_AdjID_R" +
                                "eport\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSTP_Select_tblAdjustment_AdjID_Report.ViscosityRMCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MainRMCode {
                get {
                    return ((string)(this[this.tableSTP_Select_tblAdjustment_AdjID_Report.MainRMCodeColumn]));
                }
                set {
                    this[this.tableSTP_Select_tblAdjustment_AdjID_Report.MainRMCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double FinalPHValue {
                get {
                    try {
                        return ((double)(this[this.tableSTP_Select_tblAdjustment_AdjID_Report.FinalPHValueColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FinalPHValue\' in table \'STP_Select_tblAdjustment_AdjID_Repo" +
                                "rt\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSTP_Select_tblAdjustment_AdjID_Report.FinalPHValueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double FinalVSValue {
                get {
                    try {
                        return ((double)(this[this.tableSTP_Select_tblAdjustment_AdjID_Report.FinalVSValueColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FinalVSValue\' in table \'STP_Select_tblAdjustment_AdjID_Repo" +
                                "rt\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSTP_Select_tblAdjustment_AdjID_Report.FinalVSValueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PlantLotNo {
                get {
                    try {
                        return ((string)(this[this.tableSTP_Select_tblAdjustment_AdjID_Report.PlantLotNoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PlantLotNo\' in table \'STP_Select_tblAdjustment_AdjID_Report" +
                                "\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSTP_Select_tblAdjustment_AdjID_Report.PlantLotNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string RMSupplierName {
                get {
                    try {
                        return ((string)(this[this.tableSTP_Select_tblAdjustment_AdjID_Report.RMSupplierNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RMSupplierName\' in table \'STP_Select_tblAdjustment_AdjID_Re" +
                                "port\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSTP_Select_tblAdjustment_AdjID_Report.RMSupplierNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRMSamplingIDNull() {
                return this.IsNull(this.tableSTP_Select_tblAdjustment_AdjID_Report.RMSamplingIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRMSamplingIDNull() {
                this[this.tableSTP_Select_tblAdjustment_AdjID_Report.RMSamplingIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPHFlagNull() {
                return this.IsNull(this.tableSTP_Select_tblAdjustment_AdjID_Report.PHFlagColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPHFlagNull() {
                this[this.tableSTP_Select_tblAdjustment_AdjID_Report.PHFlagColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPHRMCodeIDNull() {
                return this.IsNull(this.tableSTP_Select_tblAdjustment_AdjID_Report.PHRMCodeIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPHRMCodeIDNull() {
                this[this.tableSTP_Select_tblAdjustment_AdjID_Report.PHRMCodeIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsVSFlagNull() {
                return this.IsNull(this.tableSTP_Select_tblAdjustment_AdjID_Report.VSFlagColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetVSFlagNull() {
                this[this.tableSTP_Select_tblAdjustment_AdjID_Report.VSFlagColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMfgWONull() {
                return this.IsNull(this.tableSTP_Select_tblAdjustment_AdjID_Report.MfgWOColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMfgWONull() {
                this[this.tableSTP_Select_tblAdjustment_AdjID_Report.MfgWOColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBatchSizeNull() {
                return this.IsNull(this.tableSTP_Select_tblAdjustment_AdjID_Report.BatchSizeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBatchSizeNull() {
                this[this.tableSTP_Select_tblAdjustment_AdjID_Report.BatchSizeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInitialPHValueNull() {
                return this.IsNull(this.tableSTP_Select_tblAdjustment_AdjID_Report.InitialPHValueColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInitialPHValueNull() {
                this[this.tableSTP_Select_tblAdjustment_AdjID_Report.InitialPHValueColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInitialVSValueNull() {
                return this.IsNull(this.tableSTP_Select_tblAdjustment_AdjID_Report.InitialVSValueColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInitialVSValueNull() {
                this[this.tableSTP_Select_tblAdjustment_AdjID_Report.InitialVSValueColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTotalPHPercentNull() {
                return this.IsNull(this.tableSTP_Select_tblAdjustment_AdjID_Report.TotalPHPercentColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTotalPHPercentNull() {
                this[this.tableSTP_Select_tblAdjustment_AdjID_Report.TotalPHPercentColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTotalPHQtyNull() {
                return this.IsNull(this.tableSTP_Select_tblAdjustment_AdjID_Report.TotalPHQtyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTotalPHQtyNull() {
                this[this.tableSTP_Select_tblAdjustment_AdjID_Report.TotalPHQtyColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTotalVSPercentNull() {
                return this.IsNull(this.tableSTP_Select_tblAdjustment_AdjID_Report.TotalVSPercentColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTotalVSPercentNull() {
                this[this.tableSTP_Select_tblAdjustment_AdjID_Report.TotalVSPercentColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTotalVSQtyNull() {
                return this.IsNull(this.tableSTP_Select_tblAdjustment_AdjID_Report.TotalVSQtyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTotalVSQtyNull() {
                this[this.tableSTP_Select_tblAdjustment_AdjID_Report.TotalVSQtyColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAdjDateNull() {
                return this.IsNull(this.tableSTP_Select_tblAdjustment_AdjID_Report.AdjDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAdjDateNull() {
                this[this.tableSTP_Select_tblAdjustment_AdjID_Report.AdjDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRMCodeIDNull() {
                return this.IsNull(this.tableSTP_Select_tblAdjustment_AdjID_Report.RMCodeIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRMCodeIDNull() {
                this[this.tableSTP_Select_tblAdjustment_AdjID_Report.RMCodeIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPHRMCodeNull() {
                return this.IsNull(this.tableSTP_Select_tblAdjustment_AdjID_Report.PHRMCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPHRMCodeNull() {
                this[this.tableSTP_Select_tblAdjustment_AdjID_Report.PHRMCodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsVSRMCodeIDNull() {
                return this.IsNull(this.tableSTP_Select_tblAdjustment_AdjID_Report.VSRMCodeIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetVSRMCodeIDNull() {
                this[this.tableSTP_Select_tblAdjustment_AdjID_Report.VSRMCodeIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsViscosityRMCodeNull() {
                return this.IsNull(this.tableSTP_Select_tblAdjustment_AdjID_Report.ViscosityRMCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetViscosityRMCodeNull() {
                this[this.tableSTP_Select_tblAdjustment_AdjID_Report.ViscosityRMCodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFinalPHValueNull() {
                return this.IsNull(this.tableSTP_Select_tblAdjustment_AdjID_Report.FinalPHValueColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFinalPHValueNull() {
                this[this.tableSTP_Select_tblAdjustment_AdjID_Report.FinalPHValueColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFinalVSValueNull() {
                return this.IsNull(this.tableSTP_Select_tblAdjustment_AdjID_Report.FinalVSValueColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFinalVSValueNull() {
                this[this.tableSTP_Select_tblAdjustment_AdjID_Report.FinalVSValueColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPlantLotNoNull() {
                return this.IsNull(this.tableSTP_Select_tblAdjustment_AdjID_Report.PlantLotNoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPlantLotNoNull() {
                this[this.tableSTP_Select_tblAdjustment_AdjID_Report.PlantLotNoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRMSupplierNameNull() {
                return this.IsNull(this.tableSTP_Select_tblAdjustment_AdjID_Report.RMSupplierNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRMSupplierNameNull() {
                this[this.tableSTP_Select_tblAdjustment_AdjID_Report.RMSupplierNameColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class STP_Select_tblAdjustment_AdjID_ReportRowChangeEvent : global::System.EventArgs {
            
            private STP_Select_tblAdjustment_AdjID_ReportRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public STP_Select_tblAdjustment_AdjID_ReportRowChangeEvent(STP_Select_tblAdjustment_AdjID_ReportRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public STP_Select_tblAdjustment_AdjID_ReportRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
namespace QTMS.Reports.dsAdjustmentHistoryTableAdapters {
    
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class STP_Select_tblAdjustment_AdjID_ReportTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public STP_Select_tblAdjustment_AdjID_ReportTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "STP_Select_tblAdjustment_AdjID_Report";
            tableMapping.ColumnMappings.Add("AdjID", "AdjID");
            tableMapping.ColumnMappings.Add("RMSamplingID", "RMSamplingID");
            tableMapping.ColumnMappings.Add("PHFlag", "PHFlag");
            tableMapping.ColumnMappings.Add("PHRMCodeID", "PHRMCodeID");
            tableMapping.ColumnMappings.Add("VSFlag", "VSFlag");
            tableMapping.ColumnMappings.Add("MfgWO", "MfgWO");
            tableMapping.ColumnMappings.Add("BatchSize", "BatchSize");
            tableMapping.ColumnMappings.Add("InitialPHValue", "InitialPHValue");
            tableMapping.ColumnMappings.Add("InitialVSValue", "InitialVSValue");
            tableMapping.ColumnMappings.Add("TotalPHPercent", "TotalPHPercent");
            tableMapping.ColumnMappings.Add("TotalPHQty", "TotalPHQty");
            tableMapping.ColumnMappings.Add("TotalVSPercent", "TotalVSPercent");
            tableMapping.ColumnMappings.Add("TotalVSQty", "TotalVSQty");
            tableMapping.ColumnMappings.Add("AdjDate", "AdjDate");
            tableMapping.ColumnMappings.Add("FNo", "FNo");
            tableMapping.ColumnMappings.Add("FormulaNo", "FormulaNo");
            tableMapping.ColumnMappings.Add("RMCodeID", "RMCodeID");
            tableMapping.ColumnMappings.Add("PHRMCode", "PHRMCode");
            tableMapping.ColumnMappings.Add("VSRMCodeID", "VSRMCodeID");
            tableMapping.ColumnMappings.Add("ViscosityRMCode", "ViscosityRMCode");
            tableMapping.ColumnMappings.Add("MainRMCode", "MainRMCode");
            tableMapping.ColumnMappings.Add("FinalPHValue", "FinalPHValue");
            tableMapping.ColumnMappings.Add("FinalVSValue", "FinalVSValue");
            tableMapping.ColumnMappings.Add("PlantLotNo", "PlantLotNo");
            tableMapping.ColumnMappings.Add("RMSupplierName", "RMSupplierName");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::QTMS.Properties.Settings.Default.QTMS2ConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "dbo.STP_Select_tblAdjustment_AdjID_Report";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.StoredProcedure;
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RETURN_VALUE", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.ReturnValue, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FNo", global::System.Data.SqlDbType.BigInt, 8, global::System.Data.ParameterDirection.Input, 19, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@BatchSize", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(dsAdjustmentHistory.STP_Select_tblAdjustment_AdjID_ReportDataTable dataTable, global::System.Nullable<long> FNo, global::System.Nullable<int> BatchSize) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((FNo.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[1].Value = ((long)(FNo.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((BatchSize.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[2].Value = ((int)(BatchSize.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual dsAdjustmentHistory.STP_Select_tblAdjustment_AdjID_ReportDataTable GetData(global::System.Nullable<long> FNo, global::System.Nullable<int> BatchSize) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((FNo.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[1].Value = ((long)(FNo.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((BatchSize.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[2].Value = ((int)(BatchSize.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            dsAdjustmentHistory.STP_Select_tblAdjustment_AdjID_ReportDataTable dataTable = new dsAdjustmentHistory.STP_Select_tblAdjustment_AdjID_ReportDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
}

#pragma warning restore 1591