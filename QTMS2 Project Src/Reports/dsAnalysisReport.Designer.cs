//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.8009
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace QTMS.Reports {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("dsAnalysisReport")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class dsAnalysisReport : global::System.Data.DataSet {
        
        private STP_Select_Bulk_Analysis_ReportDataTable tableSTP_Select_Bulk_Analysis_Report;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public dsAnalysisReport() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected dsAnalysisReport(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["STP_Select_Bulk_Analysis_Report"] != null)) {
                    base.Tables.Add(new STP_Select_Bulk_Analysis_ReportDataTable(ds.Tables["STP_Select_Bulk_Analysis_Report"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public STP_Select_Bulk_Analysis_ReportDataTable STP_Select_Bulk_Analysis_Report {
            get {
                return this.tableSTP_Select_Bulk_Analysis_Report;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            dsAnalysisReport cln = ((dsAnalysisReport)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["STP_Select_Bulk_Analysis_Report"] != null)) {
                    base.Tables.Add(new STP_Select_Bulk_Analysis_ReportDataTable(ds.Tables["STP_Select_Bulk_Analysis_Report"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableSTP_Select_Bulk_Analysis_Report = ((STP_Select_Bulk_Analysis_ReportDataTable)(base.Tables["STP_Select_Bulk_Analysis_Report"]));
            if ((initTable == true)) {
                if ((this.tableSTP_Select_Bulk_Analysis_Report != null)) {
                    this.tableSTP_Select_Bulk_Analysis_Report.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "dsAnalysisReport";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/dsAnalysisReport.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableSTP_Select_Bulk_Analysis_Report = new STP_Select_Bulk_Analysis_ReportDataTable();
            base.Tables.Add(this.tableSTP_Select_Bulk_Analysis_Report);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeSTP_Select_Bulk_Analysis_Report() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            dsAnalysisReport ds = new dsAnalysisReport();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void STP_Select_Bulk_Analysis_ReportRowChangeEventHandler(object sender, STP_Select_Bulk_Analysis_ReportRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class STP_Select_Bulk_Analysis_ReportDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnInspDate;
            
            private global::System.Data.DataColumn columnFMID;
            
            private global::System.Data.DataColumn columnFormulaNo;
            
            private global::System.Data.DataColumn columnBulkDesc;
            
            private global::System.Data.DataColumn columnMfgWo;
            
            private global::System.Data.DataColumn columnFormulaType;
            
            private global::System.Data.DataColumn columnSupplier;
            
            private global::System.Data.DataColumn columnBatchSize;
            
            private global::System.Data.DataColumn columnFamilyDesc;
            
            private global::System.Data.DataColumn columnVslDesc;
            
            private global::System.Data.DataColumn columnOfficializationNo;
            
            private global::System.Data.DataColumn columnReferenceDate;
            
            private global::System.Data.DataColumn columnFlagRL;
            
            private global::System.Data.DataColumn columnFormulationApproved;
            
            private global::System.Data.DataColumn columnBPCNONBPC;
            
            private global::System.Data.DataColumn columnNonBPCcmts;
            
            private global::System.Data.DataColumn columnStatus;
            
            private global::System.Data.DataColumn columnComments;
            
            private global::System.Data.DataColumn columnTestNo;
            
            private global::System.Data.DataColumn columnTestName;
            
            private global::System.Data.DataColumn columnTestDesc;
            
            private global::System.Data.DataColumn columnTestType;
            
            private global::System.Data.DataColumn columnBulkMethodNo;
            
            private global::System.Data.DataColumn columnNormsReading;
            
            private global::System.Data.DataColumn columnBulkInspectedBy;
            
            private global::System.Data.DataColumn columnCompletedOn;
            
            private global::System.Data.DataColumn columnNormsMin;
            
            private global::System.Data.DataColumn columnNormsMax;
            
            private global::System.Data.DataColumn columnFNo;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public STP_Select_Bulk_Analysis_ReportDataTable() {
                this.TableName = "STP_Select_Bulk_Analysis_Report";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal STP_Select_Bulk_Analysis_ReportDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected STP_Select_Bulk_Analysis_ReportDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InspDateColumn {
                get {
                    return this.columnInspDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FMIDColumn {
                get {
                    return this.columnFMID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FormulaNoColumn {
                get {
                    return this.columnFormulaNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BulkDescColumn {
                get {
                    return this.columnBulkDesc;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MfgWoColumn {
                get {
                    return this.columnMfgWo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FormulaTypeColumn {
                get {
                    return this.columnFormulaType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SupplierColumn {
                get {
                    return this.columnSupplier;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BatchSizeColumn {
                get {
                    return this.columnBatchSize;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FamilyDescColumn {
                get {
                    return this.columnFamilyDesc;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn VslDescColumn {
                get {
                    return this.columnVslDesc;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OfficializationNoColumn {
                get {
                    return this.columnOfficializationNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ReferenceDateColumn {
                get {
                    return this.columnReferenceDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FlagRLColumn {
                get {
                    return this.columnFlagRL;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FormulationApprovedColumn {
                get {
                    return this.columnFormulationApproved;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BPCNONBPCColumn {
                get {
                    return this.columnBPCNONBPC;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NonBPCcmtsColumn {
                get {
                    return this.columnNonBPCcmts;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StatusColumn {
                get {
                    return this.columnStatus;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CommentsColumn {
                get {
                    return this.columnComments;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TestNoColumn {
                get {
                    return this.columnTestNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TestNameColumn {
                get {
                    return this.columnTestName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TestDescColumn {
                get {
                    return this.columnTestDesc;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TestTypeColumn {
                get {
                    return this.columnTestType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BulkMethodNoColumn {
                get {
                    return this.columnBulkMethodNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NormsReadingColumn {
                get {
                    return this.columnNormsReading;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BulkInspectedByColumn {
                get {
                    return this.columnBulkInspectedBy;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CompletedOnColumn {
                get {
                    return this.columnCompletedOn;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NormsMinColumn {
                get {
                    return this.columnNormsMin;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NormsMaxColumn {
                get {
                    return this.columnNormsMax;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FNoColumn {
                get {
                    return this.columnFNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public STP_Select_Bulk_Analysis_ReportRow this[int index] {
                get {
                    return ((STP_Select_Bulk_Analysis_ReportRow)(this.Rows[index]));
                }
            }
            
            public event STP_Select_Bulk_Analysis_ReportRowChangeEventHandler STP_Select_Bulk_Analysis_ReportRowChanging;
            
            public event STP_Select_Bulk_Analysis_ReportRowChangeEventHandler STP_Select_Bulk_Analysis_ReportRowChanged;
            
            public event STP_Select_Bulk_Analysis_ReportRowChangeEventHandler STP_Select_Bulk_Analysis_ReportRowDeleting;
            
            public event STP_Select_Bulk_Analysis_ReportRowChangeEventHandler STP_Select_Bulk_Analysis_ReportRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddSTP_Select_Bulk_Analysis_ReportRow(STP_Select_Bulk_Analysis_ReportRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public STP_Select_Bulk_Analysis_ReportRow AddSTP_Select_Bulk_Analysis_ReportRow(
                        System.DateTime InspDate, 
                        string FormulaNo, 
                        string BulkDesc, 
                        string MfgWo, 
                        string FormulaType, 
                        string Supplier, 
                        int BatchSize, 
                        string FamilyDesc, 
                        string VslDesc, 
                        System.DateTime OfficializationNo, 
                        System.DateTime ReferenceDate, 
                        string FlagRL, 
                        string FormulationApproved, 
                        string BPCNONBPC, 
                        string NonBPCcmts, 
                        string Status, 
                        string Comments, 
                        string TestName, 
                        string TestDesc, 
                        string TestType, 
                        string NormsReading, 
                        string BulkInspectedBy, 
                        System.DateTime CompletedOn, 
                        string NormsMin, 
                        string NormsMax, 
                        long FNo) {
                STP_Select_Bulk_Analysis_ReportRow rowSTP_Select_Bulk_Analysis_ReportRow = ((STP_Select_Bulk_Analysis_ReportRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        InspDate,
                        null,
                        FormulaNo,
                        BulkDesc,
                        MfgWo,
                        FormulaType,
                        Supplier,
                        BatchSize,
                        FamilyDesc,
                        VslDesc,
                        OfficializationNo,
                        ReferenceDate,
                        FlagRL,
                        FormulationApproved,
                        BPCNONBPC,
                        NonBPCcmts,
                        Status,
                        Comments,
                        null,
                        TestName,
                        TestDesc,
                        TestType,
                        null,
                        NormsReading,
                        BulkInspectedBy,
                        CompletedOn,
                        NormsMin,
                        NormsMax,
                        FNo};
                rowSTP_Select_Bulk_Analysis_ReportRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowSTP_Select_Bulk_Analysis_ReportRow);
                return rowSTP_Select_Bulk_Analysis_ReportRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                STP_Select_Bulk_Analysis_ReportDataTable cln = ((STP_Select_Bulk_Analysis_ReportDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new STP_Select_Bulk_Analysis_ReportDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnInspDate = base.Columns["InspDate"];
                this.columnFMID = base.Columns["FMID"];
                this.columnFormulaNo = base.Columns["FormulaNo"];
                this.columnBulkDesc = base.Columns["BulkDesc"];
                this.columnMfgWo = base.Columns["MfgWo"];
                this.columnFormulaType = base.Columns["FormulaType"];
                this.columnSupplier = base.Columns["Supplier"];
                this.columnBatchSize = base.Columns["BatchSize"];
                this.columnFamilyDesc = base.Columns["FamilyDesc"];
                this.columnVslDesc = base.Columns["VslDesc"];
                this.columnOfficializationNo = base.Columns["OfficializationNo"];
                this.columnReferenceDate = base.Columns["ReferenceDate"];
                this.columnFlagRL = base.Columns["FlagRL"];
                this.columnFormulationApproved = base.Columns["FormulationApproved"];
                this.columnBPCNONBPC = base.Columns["BPCNONBPC"];
                this.columnNonBPCcmts = base.Columns["NonBPCcmts"];
                this.columnStatus = base.Columns["Status"];
                this.columnComments = base.Columns["Comments"];
                this.columnTestNo = base.Columns["TestNo"];
                this.columnTestName = base.Columns["TestName"];
                this.columnTestDesc = base.Columns["TestDesc"];
                this.columnTestType = base.Columns["TestType"];
                this.columnBulkMethodNo = base.Columns["BulkMethodNo"];
                this.columnNormsReading = base.Columns["NormsReading"];
                this.columnBulkInspectedBy = base.Columns["BulkInspectedBy"];
                this.columnCompletedOn = base.Columns["CompletedOn"];
                this.columnNormsMin = base.Columns["NormsMin"];
                this.columnNormsMax = base.Columns["NormsMax"];
                this.columnFNo = base.Columns["FNo"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnInspDate = new global::System.Data.DataColumn("InspDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInspDate);
                this.columnFMID = new global::System.Data.DataColumn("FMID", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFMID);
                this.columnFormulaNo = new global::System.Data.DataColumn("FormulaNo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFormulaNo);
                this.columnBulkDesc = new global::System.Data.DataColumn("BulkDesc", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBulkDesc);
                this.columnMfgWo = new global::System.Data.DataColumn("MfgWo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMfgWo);
                this.columnFormulaType = new global::System.Data.DataColumn("FormulaType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFormulaType);
                this.columnSupplier = new global::System.Data.DataColumn("Supplier", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSupplier);
                this.columnBatchSize = new global::System.Data.DataColumn("BatchSize", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBatchSize);
                this.columnFamilyDesc = new global::System.Data.DataColumn("FamilyDesc", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFamilyDesc);
                this.columnVslDesc = new global::System.Data.DataColumn("VslDesc", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnVslDesc);
                this.columnOfficializationNo = new global::System.Data.DataColumn("OfficializationNo", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOfficializationNo);
                this.columnReferenceDate = new global::System.Data.DataColumn("ReferenceDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnReferenceDate);
                this.columnFlagRL = new global::System.Data.DataColumn("FlagRL", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFlagRL);
                this.columnFormulationApproved = new global::System.Data.DataColumn("FormulationApproved", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFormulationApproved);
                this.columnBPCNONBPC = new global::System.Data.DataColumn("BPCNONBPC", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBPCNONBPC);
                this.columnNonBPCcmts = new global::System.Data.DataColumn("NonBPCcmts", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNonBPCcmts);
                this.columnStatus = new global::System.Data.DataColumn("Status", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStatus);
                this.columnComments = new global::System.Data.DataColumn("Comments", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnComments);
                this.columnTestNo = new global::System.Data.DataColumn("TestNo", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTestNo);
                this.columnTestName = new global::System.Data.DataColumn("TestName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTestName);
                this.columnTestDesc = new global::System.Data.DataColumn("TestDesc", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTestDesc);
                this.columnTestType = new global::System.Data.DataColumn("TestType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTestType);
                this.columnBulkMethodNo = new global::System.Data.DataColumn("BulkMethodNo", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBulkMethodNo);
                this.columnNormsReading = new global::System.Data.DataColumn("NormsReading", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNormsReading);
                this.columnBulkInspectedBy = new global::System.Data.DataColumn("BulkInspectedBy", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBulkInspectedBy);
                this.columnCompletedOn = new global::System.Data.DataColumn("CompletedOn", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCompletedOn);
                this.columnNormsMin = new global::System.Data.DataColumn("NormsMin", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNormsMin);
                this.columnNormsMax = new global::System.Data.DataColumn("NormsMax", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNormsMax);
                this.columnFNo = new global::System.Data.DataColumn("FNo", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFNo);
                this.columnFMID.AutoIncrement = true;
                this.columnFMID.AllowDBNull = false;
                this.columnFMID.ReadOnly = true;
                this.columnFormulaNo.AllowDBNull = false;
                this.columnFormulaNo.MaxLength = 200;
                this.columnBulkDesc.MaxLength = 250;
                this.columnMfgWo.MaxLength = 200;
                this.columnFormulaType.MaxLength = 50;
                this.columnSupplier.MaxLength = 200;
                this.columnFamilyDesc.MaxLength = 250;
                this.columnVslDesc.MaxLength = 250;
                this.columnFlagRL.MaxLength = 1;
                this.columnFormulationApproved.MaxLength = 1;
                this.columnBPCNONBPC.MaxLength = 1;
                this.columnNonBPCcmts.MaxLength = 250;
                this.columnStatus.MaxLength = 1;
                this.columnComments.MaxLength = 250;
                this.columnTestNo.AutoIncrement = true;
                this.columnTestNo.AllowDBNull = false;
                this.columnTestNo.ReadOnly = true;
                this.columnTestName.MaxLength = 250;
                this.columnTestDesc.MaxLength = 250;
                this.columnTestType.MaxLength = 50;
                this.columnBulkMethodNo.AutoIncrement = true;
                this.columnBulkMethodNo.AllowDBNull = false;
                this.columnBulkMethodNo.ReadOnly = true;
                this.columnNormsReading.MaxLength = 50;
                this.columnBulkInspectedBy.MaxLength = 50;
                this.columnNormsMin.MaxLength = 50;
                this.columnNormsMax.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public STP_Select_Bulk_Analysis_ReportRow NewSTP_Select_Bulk_Analysis_ReportRow() {
                return ((STP_Select_Bulk_Analysis_ReportRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new STP_Select_Bulk_Analysis_ReportRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(STP_Select_Bulk_Analysis_ReportRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.STP_Select_Bulk_Analysis_ReportRowChanged != null)) {
                    this.STP_Select_Bulk_Analysis_ReportRowChanged(this, new STP_Select_Bulk_Analysis_ReportRowChangeEvent(((STP_Select_Bulk_Analysis_ReportRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.STP_Select_Bulk_Analysis_ReportRowChanging != null)) {
                    this.STP_Select_Bulk_Analysis_ReportRowChanging(this, new STP_Select_Bulk_Analysis_ReportRowChangeEvent(((STP_Select_Bulk_Analysis_ReportRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.STP_Select_Bulk_Analysis_ReportRowDeleted != null)) {
                    this.STP_Select_Bulk_Analysis_ReportRowDeleted(this, new STP_Select_Bulk_Analysis_ReportRowChangeEvent(((STP_Select_Bulk_Analysis_ReportRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.STP_Select_Bulk_Analysis_ReportRowDeleting != null)) {
                    this.STP_Select_Bulk_Analysis_ReportRowDeleting(this, new STP_Select_Bulk_Analysis_ReportRowChangeEvent(((STP_Select_Bulk_Analysis_ReportRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveSTP_Select_Bulk_Analysis_ReportRow(STP_Select_Bulk_Analysis_ReportRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                dsAnalysisReport ds = new dsAnalysisReport();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "STP_Select_Bulk_Analysis_ReportDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class STP_Select_Bulk_Analysis_ReportRow : global::System.Data.DataRow {
            
            private STP_Select_Bulk_Analysis_ReportDataTable tableSTP_Select_Bulk_Analysis_Report;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal STP_Select_Bulk_Analysis_ReportRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableSTP_Select_Bulk_Analysis_Report = ((STP_Select_Bulk_Analysis_ReportDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime InspDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableSTP_Select_Bulk_Analysis_Report.InspDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InspDate\' in table \'STP_Select_Bulk_Analysis_Report\' is DBN" +
                                "ull.", e);
                    }
                }
                set {
                    this[this.tableSTP_Select_Bulk_Analysis_Report.InspDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long FMID {
                get {
                    return ((long)(this[this.tableSTP_Select_Bulk_Analysis_Report.FMIDColumn]));
                }
                set {
                    this[this.tableSTP_Select_Bulk_Analysis_Report.FMIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FormulaNo {
                get {
                    return ((string)(this[this.tableSTP_Select_Bulk_Analysis_Report.FormulaNoColumn]));
                }
                set {
                    this[this.tableSTP_Select_Bulk_Analysis_Report.FormulaNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BulkDesc {
                get {
                    try {
                        return ((string)(this[this.tableSTP_Select_Bulk_Analysis_Report.BulkDescColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BulkDesc\' in table \'STP_Select_Bulk_Analysis_Report\' is DBN" +
                                "ull.", e);
                    }
                }
                set {
                    this[this.tableSTP_Select_Bulk_Analysis_Report.BulkDescColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MfgWo {
                get {
                    try {
                        return ((string)(this[this.tableSTP_Select_Bulk_Analysis_Report.MfgWoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MfgWo\' in table \'STP_Select_Bulk_Analysis_Report\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableSTP_Select_Bulk_Analysis_Report.MfgWoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FormulaType {
                get {
                    try {
                        return ((string)(this[this.tableSTP_Select_Bulk_Analysis_Report.FormulaTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FormulaType\' in table \'STP_Select_Bulk_Analysis_Report\' is " +
                                "DBNull.", e);
                    }
                }
                set {
                    this[this.tableSTP_Select_Bulk_Analysis_Report.FormulaTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Supplier {
                get {
                    try {
                        return ((string)(this[this.tableSTP_Select_Bulk_Analysis_Report.SupplierColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Supplier\' in table \'STP_Select_Bulk_Analysis_Report\' is DBN" +
                                "ull.", e);
                    }
                }
                set {
                    this[this.tableSTP_Select_Bulk_Analysis_Report.SupplierColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int BatchSize {
                get {
                    try {
                        return ((int)(this[this.tableSTP_Select_Bulk_Analysis_Report.BatchSizeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BatchSize\' in table \'STP_Select_Bulk_Analysis_Report\' is DB" +
                                "Null.", e);
                    }
                }
                set {
                    this[this.tableSTP_Select_Bulk_Analysis_Report.BatchSizeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FamilyDesc {
                get {
                    try {
                        return ((string)(this[this.tableSTP_Select_Bulk_Analysis_Report.FamilyDescColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FamilyDesc\' in table \'STP_Select_Bulk_Analysis_Report\' is D" +
                                "BNull.", e);
                    }
                }
                set {
                    this[this.tableSTP_Select_Bulk_Analysis_Report.FamilyDescColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string VslDesc {
                get {
                    try {
                        return ((string)(this[this.tableSTP_Select_Bulk_Analysis_Report.VslDescColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'VslDesc\' in table \'STP_Select_Bulk_Analysis_Report\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tableSTP_Select_Bulk_Analysis_Report.VslDescColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime OfficializationNo {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableSTP_Select_Bulk_Analysis_Report.OfficializationNoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OfficializationNo\' in table \'STP_Select_Bulk_Analysis_Repor" +
                                "t\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSTP_Select_Bulk_Analysis_Report.OfficializationNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime ReferenceDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableSTP_Select_Bulk_Analysis_Report.ReferenceDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ReferenceDate\' in table \'STP_Select_Bulk_Analysis_Report\' i" +
                                "s DBNull.", e);
                    }
                }
                set {
                    this[this.tableSTP_Select_Bulk_Analysis_Report.ReferenceDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FlagRL {
                get {
                    try {
                        return ((string)(this[this.tableSTP_Select_Bulk_Analysis_Report.FlagRLColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FlagRL\' in table \'STP_Select_Bulk_Analysis_Report\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableSTP_Select_Bulk_Analysis_Report.FlagRLColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FormulationApproved {
                get {
                    try {
                        return ((string)(this[this.tableSTP_Select_Bulk_Analysis_Report.FormulationApprovedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FormulationApproved\' in table \'STP_Select_Bulk_Analysis_Rep" +
                                "ort\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSTP_Select_Bulk_Analysis_Report.FormulationApprovedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BPCNONBPC {
                get {
                    try {
                        return ((string)(this[this.tableSTP_Select_Bulk_Analysis_Report.BPCNONBPCColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BPCNONBPC\' in table \'STP_Select_Bulk_Analysis_Report\' is DB" +
                                "Null.", e);
                    }
                }
                set {
                    this[this.tableSTP_Select_Bulk_Analysis_Report.BPCNONBPCColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NonBPCcmts {
                get {
                    try {
                        return ((string)(this[this.tableSTP_Select_Bulk_Analysis_Report.NonBPCcmtsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'NonBPCcmts\' in table \'STP_Select_Bulk_Analysis_Report\' is D" +
                                "BNull.", e);
                    }
                }
                set {
                    this[this.tableSTP_Select_Bulk_Analysis_Report.NonBPCcmtsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Status {
                get {
                    try {
                        return ((string)(this[this.tableSTP_Select_Bulk_Analysis_Report.StatusColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Status\' in table \'STP_Select_Bulk_Analysis_Report\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableSTP_Select_Bulk_Analysis_Report.StatusColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Comments {
                get {
                    try {
                        return ((string)(this[this.tableSTP_Select_Bulk_Analysis_Report.CommentsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Comments\' in table \'STP_Select_Bulk_Analysis_Report\' is DBN" +
                                "ull.", e);
                    }
                }
                set {
                    this[this.tableSTP_Select_Bulk_Analysis_Report.CommentsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int TestNo {
                get {
                    return ((int)(this[this.tableSTP_Select_Bulk_Analysis_Report.TestNoColumn]));
                }
                set {
                    this[this.tableSTP_Select_Bulk_Analysis_Report.TestNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TestName {
                get {
                    try {
                        return ((string)(this[this.tableSTP_Select_Bulk_Analysis_Report.TestNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TestName\' in table \'STP_Select_Bulk_Analysis_Report\' is DBN" +
                                "ull.", e);
                    }
                }
                set {
                    this[this.tableSTP_Select_Bulk_Analysis_Report.TestNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TestDesc {
                get {
                    try {
                        return ((string)(this[this.tableSTP_Select_Bulk_Analysis_Report.TestDescColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TestDesc\' in table \'STP_Select_Bulk_Analysis_Report\' is DBN" +
                                "ull.", e);
                    }
                }
                set {
                    this[this.tableSTP_Select_Bulk_Analysis_Report.TestDescColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TestType {
                get {
                    try {
                        return ((string)(this[this.tableSTP_Select_Bulk_Analysis_Report.TestTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TestType\' in table \'STP_Select_Bulk_Analysis_Report\' is DBN" +
                                "ull.", e);
                    }
                }
                set {
                    this[this.tableSTP_Select_Bulk_Analysis_Report.TestTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long BulkMethodNo {
                get {
                    return ((long)(this[this.tableSTP_Select_Bulk_Analysis_Report.BulkMethodNoColumn]));
                }
                set {
                    this[this.tableSTP_Select_Bulk_Analysis_Report.BulkMethodNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NormsReading {
                get {
                    try {
                        return ((string)(this[this.tableSTP_Select_Bulk_Analysis_Report.NormsReadingColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'NormsReading\' in table \'STP_Select_Bulk_Analysis_Report\' is" +
                                " DBNull.", e);
                    }
                }
                set {
                    this[this.tableSTP_Select_Bulk_Analysis_Report.NormsReadingColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BulkInspectedBy {
                get {
                    try {
                        return ((string)(this[this.tableSTP_Select_Bulk_Analysis_Report.BulkInspectedByColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BulkInspectedBy\' in table \'STP_Select_Bulk_Analysis_Report\'" +
                                " is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSTP_Select_Bulk_Analysis_Report.BulkInspectedByColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime CompletedOn {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableSTP_Select_Bulk_Analysis_Report.CompletedOnColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CompletedOn\' in table \'STP_Select_Bulk_Analysis_Report\' is " +
                                "DBNull.", e);
                    }
                }
                set {
                    this[this.tableSTP_Select_Bulk_Analysis_Report.CompletedOnColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NormsMin {
                get {
                    try {
                        return ((string)(this[this.tableSTP_Select_Bulk_Analysis_Report.NormsMinColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'NormsMin\' in table \'STP_Select_Bulk_Analysis_Report\' is DBN" +
                                "ull.", e);
                    }
                }
                set {
                    this[this.tableSTP_Select_Bulk_Analysis_Report.NormsMinColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NormsMax {
                get {
                    try {
                        return ((string)(this[this.tableSTP_Select_Bulk_Analysis_Report.NormsMaxColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'NormsMax\' in table \'STP_Select_Bulk_Analysis_Report\' is DBN" +
                                "ull.", e);
                    }
                }
                set {
                    this[this.tableSTP_Select_Bulk_Analysis_Report.NormsMaxColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long FNo {
                get {
                    try {
                        return ((long)(this[this.tableSTP_Select_Bulk_Analysis_Report.FNoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FNo\' in table \'STP_Select_Bulk_Analysis_Report\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSTP_Select_Bulk_Analysis_Report.FNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInspDateNull() {
                return this.IsNull(this.tableSTP_Select_Bulk_Analysis_Report.InspDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInspDateNull() {
                this[this.tableSTP_Select_Bulk_Analysis_Report.InspDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBulkDescNull() {
                return this.IsNull(this.tableSTP_Select_Bulk_Analysis_Report.BulkDescColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBulkDescNull() {
                this[this.tableSTP_Select_Bulk_Analysis_Report.BulkDescColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMfgWoNull() {
                return this.IsNull(this.tableSTP_Select_Bulk_Analysis_Report.MfgWoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMfgWoNull() {
                this[this.tableSTP_Select_Bulk_Analysis_Report.MfgWoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFormulaTypeNull() {
                return this.IsNull(this.tableSTP_Select_Bulk_Analysis_Report.FormulaTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFormulaTypeNull() {
                this[this.tableSTP_Select_Bulk_Analysis_Report.FormulaTypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSupplierNull() {
                return this.IsNull(this.tableSTP_Select_Bulk_Analysis_Report.SupplierColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSupplierNull() {
                this[this.tableSTP_Select_Bulk_Analysis_Report.SupplierColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBatchSizeNull() {
                return this.IsNull(this.tableSTP_Select_Bulk_Analysis_Report.BatchSizeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBatchSizeNull() {
                this[this.tableSTP_Select_Bulk_Analysis_Report.BatchSizeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFamilyDescNull() {
                return this.IsNull(this.tableSTP_Select_Bulk_Analysis_Report.FamilyDescColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFamilyDescNull() {
                this[this.tableSTP_Select_Bulk_Analysis_Report.FamilyDescColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsVslDescNull() {
                return this.IsNull(this.tableSTP_Select_Bulk_Analysis_Report.VslDescColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetVslDescNull() {
                this[this.tableSTP_Select_Bulk_Analysis_Report.VslDescColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOfficializationNoNull() {
                return this.IsNull(this.tableSTP_Select_Bulk_Analysis_Report.OfficializationNoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOfficializationNoNull() {
                this[this.tableSTP_Select_Bulk_Analysis_Report.OfficializationNoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsReferenceDateNull() {
                return this.IsNull(this.tableSTP_Select_Bulk_Analysis_Report.ReferenceDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetReferenceDateNull() {
                this[this.tableSTP_Select_Bulk_Analysis_Report.ReferenceDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFlagRLNull() {
                return this.IsNull(this.tableSTP_Select_Bulk_Analysis_Report.FlagRLColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFlagRLNull() {
                this[this.tableSTP_Select_Bulk_Analysis_Report.FlagRLColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFormulationApprovedNull() {
                return this.IsNull(this.tableSTP_Select_Bulk_Analysis_Report.FormulationApprovedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFormulationApprovedNull() {
                this[this.tableSTP_Select_Bulk_Analysis_Report.FormulationApprovedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBPCNONBPCNull() {
                return this.IsNull(this.tableSTP_Select_Bulk_Analysis_Report.BPCNONBPCColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBPCNONBPCNull() {
                this[this.tableSTP_Select_Bulk_Analysis_Report.BPCNONBPCColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNonBPCcmtsNull() {
                return this.IsNull(this.tableSTP_Select_Bulk_Analysis_Report.NonBPCcmtsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNonBPCcmtsNull() {
                this[this.tableSTP_Select_Bulk_Analysis_Report.NonBPCcmtsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStatusNull() {
                return this.IsNull(this.tableSTP_Select_Bulk_Analysis_Report.StatusColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStatusNull() {
                this[this.tableSTP_Select_Bulk_Analysis_Report.StatusColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCommentsNull() {
                return this.IsNull(this.tableSTP_Select_Bulk_Analysis_Report.CommentsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCommentsNull() {
                this[this.tableSTP_Select_Bulk_Analysis_Report.CommentsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTestNameNull() {
                return this.IsNull(this.tableSTP_Select_Bulk_Analysis_Report.TestNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTestNameNull() {
                this[this.tableSTP_Select_Bulk_Analysis_Report.TestNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTestDescNull() {
                return this.IsNull(this.tableSTP_Select_Bulk_Analysis_Report.TestDescColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTestDescNull() {
                this[this.tableSTP_Select_Bulk_Analysis_Report.TestDescColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTestTypeNull() {
                return this.IsNull(this.tableSTP_Select_Bulk_Analysis_Report.TestTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTestTypeNull() {
                this[this.tableSTP_Select_Bulk_Analysis_Report.TestTypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNormsReadingNull() {
                return this.IsNull(this.tableSTP_Select_Bulk_Analysis_Report.NormsReadingColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNormsReadingNull() {
                this[this.tableSTP_Select_Bulk_Analysis_Report.NormsReadingColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBulkInspectedByNull() {
                return this.IsNull(this.tableSTP_Select_Bulk_Analysis_Report.BulkInspectedByColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBulkInspectedByNull() {
                this[this.tableSTP_Select_Bulk_Analysis_Report.BulkInspectedByColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCompletedOnNull() {
                return this.IsNull(this.tableSTP_Select_Bulk_Analysis_Report.CompletedOnColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCompletedOnNull() {
                this[this.tableSTP_Select_Bulk_Analysis_Report.CompletedOnColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNormsMinNull() {
                return this.IsNull(this.tableSTP_Select_Bulk_Analysis_Report.NormsMinColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNormsMinNull() {
                this[this.tableSTP_Select_Bulk_Analysis_Report.NormsMinColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNormsMaxNull() {
                return this.IsNull(this.tableSTP_Select_Bulk_Analysis_Report.NormsMaxColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNormsMaxNull() {
                this[this.tableSTP_Select_Bulk_Analysis_Report.NormsMaxColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFNoNull() {
                return this.IsNull(this.tableSTP_Select_Bulk_Analysis_Report.FNoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFNoNull() {
                this[this.tableSTP_Select_Bulk_Analysis_Report.FNoColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class STP_Select_Bulk_Analysis_ReportRowChangeEvent : global::System.EventArgs {
            
            private STP_Select_Bulk_Analysis_ReportRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public STP_Select_Bulk_Analysis_ReportRowChangeEvent(STP_Select_Bulk_Analysis_ReportRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public STP_Select_Bulk_Analysis_ReportRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
namespace QTMS.Reports.dsAnalysisReportTableAdapters {
    
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class STP_Select_Bulk_Analysis_ReportTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public STP_Select_Bulk_Analysis_ReportTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "STP_Select_Bulk_Analysis_Report";
            tableMapping.ColumnMappings.Add("InspDate", "InspDate");
            tableMapping.ColumnMappings.Add("FMID", "FMID");
            tableMapping.ColumnMappings.Add("FormulaNo", "FormulaNo");
            tableMapping.ColumnMappings.Add("BulkDesc", "BulkDesc");
            tableMapping.ColumnMappings.Add("MfgWo", "MfgWo");
            tableMapping.ColumnMappings.Add("FormulaType", "FormulaType");
            tableMapping.ColumnMappings.Add("Supplier", "Supplier");
            tableMapping.ColumnMappings.Add("BatchSize", "BatchSize");
            tableMapping.ColumnMappings.Add("FamilyDesc", "FamilyDesc");
            tableMapping.ColumnMappings.Add("VslDesc", "VslDesc");
            tableMapping.ColumnMappings.Add("OfficializationNo", "OfficializationNo");
            tableMapping.ColumnMappings.Add("ReferenceDate", "ReferenceDate");
            tableMapping.ColumnMappings.Add("FlagRL", "FlagRL");
            tableMapping.ColumnMappings.Add("FormulationApproved", "FormulationApproved");
            tableMapping.ColumnMappings.Add("BPCNONBPC", "BPCNONBPC");
            tableMapping.ColumnMappings.Add("NonBPCcmts", "NonBPCcmts");
            tableMapping.ColumnMappings.Add("Status", "Status");
            tableMapping.ColumnMappings.Add("Comments", "Comments");
            tableMapping.ColumnMappings.Add("TestNo", "TestNo");
            tableMapping.ColumnMappings.Add("TestName", "TestName");
            tableMapping.ColumnMappings.Add("TestDesc", "TestDesc");
            tableMapping.ColumnMappings.Add("TestType", "TestType");
            tableMapping.ColumnMappings.Add("BulkMethodNo", "BulkMethodNo");
            tableMapping.ColumnMappings.Add("NormsReading", "NormsReading");
            tableMapping.ColumnMappings.Add("BulkInspectedBy", "BulkInspectedBy");
            tableMapping.ColumnMappings.Add("CompletedOn", "CompletedOn");
            tableMapping.ColumnMappings.Add("NormsMin", "NormsMin");
            tableMapping.ColumnMappings.Add("NormsMax", "NormsMax");
            tableMapping.ColumnMappings.Add("FNo", "FNo");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::QTMS.Properties.Settings.Default.QTMS2ConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "dbo.STP_Select_Bulk_Analysis_Report";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.StoredProcedure;
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RETURN_VALUE", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.ReturnValue, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FNo", global::System.Data.SqlDbType.BigInt, 8, global::System.Data.ParameterDirection.Input, 19, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(dsAnalysisReport.STP_Select_Bulk_Analysis_ReportDataTable dataTable, global::System.Nullable<long> FNo) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((FNo.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[1].Value = ((long)(FNo.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual dsAnalysisReport.STP_Select_Bulk_Analysis_ReportDataTable GetData(global::System.Nullable<long> FNo) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((FNo.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[1].Value = ((long)(FNo.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            dsAnalysisReport.STP_Select_Bulk_Analysis_ReportDataTable dataTable = new dsAnalysisReport.STP_Select_Bulk_Analysis_ReportDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
}

#pragma warning restore 1591