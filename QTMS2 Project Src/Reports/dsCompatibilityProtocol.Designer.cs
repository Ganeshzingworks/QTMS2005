//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.8009
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace QTMS.Reports {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("dsCompatibilityProtocol")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class dsCompatibilityProtocol : global::System.Data.DataSet {
        
        private STP_Select_tblCompatibility_FNoDataTable tableSTP_Select_tblCompatibility_FNo;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public dsCompatibilityProtocol() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected dsCompatibilityProtocol(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["STP_Select_tblCompatibility_FNo"] != null)) {
                    base.Tables.Add(new STP_Select_tblCompatibility_FNoDataTable(ds.Tables["STP_Select_tblCompatibility_FNo"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public STP_Select_tblCompatibility_FNoDataTable STP_Select_tblCompatibility_FNo {
            get {
                return this.tableSTP_Select_tblCompatibility_FNo;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            dsCompatibilityProtocol cln = ((dsCompatibilityProtocol)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["STP_Select_tblCompatibility_FNo"] != null)) {
                    base.Tables.Add(new STP_Select_tblCompatibility_FNoDataTable(ds.Tables["STP_Select_tblCompatibility_FNo"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableSTP_Select_tblCompatibility_FNo = ((STP_Select_tblCompatibility_FNoDataTable)(base.Tables["STP_Select_tblCompatibility_FNo"]));
            if ((initTable == true)) {
                if ((this.tableSTP_Select_tblCompatibility_FNo != null)) {
                    this.tableSTP_Select_tblCompatibility_FNo.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "dsCompatibilityProtocol";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/dsCompatibilityProtocol.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableSTP_Select_tblCompatibility_FNo = new STP_Select_tblCompatibility_FNoDataTable();
            base.Tables.Add(this.tableSTP_Select_tblCompatibility_FNo);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeSTP_Select_tblCompatibility_FNo() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            dsCompatibilityProtocol ds = new dsCompatibilityProtocol();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void STP_Select_tblCompatibility_FNoRowChangeEventHandler(object sender, STP_Select_tblCompatibility_FNoRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class STP_Select_tblCompatibility_FNoDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnCompNo;
            
            private global::System.Data.DataColumn columnFNo;
            
            private global::System.Data.DataColumn columnReportType;
            
            private global::System.Data.DataColumn columnInspDate;
            
            private global::System.Data.DataColumn columnInitialStudyDate;
            
            private global::System.Data.DataColumn columnControlDate;
            
            private global::System.Data.DataColumn columnNatureOfDefect;
            
            private global::System.Data.DataColumn columnConclusion;
            
            private global::System.Data.DataColumn columnComment;
            
            private global::System.Data.DataColumn columnInspectedBy;
            
            private global::System.Data.DataColumn columnTransDate;
            
            private global::System.Data.DataColumn columnLoginID;
            
            private global::System.Data.DataColumn columnFillVolume;
            
            private global::System.Data.DataColumn columnReportNo;
            
            private global::System.Data.DataColumn columnFormulaNo;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public STP_Select_tblCompatibility_FNoDataTable() {
                this.TableName = "STP_Select_tblCompatibility_FNo";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal STP_Select_tblCompatibility_FNoDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected STP_Select_tblCompatibility_FNoDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CompNoColumn {
                get {
                    return this.columnCompNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FNoColumn {
                get {
                    return this.columnFNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ReportTypeColumn {
                get {
                    return this.columnReportType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InspDateColumn {
                get {
                    return this.columnInspDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InitialStudyDateColumn {
                get {
                    return this.columnInitialStudyDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ControlDateColumn {
                get {
                    return this.columnControlDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NatureOfDefectColumn {
                get {
                    return this.columnNatureOfDefect;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ConclusionColumn {
                get {
                    return this.columnConclusion;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CommentColumn {
                get {
                    return this.columnComment;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InspectedByColumn {
                get {
                    return this.columnInspectedBy;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TransDateColumn {
                get {
                    return this.columnTransDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LoginIDColumn {
                get {
                    return this.columnLoginID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FillVolumeColumn {
                get {
                    return this.columnFillVolume;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ReportNoColumn {
                get {
                    return this.columnReportNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FormulaNoColumn {
                get {
                    return this.columnFormulaNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public STP_Select_tblCompatibility_FNoRow this[int index] {
                get {
                    return ((STP_Select_tblCompatibility_FNoRow)(this.Rows[index]));
                }
            }
            
            public event STP_Select_tblCompatibility_FNoRowChangeEventHandler STP_Select_tblCompatibility_FNoRowChanging;
            
            public event STP_Select_tblCompatibility_FNoRowChangeEventHandler STP_Select_tblCompatibility_FNoRowChanged;
            
            public event STP_Select_tblCompatibility_FNoRowChangeEventHandler STP_Select_tblCompatibility_FNoRowDeleting;
            
            public event STP_Select_tblCompatibility_FNoRowChangeEventHandler STP_Select_tblCompatibility_FNoRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddSTP_Select_tblCompatibility_FNoRow(STP_Select_tblCompatibility_FNoRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public STP_Select_tblCompatibility_FNoRow AddSTP_Select_tblCompatibility_FNoRow(long FNo, string ReportType, System.DateTime InspDate, System.DateTime InitialStudyDate, System.DateTime ControlDate, string NatureOfDefect, string Conclusion, string Comment, int InspectedBy, System.DateTime TransDate, int LoginID, string FillVolume, string ReportNo, string FormulaNo) {
                STP_Select_tblCompatibility_FNoRow rowSTP_Select_tblCompatibility_FNoRow = ((STP_Select_tblCompatibility_FNoRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        FNo,
                        ReportType,
                        InspDate,
                        InitialStudyDate,
                        ControlDate,
                        NatureOfDefect,
                        Conclusion,
                        Comment,
                        InspectedBy,
                        TransDate,
                        LoginID,
                        FillVolume,
                        ReportNo,
                        FormulaNo};
                rowSTP_Select_tblCompatibility_FNoRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowSTP_Select_tblCompatibility_FNoRow);
                return rowSTP_Select_tblCompatibility_FNoRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                STP_Select_tblCompatibility_FNoDataTable cln = ((STP_Select_tblCompatibility_FNoDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new STP_Select_tblCompatibility_FNoDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnCompNo = base.Columns["CompNo"];
                this.columnFNo = base.Columns["FNo"];
                this.columnReportType = base.Columns["ReportType"];
                this.columnInspDate = base.Columns["InspDate"];
                this.columnInitialStudyDate = base.Columns["InitialStudyDate"];
                this.columnControlDate = base.Columns["ControlDate"];
                this.columnNatureOfDefect = base.Columns["NatureOfDefect"];
                this.columnConclusion = base.Columns["Conclusion"];
                this.columnComment = base.Columns["Comment"];
                this.columnInspectedBy = base.Columns["InspectedBy"];
                this.columnTransDate = base.Columns["TransDate"];
                this.columnLoginID = base.Columns["LoginID"];
                this.columnFillVolume = base.Columns["FillVolume"];
                this.columnReportNo = base.Columns["ReportNo"];
                this.columnFormulaNo = base.Columns["FormulaNo"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnCompNo = new global::System.Data.DataColumn("CompNo", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCompNo);
                this.columnFNo = new global::System.Data.DataColumn("FNo", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFNo);
                this.columnReportType = new global::System.Data.DataColumn("ReportType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnReportType);
                this.columnInspDate = new global::System.Data.DataColumn("InspDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInspDate);
                this.columnInitialStudyDate = new global::System.Data.DataColumn("InitialStudyDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInitialStudyDate);
                this.columnControlDate = new global::System.Data.DataColumn("ControlDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnControlDate);
                this.columnNatureOfDefect = new global::System.Data.DataColumn("NatureOfDefect", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNatureOfDefect);
                this.columnConclusion = new global::System.Data.DataColumn("Conclusion", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnConclusion);
                this.columnComment = new global::System.Data.DataColumn("Comment", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnComment);
                this.columnInspectedBy = new global::System.Data.DataColumn("InspectedBy", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInspectedBy);
                this.columnTransDate = new global::System.Data.DataColumn("TransDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTransDate);
                this.columnLoginID = new global::System.Data.DataColumn("LoginID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLoginID);
                this.columnFillVolume = new global::System.Data.DataColumn("FillVolume", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFillVolume);
                this.columnReportNo = new global::System.Data.DataColumn("ReportNo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnReportNo);
                this.columnFormulaNo = new global::System.Data.DataColumn("FormulaNo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFormulaNo);
                this.columnCompNo.AutoIncrement = true;
                this.columnCompNo.AllowDBNull = false;
                this.columnCompNo.ReadOnly = true;
                this.columnFNo.AllowDBNull = false;
                this.columnReportType.AllowDBNull = false;
                this.columnReportType.MaxLength = 50;
                this.columnNatureOfDefect.MaxLength = 20;
                this.columnConclusion.AllowDBNull = false;
                this.columnConclusion.MaxLength = 1;
                this.columnComment.MaxLength = 50;
                this.columnInspectedBy.AllowDBNull = false;
                this.columnTransDate.AllowDBNull = false;
                this.columnLoginID.AllowDBNull = false;
                this.columnFillVolume.MaxLength = 50;
                this.columnReportNo.MaxLength = 30;
                this.columnFormulaNo.AllowDBNull = false;
                this.columnFormulaNo.MaxLength = 200;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public STP_Select_tblCompatibility_FNoRow NewSTP_Select_tblCompatibility_FNoRow() {
                return ((STP_Select_tblCompatibility_FNoRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new STP_Select_tblCompatibility_FNoRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(STP_Select_tblCompatibility_FNoRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.STP_Select_tblCompatibility_FNoRowChanged != null)) {
                    this.STP_Select_tblCompatibility_FNoRowChanged(this, new STP_Select_tblCompatibility_FNoRowChangeEvent(((STP_Select_tblCompatibility_FNoRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.STP_Select_tblCompatibility_FNoRowChanging != null)) {
                    this.STP_Select_tblCompatibility_FNoRowChanging(this, new STP_Select_tblCompatibility_FNoRowChangeEvent(((STP_Select_tblCompatibility_FNoRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.STP_Select_tblCompatibility_FNoRowDeleted != null)) {
                    this.STP_Select_tblCompatibility_FNoRowDeleted(this, new STP_Select_tblCompatibility_FNoRowChangeEvent(((STP_Select_tblCompatibility_FNoRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.STP_Select_tblCompatibility_FNoRowDeleting != null)) {
                    this.STP_Select_tblCompatibility_FNoRowDeleting(this, new STP_Select_tblCompatibility_FNoRowChangeEvent(((STP_Select_tblCompatibility_FNoRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveSTP_Select_tblCompatibility_FNoRow(STP_Select_tblCompatibility_FNoRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                dsCompatibilityProtocol ds = new dsCompatibilityProtocol();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "STP_Select_tblCompatibility_FNoDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class STP_Select_tblCompatibility_FNoRow : global::System.Data.DataRow {
            
            private STP_Select_tblCompatibility_FNoDataTable tableSTP_Select_tblCompatibility_FNo;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal STP_Select_tblCompatibility_FNoRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableSTP_Select_tblCompatibility_FNo = ((STP_Select_tblCompatibility_FNoDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long CompNo {
                get {
                    return ((long)(this[this.tableSTP_Select_tblCompatibility_FNo.CompNoColumn]));
                }
                set {
                    this[this.tableSTP_Select_tblCompatibility_FNo.CompNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long FNo {
                get {
                    return ((long)(this[this.tableSTP_Select_tblCompatibility_FNo.FNoColumn]));
                }
                set {
                    this[this.tableSTP_Select_tblCompatibility_FNo.FNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ReportType {
                get {
                    return ((string)(this[this.tableSTP_Select_tblCompatibility_FNo.ReportTypeColumn]));
                }
                set {
                    this[this.tableSTP_Select_tblCompatibility_FNo.ReportTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime InspDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableSTP_Select_tblCompatibility_FNo.InspDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InspDate\' in table \'STP_Select_tblCompatibility_FNo\' is DBN" +
                                "ull.", e);
                    }
                }
                set {
                    this[this.tableSTP_Select_tblCompatibility_FNo.InspDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime InitialStudyDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableSTP_Select_tblCompatibility_FNo.InitialStudyDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InitialStudyDate\' in table \'STP_Select_tblCompatibility_FNo" +
                                "\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSTP_Select_tblCompatibility_FNo.InitialStudyDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime ControlDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableSTP_Select_tblCompatibility_FNo.ControlDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ControlDate\' in table \'STP_Select_tblCompatibility_FNo\' is " +
                                "DBNull.", e);
                    }
                }
                set {
                    this[this.tableSTP_Select_tblCompatibility_FNo.ControlDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NatureOfDefect {
                get {
                    try {
                        return ((string)(this[this.tableSTP_Select_tblCompatibility_FNo.NatureOfDefectColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'NatureOfDefect\' in table \'STP_Select_tblCompatibility_FNo\' " +
                                "is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSTP_Select_tblCompatibility_FNo.NatureOfDefectColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Conclusion {
                get {
                    return ((string)(this[this.tableSTP_Select_tblCompatibility_FNo.ConclusionColumn]));
                }
                set {
                    this[this.tableSTP_Select_tblCompatibility_FNo.ConclusionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Comment {
                get {
                    try {
                        return ((string)(this[this.tableSTP_Select_tblCompatibility_FNo.CommentColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Comment\' in table \'STP_Select_tblCompatibility_FNo\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tableSTP_Select_tblCompatibility_FNo.CommentColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int InspectedBy {
                get {
                    return ((int)(this[this.tableSTP_Select_tblCompatibility_FNo.InspectedByColumn]));
                }
                set {
                    this[this.tableSTP_Select_tblCompatibility_FNo.InspectedByColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime TransDate {
                get {
                    return ((global::System.DateTime)(this[this.tableSTP_Select_tblCompatibility_FNo.TransDateColumn]));
                }
                set {
                    this[this.tableSTP_Select_tblCompatibility_FNo.TransDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int LoginID {
                get {
                    return ((int)(this[this.tableSTP_Select_tblCompatibility_FNo.LoginIDColumn]));
                }
                set {
                    this[this.tableSTP_Select_tblCompatibility_FNo.LoginIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FillVolume {
                get {
                    try {
                        return ((string)(this[this.tableSTP_Select_tblCompatibility_FNo.FillVolumeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FillVolume\' in table \'STP_Select_tblCompatibility_FNo\' is D" +
                                "BNull.", e);
                    }
                }
                set {
                    this[this.tableSTP_Select_tblCompatibility_FNo.FillVolumeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ReportNo {
                get {
                    try {
                        return ((string)(this[this.tableSTP_Select_tblCompatibility_FNo.ReportNoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ReportNo\' in table \'STP_Select_tblCompatibility_FNo\' is DBN" +
                                "ull.", e);
                    }
                }
                set {
                    this[this.tableSTP_Select_tblCompatibility_FNo.ReportNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FormulaNo {
                get {
                    return ((string)(this[this.tableSTP_Select_tblCompatibility_FNo.FormulaNoColumn]));
                }
                set {
                    this[this.tableSTP_Select_tblCompatibility_FNo.FormulaNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInspDateNull() {
                return this.IsNull(this.tableSTP_Select_tblCompatibility_FNo.InspDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInspDateNull() {
                this[this.tableSTP_Select_tblCompatibility_FNo.InspDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInitialStudyDateNull() {
                return this.IsNull(this.tableSTP_Select_tblCompatibility_FNo.InitialStudyDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInitialStudyDateNull() {
                this[this.tableSTP_Select_tblCompatibility_FNo.InitialStudyDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsControlDateNull() {
                return this.IsNull(this.tableSTP_Select_tblCompatibility_FNo.ControlDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetControlDateNull() {
                this[this.tableSTP_Select_tblCompatibility_FNo.ControlDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNatureOfDefectNull() {
                return this.IsNull(this.tableSTP_Select_tblCompatibility_FNo.NatureOfDefectColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNatureOfDefectNull() {
                this[this.tableSTP_Select_tblCompatibility_FNo.NatureOfDefectColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCommentNull() {
                return this.IsNull(this.tableSTP_Select_tblCompatibility_FNo.CommentColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCommentNull() {
                this[this.tableSTP_Select_tblCompatibility_FNo.CommentColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFillVolumeNull() {
                return this.IsNull(this.tableSTP_Select_tblCompatibility_FNo.FillVolumeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFillVolumeNull() {
                this[this.tableSTP_Select_tblCompatibility_FNo.FillVolumeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsReportNoNull() {
                return this.IsNull(this.tableSTP_Select_tblCompatibility_FNo.ReportNoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetReportNoNull() {
                this[this.tableSTP_Select_tblCompatibility_FNo.ReportNoColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class STP_Select_tblCompatibility_FNoRowChangeEvent : global::System.EventArgs {
            
            private STP_Select_tblCompatibility_FNoRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public STP_Select_tblCompatibility_FNoRowChangeEvent(STP_Select_tblCompatibility_FNoRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public STP_Select_tblCompatibility_FNoRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
namespace QTMS.Reports.dsCompatibilityProtocolTableAdapters {
    
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class STP_Select_tblCompatibility_FNoTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public STP_Select_tblCompatibility_FNoTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "STP_Select_tblCompatibility_FNo";
            tableMapping.ColumnMappings.Add("CompNo", "CompNo");
            tableMapping.ColumnMappings.Add("FNo", "FNo");
            tableMapping.ColumnMappings.Add("ReportType", "ReportType");
            tableMapping.ColumnMappings.Add("InspDate", "InspDate");
            tableMapping.ColumnMappings.Add("InitialStudyDate", "InitialStudyDate");
            tableMapping.ColumnMappings.Add("ControlDate", "ControlDate");
            tableMapping.ColumnMappings.Add("NatureOfDefect", "NatureOfDefect");
            tableMapping.ColumnMappings.Add("Conclusion", "Conclusion");
            tableMapping.ColumnMappings.Add("Comment", "Comment");
            tableMapping.ColumnMappings.Add("InspectedBy", "InspectedBy");
            tableMapping.ColumnMappings.Add("TransDate", "TransDate");
            tableMapping.ColumnMappings.Add("LoginID", "LoginID");
            tableMapping.ColumnMappings.Add("FillVolume", "FillVolume");
            tableMapping.ColumnMappings.Add("ReportNo", "ReportNo");
            tableMapping.ColumnMappings.Add("FormulaNo", "FormulaNo");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::QTMS.Properties.Settings.Default.QTMS2ConnectionString1;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "dbo.STP_Select_tblCompatibility_FNo";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.StoredProcedure;
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RETURN_VALUE", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.ReturnValue, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FNo", global::System.Data.SqlDbType.BigInt, 8, global::System.Data.ParameterDirection.Input, 19, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(dsCompatibilityProtocol.STP_Select_tblCompatibility_FNoDataTable dataTable, global::System.Nullable<long> FNo) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((FNo.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[1].Value = ((long)(FNo.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual dsCompatibilityProtocol.STP_Select_tblCompatibility_FNoDataTable GetData(global::System.Nullable<long> FNo) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((FNo.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[1].Value = ((long)(FNo.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            dsCompatibilityProtocol.STP_Select_tblCompatibility_FNoDataTable dataTable = new dsCompatibilityProtocol.STP_Select_tblCompatibility_FNoDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
}

#pragma warning restore 1591