//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.8009
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace QTMS.Reports {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("dsPMDefectNoteDetails_Report")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class dsPMDefectNoteDetails_Report : global::System.Data.DataSet {
        
        private STP_Select_PMDefectNoteDetail_ReportDataTable tableSTP_Select_PMDefectNoteDetail_Report;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public dsPMDefectNoteDetails_Report() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected dsPMDefectNoteDetails_Report(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["STP_Select_PMDefectNoteDetail_Report"] != null)) {
                    base.Tables.Add(new STP_Select_PMDefectNoteDetail_ReportDataTable(ds.Tables["STP_Select_PMDefectNoteDetail_Report"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public STP_Select_PMDefectNoteDetail_ReportDataTable STP_Select_PMDefectNoteDetail_Report {
            get {
                return this.tableSTP_Select_PMDefectNoteDetail_Report;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            dsPMDefectNoteDetails_Report cln = ((dsPMDefectNoteDetails_Report)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["STP_Select_PMDefectNoteDetail_Report"] != null)) {
                    base.Tables.Add(new STP_Select_PMDefectNoteDetail_ReportDataTable(ds.Tables["STP_Select_PMDefectNoteDetail_Report"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableSTP_Select_PMDefectNoteDetail_Report = ((STP_Select_PMDefectNoteDetail_ReportDataTable)(base.Tables["STP_Select_PMDefectNoteDetail_Report"]));
            if ((initTable == true)) {
                if ((this.tableSTP_Select_PMDefectNoteDetail_Report != null)) {
                    this.tableSTP_Select_PMDefectNoteDetail_Report.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "dsPMDefectNoteDetails_Report";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/dsPMDefectNoteDetails_Report.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableSTP_Select_PMDefectNoteDetail_Report = new STP_Select_PMDefectNoteDetail_ReportDataTable();
            base.Tables.Add(this.tableSTP_Select_PMDefectNoteDetail_Report);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeSTP_Select_PMDefectNoteDetail_Report() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            dsPMDefectNoteDetails_Report ds = new dsPMDefectNoteDetails_Report();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void STP_Select_PMDefectNoteDetail_ReportRowChangeEventHandler(object sender, STP_Select_PMDefectNoteDetail_ReportRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class STP_Select_PMDefectNoteDetail_ReportDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnPMCode;
            
            private global::System.Data.DataColumn columnPMCodeID;
            
            private global::System.Data.DataColumn columnPMSupplierName;
            
            private global::System.Data.DataColumn columnPMSupplierID;
            
            private global::System.Data.DataColumn columnPlantLotNo;
            
            private global::System.Data.DataColumn columnPMTransID;
            
            private global::System.Data.DataColumn columnPMDescription;
            
            private global::System.Data.DataColumn columnAcceptedDate;
            
            private global::System.Data.DataColumn columnCOCApplicable;
            
            private global::System.Data.DataColumn columnPMTestID;
            
            private global::System.Data.DataColumn columnPMChangeID;
            
            private global::System.Data.DataColumn columnStatus;
            
            private global::System.Data.DataColumn columnActualStatus;
            
            private global::System.Data.DataColumn columnRejectComment;
            
            private global::System.Data.DataColumn columnDefectComment;
            
            private global::System.Data.DataColumn columnDefectQuantity;
            
            private global::System.Data.DataColumn columnActionTaken;
            
            private global::System.Data.DataColumn columnQualityDecision;
            
            private global::System.Data.DataColumn columnDefectStatus;
            
            private global::System.Data.DataColumn columnInspDate;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public STP_Select_PMDefectNoteDetail_ReportDataTable() {
                this.TableName = "STP_Select_PMDefectNoteDetail_Report";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal STP_Select_PMDefectNoteDetail_ReportDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected STP_Select_PMDefectNoteDetail_ReportDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PMCodeColumn {
                get {
                    return this.columnPMCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PMCodeIDColumn {
                get {
                    return this.columnPMCodeID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PMSupplierNameColumn {
                get {
                    return this.columnPMSupplierName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PMSupplierIDColumn {
                get {
                    return this.columnPMSupplierID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PlantLotNoColumn {
                get {
                    return this.columnPlantLotNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PMTransIDColumn {
                get {
                    return this.columnPMTransID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PMDescriptionColumn {
                get {
                    return this.columnPMDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AcceptedDateColumn {
                get {
                    return this.columnAcceptedDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn COCApplicableColumn {
                get {
                    return this.columnCOCApplicable;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PMTestIDColumn {
                get {
                    return this.columnPMTestID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PMChangeIDColumn {
                get {
                    return this.columnPMChangeID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StatusColumn {
                get {
                    return this.columnStatus;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ActualStatusColumn {
                get {
                    return this.columnActualStatus;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RejectCommentColumn {
                get {
                    return this.columnRejectComment;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DefectCommentColumn {
                get {
                    return this.columnDefectComment;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DefectQuantityColumn {
                get {
                    return this.columnDefectQuantity;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ActionTakenColumn {
                get {
                    return this.columnActionTaken;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn QualityDecisionColumn {
                get {
                    return this.columnQualityDecision;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DefectStatusColumn {
                get {
                    return this.columnDefectStatus;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InspDateColumn {
                get {
                    return this.columnInspDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public STP_Select_PMDefectNoteDetail_ReportRow this[int index] {
                get {
                    return ((STP_Select_PMDefectNoteDetail_ReportRow)(this.Rows[index]));
                }
            }
            
            public event STP_Select_PMDefectNoteDetail_ReportRowChangeEventHandler STP_Select_PMDefectNoteDetail_ReportRowChanging;
            
            public event STP_Select_PMDefectNoteDetail_ReportRowChangeEventHandler STP_Select_PMDefectNoteDetail_ReportRowChanged;
            
            public event STP_Select_PMDefectNoteDetail_ReportRowChangeEventHandler STP_Select_PMDefectNoteDetail_ReportRowDeleting;
            
            public event STP_Select_PMDefectNoteDetail_ReportRowChangeEventHandler STP_Select_PMDefectNoteDetail_ReportRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddSTP_Select_PMDefectNoteDetail_ReportRow(STP_Select_PMDefectNoteDetail_ReportRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public STP_Select_PMDefectNoteDetail_ReportRow AddSTP_Select_PMDefectNoteDetail_ReportRow(
                        string PMCode, 
                        string PMSupplierName, 
                        string PlantLotNo, 
                        long PMTransID, 
                        string PMDescription, 
                        System.DateTime AcceptedDate, 
                        string COCApplicable, 
                        string Status, 
                        string ActualStatus, 
                        string RejectComment, 
                        string DefectComment, 
                        string DefectQuantity, 
                        string ActionTaken, 
                        string QualityDecision, 
                        string DefectStatus, 
                        System.DateTime InspDate) {
                STP_Select_PMDefectNoteDetail_ReportRow rowSTP_Select_PMDefectNoteDetail_ReportRow = ((STP_Select_PMDefectNoteDetail_ReportRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        PMCode,
                        null,
                        PMSupplierName,
                        null,
                        PlantLotNo,
                        PMTransID,
                        PMDescription,
                        AcceptedDate,
                        COCApplicable,
                        null,
                        null,
                        Status,
                        ActualStatus,
                        RejectComment,
                        DefectComment,
                        DefectQuantity,
                        ActionTaken,
                        QualityDecision,
                        DefectStatus,
                        InspDate};
                rowSTP_Select_PMDefectNoteDetail_ReportRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowSTP_Select_PMDefectNoteDetail_ReportRow);
                return rowSTP_Select_PMDefectNoteDetail_ReportRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                STP_Select_PMDefectNoteDetail_ReportDataTable cln = ((STP_Select_PMDefectNoteDetail_ReportDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new STP_Select_PMDefectNoteDetail_ReportDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnPMCode = base.Columns["PMCode"];
                this.columnPMCodeID = base.Columns["PMCodeID"];
                this.columnPMSupplierName = base.Columns["PMSupplierName"];
                this.columnPMSupplierID = base.Columns["PMSupplierID"];
                this.columnPlantLotNo = base.Columns["PlantLotNo"];
                this.columnPMTransID = base.Columns["PMTransID"];
                this.columnPMDescription = base.Columns["PMDescription"];
                this.columnAcceptedDate = base.Columns["AcceptedDate"];
                this.columnCOCApplicable = base.Columns["COCApplicable"];
                this.columnPMTestID = base.Columns["PMTestID"];
                this.columnPMChangeID = base.Columns["PMChangeID"];
                this.columnStatus = base.Columns["Status"];
                this.columnActualStatus = base.Columns["ActualStatus"];
                this.columnRejectComment = base.Columns["RejectComment"];
                this.columnDefectComment = base.Columns["DefectComment"];
                this.columnDefectQuantity = base.Columns["DefectQuantity"];
                this.columnActionTaken = base.Columns["ActionTaken"];
                this.columnQualityDecision = base.Columns["QualityDecision"];
                this.columnDefectStatus = base.Columns["DefectStatus"];
                this.columnInspDate = base.Columns["InspDate"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnPMCode = new global::System.Data.DataColumn("PMCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPMCode);
                this.columnPMCodeID = new global::System.Data.DataColumn("PMCodeID", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPMCodeID);
                this.columnPMSupplierName = new global::System.Data.DataColumn("PMSupplierName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPMSupplierName);
                this.columnPMSupplierID = new global::System.Data.DataColumn("PMSupplierID", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPMSupplierID);
                this.columnPlantLotNo = new global::System.Data.DataColumn("PlantLotNo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPlantLotNo);
                this.columnPMTransID = new global::System.Data.DataColumn("PMTransID", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPMTransID);
                this.columnPMDescription = new global::System.Data.DataColumn("PMDescription", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPMDescription);
                this.columnAcceptedDate = new global::System.Data.DataColumn("AcceptedDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAcceptedDate);
                this.columnCOCApplicable = new global::System.Data.DataColumn("COCApplicable", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCOCApplicable);
                this.columnPMTestID = new global::System.Data.DataColumn("PMTestID", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPMTestID);
                this.columnPMChangeID = new global::System.Data.DataColumn("PMChangeID", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPMChangeID);
                this.columnStatus = new global::System.Data.DataColumn("Status", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStatus);
                this.columnActualStatus = new global::System.Data.DataColumn("ActualStatus", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnActualStatus);
                this.columnRejectComment = new global::System.Data.DataColumn("RejectComment", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRejectComment);
                this.columnDefectComment = new global::System.Data.DataColumn("DefectComment", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDefectComment);
                this.columnDefectQuantity = new global::System.Data.DataColumn("DefectQuantity", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDefectQuantity);
                this.columnActionTaken = new global::System.Data.DataColumn("ActionTaken", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnActionTaken);
                this.columnQualityDecision = new global::System.Data.DataColumn("QualityDecision", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnQualityDecision);
                this.columnDefectStatus = new global::System.Data.DataColumn("DefectStatus", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDefectStatus);
                this.columnInspDate = new global::System.Data.DataColumn("InspDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInspDate);
                this.columnPMCode.MaxLength = 50;
                this.columnPMCodeID.AutoIncrement = true;
                this.columnPMCodeID.AllowDBNull = false;
                this.columnPMCodeID.ReadOnly = true;
                this.columnPMSupplierName.MaxLength = 200;
                this.columnPMSupplierID.AutoIncrement = true;
                this.columnPMSupplierID.AllowDBNull = false;
                this.columnPMSupplierID.ReadOnly = true;
                this.columnPlantLotNo.MaxLength = 50;
                this.columnPMDescription.MaxLength = 200;
                this.columnCOCApplicable.MaxLength = 1;
                this.columnPMTestID.AutoIncrement = true;
                this.columnPMTestID.AllowDBNull = false;
                this.columnPMTestID.ReadOnly = true;
                this.columnPMChangeID.AutoIncrement = true;
                this.columnPMChangeID.AllowDBNull = false;
                this.columnPMChangeID.ReadOnly = true;
                this.columnStatus.MaxLength = 1;
                this.columnActualStatus.MaxLength = 1;
                this.columnRejectComment.MaxLength = 200;
                this.columnDefectComment.MaxLength = 50;
                this.columnDefectQuantity.MaxLength = 50;
                this.columnActionTaken.MaxLength = 1;
                this.columnQualityDecision.MaxLength = 50;
                this.columnDefectStatus.MaxLength = 1;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public STP_Select_PMDefectNoteDetail_ReportRow NewSTP_Select_PMDefectNoteDetail_ReportRow() {
                return ((STP_Select_PMDefectNoteDetail_ReportRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new STP_Select_PMDefectNoteDetail_ReportRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(STP_Select_PMDefectNoteDetail_ReportRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.STP_Select_PMDefectNoteDetail_ReportRowChanged != null)) {
                    this.STP_Select_PMDefectNoteDetail_ReportRowChanged(this, new STP_Select_PMDefectNoteDetail_ReportRowChangeEvent(((STP_Select_PMDefectNoteDetail_ReportRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.STP_Select_PMDefectNoteDetail_ReportRowChanging != null)) {
                    this.STP_Select_PMDefectNoteDetail_ReportRowChanging(this, new STP_Select_PMDefectNoteDetail_ReportRowChangeEvent(((STP_Select_PMDefectNoteDetail_ReportRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.STP_Select_PMDefectNoteDetail_ReportRowDeleted != null)) {
                    this.STP_Select_PMDefectNoteDetail_ReportRowDeleted(this, new STP_Select_PMDefectNoteDetail_ReportRowChangeEvent(((STP_Select_PMDefectNoteDetail_ReportRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.STP_Select_PMDefectNoteDetail_ReportRowDeleting != null)) {
                    this.STP_Select_PMDefectNoteDetail_ReportRowDeleting(this, new STP_Select_PMDefectNoteDetail_ReportRowChangeEvent(((STP_Select_PMDefectNoteDetail_ReportRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveSTP_Select_PMDefectNoteDetail_ReportRow(STP_Select_PMDefectNoteDetail_ReportRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                dsPMDefectNoteDetails_Report ds = new dsPMDefectNoteDetails_Report();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "STP_Select_PMDefectNoteDetail_ReportDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class STP_Select_PMDefectNoteDetail_ReportRow : global::System.Data.DataRow {
            
            private STP_Select_PMDefectNoteDetail_ReportDataTable tableSTP_Select_PMDefectNoteDetail_Report;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal STP_Select_PMDefectNoteDetail_ReportRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableSTP_Select_PMDefectNoteDetail_Report = ((STP_Select_PMDefectNoteDetail_ReportDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PMCode {
                get {
                    try {
                        return ((string)(this[this.tableSTP_Select_PMDefectNoteDetail_Report.PMCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PMCode\' in table \'STP_Select_PMDefectNoteDetail_Report\' is " +
                                "DBNull.", e);
                    }
                }
                set {
                    this[this.tableSTP_Select_PMDefectNoteDetail_Report.PMCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long PMCodeID {
                get {
                    return ((long)(this[this.tableSTP_Select_PMDefectNoteDetail_Report.PMCodeIDColumn]));
                }
                set {
                    this[this.tableSTP_Select_PMDefectNoteDetail_Report.PMCodeIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PMSupplierName {
                get {
                    try {
                        return ((string)(this[this.tableSTP_Select_PMDefectNoteDetail_Report.PMSupplierNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PMSupplierName\' in table \'STP_Select_PMDefectNoteDetail_Rep" +
                                "ort\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSTP_Select_PMDefectNoteDetail_Report.PMSupplierNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long PMSupplierID {
                get {
                    return ((long)(this[this.tableSTP_Select_PMDefectNoteDetail_Report.PMSupplierIDColumn]));
                }
                set {
                    this[this.tableSTP_Select_PMDefectNoteDetail_Report.PMSupplierIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PlantLotNo {
                get {
                    try {
                        return ((string)(this[this.tableSTP_Select_PMDefectNoteDetail_Report.PlantLotNoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PlantLotNo\' in table \'STP_Select_PMDefectNoteDetail_Report\'" +
                                " is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSTP_Select_PMDefectNoteDetail_Report.PlantLotNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long PMTransID {
                get {
                    try {
                        return ((long)(this[this.tableSTP_Select_PMDefectNoteDetail_Report.PMTransIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PMTransID\' in table \'STP_Select_PMDefectNoteDetail_Report\' " +
                                "is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSTP_Select_PMDefectNoteDetail_Report.PMTransIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PMDescription {
                get {
                    try {
                        return ((string)(this[this.tableSTP_Select_PMDefectNoteDetail_Report.PMDescriptionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PMDescription\' in table \'STP_Select_PMDefectNoteDetail_Repo" +
                                "rt\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSTP_Select_PMDefectNoteDetail_Report.PMDescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime AcceptedDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableSTP_Select_PMDefectNoteDetail_Report.AcceptedDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AcceptedDate\' in table \'STP_Select_PMDefectNoteDetail_Repor" +
                                "t\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSTP_Select_PMDefectNoteDetail_Report.AcceptedDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string COCApplicable {
                get {
                    try {
                        return ((string)(this[this.tableSTP_Select_PMDefectNoteDetail_Report.COCApplicableColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'COCApplicable\' in table \'STP_Select_PMDefectNoteDetail_Repo" +
                                "rt\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSTP_Select_PMDefectNoteDetail_Report.COCApplicableColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long PMTestID {
                get {
                    return ((long)(this[this.tableSTP_Select_PMDefectNoteDetail_Report.PMTestIDColumn]));
                }
                set {
                    this[this.tableSTP_Select_PMDefectNoteDetail_Report.PMTestIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long PMChangeID {
                get {
                    return ((long)(this[this.tableSTP_Select_PMDefectNoteDetail_Report.PMChangeIDColumn]));
                }
                set {
                    this[this.tableSTP_Select_PMDefectNoteDetail_Report.PMChangeIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Status {
                get {
                    try {
                        return ((string)(this[this.tableSTP_Select_PMDefectNoteDetail_Report.StatusColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Status\' in table \'STP_Select_PMDefectNoteDetail_Report\' is " +
                                "DBNull.", e);
                    }
                }
                set {
                    this[this.tableSTP_Select_PMDefectNoteDetail_Report.StatusColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ActualStatus {
                get {
                    try {
                        return ((string)(this[this.tableSTP_Select_PMDefectNoteDetail_Report.ActualStatusColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ActualStatus\' in table \'STP_Select_PMDefectNoteDetail_Repor" +
                                "t\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSTP_Select_PMDefectNoteDetail_Report.ActualStatusColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string RejectComment {
                get {
                    try {
                        return ((string)(this[this.tableSTP_Select_PMDefectNoteDetail_Report.RejectCommentColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RejectComment\' in table \'STP_Select_PMDefectNoteDetail_Repo" +
                                "rt\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSTP_Select_PMDefectNoteDetail_Report.RejectCommentColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DefectComment {
                get {
                    try {
                        return ((string)(this[this.tableSTP_Select_PMDefectNoteDetail_Report.DefectCommentColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DefectComment\' in table \'STP_Select_PMDefectNoteDetail_Repo" +
                                "rt\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSTP_Select_PMDefectNoteDetail_Report.DefectCommentColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DefectQuantity {
                get {
                    try {
                        return ((string)(this[this.tableSTP_Select_PMDefectNoteDetail_Report.DefectQuantityColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DefectQuantity\' in table \'STP_Select_PMDefectNoteDetail_Rep" +
                                "ort\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSTP_Select_PMDefectNoteDetail_Report.DefectQuantityColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ActionTaken {
                get {
                    try {
                        return ((string)(this[this.tableSTP_Select_PMDefectNoteDetail_Report.ActionTakenColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ActionTaken\' in table \'STP_Select_PMDefectNoteDetail_Report" +
                                "\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSTP_Select_PMDefectNoteDetail_Report.ActionTakenColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string QualityDecision {
                get {
                    try {
                        return ((string)(this[this.tableSTP_Select_PMDefectNoteDetail_Report.QualityDecisionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'QualityDecision\' in table \'STP_Select_PMDefectNoteDetail_Re" +
                                "port\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSTP_Select_PMDefectNoteDetail_Report.QualityDecisionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DefectStatus {
                get {
                    try {
                        return ((string)(this[this.tableSTP_Select_PMDefectNoteDetail_Report.DefectStatusColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DefectStatus\' in table \'STP_Select_PMDefectNoteDetail_Repor" +
                                "t\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSTP_Select_PMDefectNoteDetail_Report.DefectStatusColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime InspDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableSTP_Select_PMDefectNoteDetail_Report.InspDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InspDate\' in table \'STP_Select_PMDefectNoteDetail_Report\' i" +
                                "s DBNull.", e);
                    }
                }
                set {
                    this[this.tableSTP_Select_PMDefectNoteDetail_Report.InspDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPMCodeNull() {
                return this.IsNull(this.tableSTP_Select_PMDefectNoteDetail_Report.PMCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPMCodeNull() {
                this[this.tableSTP_Select_PMDefectNoteDetail_Report.PMCodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPMSupplierNameNull() {
                return this.IsNull(this.tableSTP_Select_PMDefectNoteDetail_Report.PMSupplierNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPMSupplierNameNull() {
                this[this.tableSTP_Select_PMDefectNoteDetail_Report.PMSupplierNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPlantLotNoNull() {
                return this.IsNull(this.tableSTP_Select_PMDefectNoteDetail_Report.PlantLotNoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPlantLotNoNull() {
                this[this.tableSTP_Select_PMDefectNoteDetail_Report.PlantLotNoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPMTransIDNull() {
                return this.IsNull(this.tableSTP_Select_PMDefectNoteDetail_Report.PMTransIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPMTransIDNull() {
                this[this.tableSTP_Select_PMDefectNoteDetail_Report.PMTransIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPMDescriptionNull() {
                return this.IsNull(this.tableSTP_Select_PMDefectNoteDetail_Report.PMDescriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPMDescriptionNull() {
                this[this.tableSTP_Select_PMDefectNoteDetail_Report.PMDescriptionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAcceptedDateNull() {
                return this.IsNull(this.tableSTP_Select_PMDefectNoteDetail_Report.AcceptedDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAcceptedDateNull() {
                this[this.tableSTP_Select_PMDefectNoteDetail_Report.AcceptedDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCOCApplicableNull() {
                return this.IsNull(this.tableSTP_Select_PMDefectNoteDetail_Report.COCApplicableColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCOCApplicableNull() {
                this[this.tableSTP_Select_PMDefectNoteDetail_Report.COCApplicableColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStatusNull() {
                return this.IsNull(this.tableSTP_Select_PMDefectNoteDetail_Report.StatusColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStatusNull() {
                this[this.tableSTP_Select_PMDefectNoteDetail_Report.StatusColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsActualStatusNull() {
                return this.IsNull(this.tableSTP_Select_PMDefectNoteDetail_Report.ActualStatusColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetActualStatusNull() {
                this[this.tableSTP_Select_PMDefectNoteDetail_Report.ActualStatusColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRejectCommentNull() {
                return this.IsNull(this.tableSTP_Select_PMDefectNoteDetail_Report.RejectCommentColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRejectCommentNull() {
                this[this.tableSTP_Select_PMDefectNoteDetail_Report.RejectCommentColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDefectCommentNull() {
                return this.IsNull(this.tableSTP_Select_PMDefectNoteDetail_Report.DefectCommentColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDefectCommentNull() {
                this[this.tableSTP_Select_PMDefectNoteDetail_Report.DefectCommentColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDefectQuantityNull() {
                return this.IsNull(this.tableSTP_Select_PMDefectNoteDetail_Report.DefectQuantityColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDefectQuantityNull() {
                this[this.tableSTP_Select_PMDefectNoteDetail_Report.DefectQuantityColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsActionTakenNull() {
                return this.IsNull(this.tableSTP_Select_PMDefectNoteDetail_Report.ActionTakenColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetActionTakenNull() {
                this[this.tableSTP_Select_PMDefectNoteDetail_Report.ActionTakenColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsQualityDecisionNull() {
                return this.IsNull(this.tableSTP_Select_PMDefectNoteDetail_Report.QualityDecisionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetQualityDecisionNull() {
                this[this.tableSTP_Select_PMDefectNoteDetail_Report.QualityDecisionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDefectStatusNull() {
                return this.IsNull(this.tableSTP_Select_PMDefectNoteDetail_Report.DefectStatusColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDefectStatusNull() {
                this[this.tableSTP_Select_PMDefectNoteDetail_Report.DefectStatusColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInspDateNull() {
                return this.IsNull(this.tableSTP_Select_PMDefectNoteDetail_Report.InspDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInspDateNull() {
                this[this.tableSTP_Select_PMDefectNoteDetail_Report.InspDateColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class STP_Select_PMDefectNoteDetail_ReportRowChangeEvent : global::System.EventArgs {
            
            private STP_Select_PMDefectNoteDetail_ReportRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public STP_Select_PMDefectNoteDetail_ReportRowChangeEvent(STP_Select_PMDefectNoteDetail_ReportRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public STP_Select_PMDefectNoteDetail_ReportRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
namespace QTMS.Reports.dsPMDefectNoteDetails_ReportTableAdapters {
    
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class STP_Select_PMDefectNoteDetail_ReportTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public STP_Select_PMDefectNoteDetail_ReportTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "STP_Select_PMDefectNoteDetail_Report";
            tableMapping.ColumnMappings.Add("PMCode", "PMCode");
            tableMapping.ColumnMappings.Add("PMCodeID", "PMCodeID");
            tableMapping.ColumnMappings.Add("PMSupplierName", "PMSupplierName");
            tableMapping.ColumnMappings.Add("PMSupplierID", "PMSupplierID");
            tableMapping.ColumnMappings.Add("PlantLotNo", "PlantLotNo");
            tableMapping.ColumnMappings.Add("PMTransID", "PMTransID");
            tableMapping.ColumnMappings.Add("PMDescription", "PMDescription");
            tableMapping.ColumnMappings.Add("AcceptedDate", "AcceptedDate");
            tableMapping.ColumnMappings.Add("COCApplicable", "COCApplicable");
            tableMapping.ColumnMappings.Add("PMTestID", "PMTestID");
            tableMapping.ColumnMappings.Add("PMChangeID", "PMChangeID");
            tableMapping.ColumnMappings.Add("Status", "Status");
            tableMapping.ColumnMappings.Add("ActualStatus", "ActualStatus");
            tableMapping.ColumnMappings.Add("RejectComment", "RejectComment");
            tableMapping.ColumnMappings.Add("DefectComment", "DefectComment");
            tableMapping.ColumnMappings.Add("DefectQuantity", "DefectQuantity");
            tableMapping.ColumnMappings.Add("ActionTaken", "ActionTaken");
            tableMapping.ColumnMappings.Add("QualityDecision", "QualityDecision");
            tableMapping.ColumnMappings.Add("DefectStatus", "DefectStatus");
            tableMapping.ColumnMappings.Add("InspDate", "InspDate");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::QTMS.Properties.Settings.Default.QTMS2ConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "dbo.STP_Select_PMDefectNoteDetail_Report";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.StoredProcedure;
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RETURN_VALUE", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.ReturnValue, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FromDate", global::System.Data.SqlDbType.VarChar, 50, global::System.Data.ParameterDirection.Input, 0, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ToDate", global::System.Data.SqlDbType.VarChar, 50, global::System.Data.ParameterDirection.Input, 0, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(dsPMDefectNoteDetails_Report.STP_Select_PMDefectNoteDetail_ReportDataTable dataTable, string FromDate, string ToDate) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((FromDate == null)) {
                this.Adapter.SelectCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = ((string)(FromDate));
            }
            if ((ToDate == null)) {
                this.Adapter.SelectCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[2].Value = ((string)(ToDate));
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual dsPMDefectNoteDetails_Report.STP_Select_PMDefectNoteDetail_ReportDataTable GetData(string FromDate, string ToDate) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((FromDate == null)) {
                this.Adapter.SelectCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = ((string)(FromDate));
            }
            if ((ToDate == null)) {
                this.Adapter.SelectCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[2].Value = ((string)(ToDate));
            }
            dsPMDefectNoteDetails_Report.STP_Select_PMDefectNoteDetail_ReportDataTable dataTable = new dsPMDefectNoteDetails_Report.STP_Select_PMDefectNoteDetail_ReportDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
}

#pragma warning restore 1591