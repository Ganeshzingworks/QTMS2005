//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.8009
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace QTMS.Reports {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("dsPhysicoChemicalWaterAnalysis")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class dsPhysicoChemicalWaterAnalysis : global::System.Data.DataSet {
        
        private STP_Select_tblPhysicoChemicalWaterAnalysis_ReportDataTable tableSTP_Select_tblPhysicoChemicalWaterAnalysis_Report;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public dsPhysicoChemicalWaterAnalysis() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected dsPhysicoChemicalWaterAnalysis(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["STP_Select_tblPhysicoChemicalWaterAnalysis_Report"] != null)) {
                    base.Tables.Add(new STP_Select_tblPhysicoChemicalWaterAnalysis_ReportDataTable(ds.Tables["STP_Select_tblPhysicoChemicalWaterAnalysis_Report"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public STP_Select_tblPhysicoChemicalWaterAnalysis_ReportDataTable STP_Select_tblPhysicoChemicalWaterAnalysis_Report {
            get {
                return this.tableSTP_Select_tblPhysicoChemicalWaterAnalysis_Report;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            dsPhysicoChemicalWaterAnalysis cln = ((dsPhysicoChemicalWaterAnalysis)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["STP_Select_tblPhysicoChemicalWaterAnalysis_Report"] != null)) {
                    base.Tables.Add(new STP_Select_tblPhysicoChemicalWaterAnalysis_ReportDataTable(ds.Tables["STP_Select_tblPhysicoChemicalWaterAnalysis_Report"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableSTP_Select_tblPhysicoChemicalWaterAnalysis_Report = ((STP_Select_tblPhysicoChemicalWaterAnalysis_ReportDataTable)(base.Tables["STP_Select_tblPhysicoChemicalWaterAnalysis_Report"]));
            if ((initTable == true)) {
                if ((this.tableSTP_Select_tblPhysicoChemicalWaterAnalysis_Report != null)) {
                    this.tableSTP_Select_tblPhysicoChemicalWaterAnalysis_Report.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "dsPhysicoChemicalWaterAnalysis";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/dsPhysicoChemicalWaterAnalysis.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableSTP_Select_tblPhysicoChemicalWaterAnalysis_Report = new STP_Select_tblPhysicoChemicalWaterAnalysis_ReportDataTable();
            base.Tables.Add(this.tableSTP_Select_tblPhysicoChemicalWaterAnalysis_Report);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeSTP_Select_tblPhysicoChemicalWaterAnalysis_Report() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            dsPhysicoChemicalWaterAnalysis ds = new dsPhysicoChemicalWaterAnalysis();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void STP_Select_tblPhysicoChemicalWaterAnalysis_ReportRowChangeEventHandler(object sender, STP_Select_tblPhysicoChemicalWaterAnalysis_ReportRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class STP_Select_tblPhysicoChemicalWaterAnalysis_ReportDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnPhyChemWA;
            
            private global::System.Data.DataColumn columnDateOfSampling;
            
            private global::System.Data.DataColumn columnPHNorms;
            
            private global::System.Data.DataColumn columnPHResult;
            
            private global::System.Data.DataColumn columnConductivity;
            
            private global::System.Data.DataColumn columnConductivityResult;
            
            private global::System.Data.DataColumn columnAspectNorms;
            
            private global::System.Data.DataColumn columnAspectResult;
            
            private global::System.Data.DataColumn columnOdorNorms;
            
            private global::System.Data.DataColumn columnOdorResult;
            
            private global::System.Data.DataColumn columnColorNorms;
            
            private global::System.Data.DataColumn columnColorResult;
            
            private global::System.Data.DataColumn columnStatus;
            
            private global::System.Data.DataColumn columnComment;
            
            private global::System.Data.DataColumn columnInspectedBy;
            
            private global::System.Data.DataColumn columnLoginID;
            
            private global::System.Data.DataColumn columnUserName;
            
            private global::System.Data.DataColumn columnPlant;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public STP_Select_tblPhysicoChemicalWaterAnalysis_ReportDataTable() {
                this.TableName = "STP_Select_tblPhysicoChemicalWaterAnalysis_Report";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal STP_Select_tblPhysicoChemicalWaterAnalysis_ReportDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected STP_Select_tblPhysicoChemicalWaterAnalysis_ReportDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PhyChemWAColumn {
                get {
                    return this.columnPhyChemWA;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DateOfSamplingColumn {
                get {
                    return this.columnDateOfSampling;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PHNormsColumn {
                get {
                    return this.columnPHNorms;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PHResultColumn {
                get {
                    return this.columnPHResult;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ConductivityColumn {
                get {
                    return this.columnConductivity;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ConductivityResultColumn {
                get {
                    return this.columnConductivityResult;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AspectNormsColumn {
                get {
                    return this.columnAspectNorms;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AspectResultColumn {
                get {
                    return this.columnAspectResult;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OdorNormsColumn {
                get {
                    return this.columnOdorNorms;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OdorResultColumn {
                get {
                    return this.columnOdorResult;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ColorNormsColumn {
                get {
                    return this.columnColorNorms;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ColorResultColumn {
                get {
                    return this.columnColorResult;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StatusColumn {
                get {
                    return this.columnStatus;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CommentColumn {
                get {
                    return this.columnComment;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InspectedByColumn {
                get {
                    return this.columnInspectedBy;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LoginIDColumn {
                get {
                    return this.columnLoginID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UserNameColumn {
                get {
                    return this.columnUserName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PlantColumn {
                get {
                    return this.columnPlant;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public STP_Select_tblPhysicoChemicalWaterAnalysis_ReportRow this[int index] {
                get {
                    return ((STP_Select_tblPhysicoChemicalWaterAnalysis_ReportRow)(this.Rows[index]));
                }
            }
            
            public event STP_Select_tblPhysicoChemicalWaterAnalysis_ReportRowChangeEventHandler STP_Select_tblPhysicoChemicalWaterAnalysis_ReportRowChanging;
            
            public event STP_Select_tblPhysicoChemicalWaterAnalysis_ReportRowChangeEventHandler STP_Select_tblPhysicoChemicalWaterAnalysis_ReportRowChanged;
            
            public event STP_Select_tblPhysicoChemicalWaterAnalysis_ReportRowChangeEventHandler STP_Select_tblPhysicoChemicalWaterAnalysis_ReportRowDeleting;
            
            public event STP_Select_tblPhysicoChemicalWaterAnalysis_ReportRowChangeEventHandler STP_Select_tblPhysicoChemicalWaterAnalysis_ReportRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddSTP_Select_tblPhysicoChemicalWaterAnalysis_ReportRow(STP_Select_tblPhysicoChemicalWaterAnalysis_ReportRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public STP_Select_tblPhysicoChemicalWaterAnalysis_ReportRow AddSTP_Select_tblPhysicoChemicalWaterAnalysis_ReportRow(
                        System.DateTime DateOfSampling, 
                        string PHNorms, 
                        string PHResult, 
                        string Conductivity, 
                        string ConductivityResult, 
                        string AspectNorms, 
                        string AspectResult, 
                        string OdorNorms, 
                        string OdorResult, 
                        string ColorNorms, 
                        string ColorResult, 
                        string Status, 
                        string Comment, 
                        int InspectedBy, 
                        int LoginID, 
                        string UserName, 
                        string Plant) {
                STP_Select_tblPhysicoChemicalWaterAnalysis_ReportRow rowSTP_Select_tblPhysicoChemicalWaterAnalysis_ReportRow = ((STP_Select_tblPhysicoChemicalWaterAnalysis_ReportRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        DateOfSampling,
                        PHNorms,
                        PHResult,
                        Conductivity,
                        ConductivityResult,
                        AspectNorms,
                        AspectResult,
                        OdorNorms,
                        OdorResult,
                        ColorNorms,
                        ColorResult,
                        Status,
                        Comment,
                        InspectedBy,
                        LoginID,
                        UserName,
                        Plant};
                rowSTP_Select_tblPhysicoChemicalWaterAnalysis_ReportRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowSTP_Select_tblPhysicoChemicalWaterAnalysis_ReportRow);
                return rowSTP_Select_tblPhysicoChemicalWaterAnalysis_ReportRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public STP_Select_tblPhysicoChemicalWaterAnalysis_ReportRow FindByPhyChemWA(long PhyChemWA) {
                return ((STP_Select_tblPhysicoChemicalWaterAnalysis_ReportRow)(this.Rows.Find(new object[] {
                            PhyChemWA})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                STP_Select_tblPhysicoChemicalWaterAnalysis_ReportDataTable cln = ((STP_Select_tblPhysicoChemicalWaterAnalysis_ReportDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new STP_Select_tblPhysicoChemicalWaterAnalysis_ReportDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnPhyChemWA = base.Columns["PhyChemWA"];
                this.columnDateOfSampling = base.Columns["DateOfSampling"];
                this.columnPHNorms = base.Columns["PHNorms"];
                this.columnPHResult = base.Columns["PHResult"];
                this.columnConductivity = base.Columns["Conductivity"];
                this.columnConductivityResult = base.Columns["ConductivityResult"];
                this.columnAspectNorms = base.Columns["AspectNorms"];
                this.columnAspectResult = base.Columns["AspectResult"];
                this.columnOdorNorms = base.Columns["OdorNorms"];
                this.columnOdorResult = base.Columns["OdorResult"];
                this.columnColorNorms = base.Columns["ColorNorms"];
                this.columnColorResult = base.Columns["ColorResult"];
                this.columnStatus = base.Columns["Status"];
                this.columnComment = base.Columns["Comment"];
                this.columnInspectedBy = base.Columns["InspectedBy"];
                this.columnLoginID = base.Columns["LoginID"];
                this.columnUserName = base.Columns["UserName"];
                this.columnPlant = base.Columns["Plant"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnPhyChemWA = new global::System.Data.DataColumn("PhyChemWA", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPhyChemWA);
                this.columnDateOfSampling = new global::System.Data.DataColumn("DateOfSampling", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDateOfSampling);
                this.columnPHNorms = new global::System.Data.DataColumn("PHNorms", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPHNorms);
                this.columnPHResult = new global::System.Data.DataColumn("PHResult", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPHResult);
                this.columnConductivity = new global::System.Data.DataColumn("Conductivity", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnConductivity);
                this.columnConductivityResult = new global::System.Data.DataColumn("ConductivityResult", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnConductivityResult);
                this.columnAspectNorms = new global::System.Data.DataColumn("AspectNorms", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAspectNorms);
                this.columnAspectResult = new global::System.Data.DataColumn("AspectResult", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAspectResult);
                this.columnOdorNorms = new global::System.Data.DataColumn("OdorNorms", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOdorNorms);
                this.columnOdorResult = new global::System.Data.DataColumn("OdorResult", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOdorResult);
                this.columnColorNorms = new global::System.Data.DataColumn("ColorNorms", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnColorNorms);
                this.columnColorResult = new global::System.Data.DataColumn("ColorResult", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnColorResult);
                this.columnStatus = new global::System.Data.DataColumn("Status", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStatus);
                this.columnComment = new global::System.Data.DataColumn("Comment", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnComment);
                this.columnInspectedBy = new global::System.Data.DataColumn("InspectedBy", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInspectedBy);
                this.columnLoginID = new global::System.Data.DataColumn("LoginID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLoginID);
                this.columnUserName = new global::System.Data.DataColumn("UserName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUserName);
                this.columnPlant = new global::System.Data.DataColumn("Plant", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPlant);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnPhyChemWA}, true));
                this.columnPhyChemWA.AutoIncrement = true;
                this.columnPhyChemWA.AllowDBNull = false;
                this.columnPhyChemWA.ReadOnly = true;
                this.columnPhyChemWA.Unique = true;
                this.columnPHNorms.MaxLength = 50;
                this.columnPHResult.MaxLength = 50;
                this.columnConductivity.MaxLength = 50;
                this.columnConductivityResult.MaxLength = 50;
                this.columnAspectNorms.MaxLength = 50;
                this.columnAspectResult.MaxLength = 50;
                this.columnOdorNorms.MaxLength = 50;
                this.columnOdorResult.MaxLength = 50;
                this.columnColorNorms.MaxLength = 50;
                this.columnColorResult.MaxLength = 50;
                this.columnStatus.MaxLength = 1;
                this.columnComment.MaxLength = 250;
                this.columnUserName.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public STP_Select_tblPhysicoChemicalWaterAnalysis_ReportRow NewSTP_Select_tblPhysicoChemicalWaterAnalysis_ReportRow() {
                return ((STP_Select_tblPhysicoChemicalWaterAnalysis_ReportRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new STP_Select_tblPhysicoChemicalWaterAnalysis_ReportRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(STP_Select_tblPhysicoChemicalWaterAnalysis_ReportRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.STP_Select_tblPhysicoChemicalWaterAnalysis_ReportRowChanged != null)) {
                    this.STP_Select_tblPhysicoChemicalWaterAnalysis_ReportRowChanged(this, new STP_Select_tblPhysicoChemicalWaterAnalysis_ReportRowChangeEvent(((STP_Select_tblPhysicoChemicalWaterAnalysis_ReportRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.STP_Select_tblPhysicoChemicalWaterAnalysis_ReportRowChanging != null)) {
                    this.STP_Select_tblPhysicoChemicalWaterAnalysis_ReportRowChanging(this, new STP_Select_tblPhysicoChemicalWaterAnalysis_ReportRowChangeEvent(((STP_Select_tblPhysicoChemicalWaterAnalysis_ReportRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.STP_Select_tblPhysicoChemicalWaterAnalysis_ReportRowDeleted != null)) {
                    this.STP_Select_tblPhysicoChemicalWaterAnalysis_ReportRowDeleted(this, new STP_Select_tblPhysicoChemicalWaterAnalysis_ReportRowChangeEvent(((STP_Select_tblPhysicoChemicalWaterAnalysis_ReportRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.STP_Select_tblPhysicoChemicalWaterAnalysis_ReportRowDeleting != null)) {
                    this.STP_Select_tblPhysicoChemicalWaterAnalysis_ReportRowDeleting(this, new STP_Select_tblPhysicoChemicalWaterAnalysis_ReportRowChangeEvent(((STP_Select_tblPhysicoChemicalWaterAnalysis_ReportRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveSTP_Select_tblPhysicoChemicalWaterAnalysis_ReportRow(STP_Select_tblPhysicoChemicalWaterAnalysis_ReportRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                dsPhysicoChemicalWaterAnalysis ds = new dsPhysicoChemicalWaterAnalysis();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "STP_Select_tblPhysicoChemicalWaterAnalysis_ReportDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class STP_Select_tblPhysicoChemicalWaterAnalysis_ReportRow : global::System.Data.DataRow {
            
            private STP_Select_tblPhysicoChemicalWaterAnalysis_ReportDataTable tableSTP_Select_tblPhysicoChemicalWaterAnalysis_Report;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal STP_Select_tblPhysicoChemicalWaterAnalysis_ReportRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableSTP_Select_tblPhysicoChemicalWaterAnalysis_Report = ((STP_Select_tblPhysicoChemicalWaterAnalysis_ReportDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long PhyChemWA {
                get {
                    return ((long)(this[this.tableSTP_Select_tblPhysicoChemicalWaterAnalysis_Report.PhyChemWAColumn]));
                }
                set {
                    this[this.tableSTP_Select_tblPhysicoChemicalWaterAnalysis_Report.PhyChemWAColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime DateOfSampling {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableSTP_Select_tblPhysicoChemicalWaterAnalysis_Report.DateOfSamplingColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DateOfSampling\' in table \'STP_Select_tblPhysicoChemicalWate" +
                                "rAnalysis_Report\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSTP_Select_tblPhysicoChemicalWaterAnalysis_Report.DateOfSamplingColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PHNorms {
                get {
                    try {
                        return ((string)(this[this.tableSTP_Select_tblPhysicoChemicalWaterAnalysis_Report.PHNormsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PHNorms\' in table \'STP_Select_tblPhysicoChemicalWaterAnalys" +
                                "is_Report\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSTP_Select_tblPhysicoChemicalWaterAnalysis_Report.PHNormsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PHResult {
                get {
                    try {
                        return ((string)(this[this.tableSTP_Select_tblPhysicoChemicalWaterAnalysis_Report.PHResultColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PHResult\' in table \'STP_Select_tblPhysicoChemicalWaterAnaly" +
                                "sis_Report\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSTP_Select_tblPhysicoChemicalWaterAnalysis_Report.PHResultColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Conductivity {
                get {
                    try {
                        return ((string)(this[this.tableSTP_Select_tblPhysicoChemicalWaterAnalysis_Report.ConductivityColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Conductivity\' in table \'STP_Select_tblPhysicoChemicalWaterA" +
                                "nalysis_Report\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSTP_Select_tblPhysicoChemicalWaterAnalysis_Report.ConductivityColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ConductivityResult {
                get {
                    try {
                        return ((string)(this[this.tableSTP_Select_tblPhysicoChemicalWaterAnalysis_Report.ConductivityResultColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ConductivityResult\' in table \'STP_Select_tblPhysicoChemical" +
                                "WaterAnalysis_Report\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSTP_Select_tblPhysicoChemicalWaterAnalysis_Report.ConductivityResultColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AspectNorms {
                get {
                    try {
                        return ((string)(this[this.tableSTP_Select_tblPhysicoChemicalWaterAnalysis_Report.AspectNormsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AspectNorms\' in table \'STP_Select_tblPhysicoChemicalWaterAn" +
                                "alysis_Report\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSTP_Select_tblPhysicoChemicalWaterAnalysis_Report.AspectNormsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AspectResult {
                get {
                    try {
                        return ((string)(this[this.tableSTP_Select_tblPhysicoChemicalWaterAnalysis_Report.AspectResultColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AspectResult\' in table \'STP_Select_tblPhysicoChemicalWaterA" +
                                "nalysis_Report\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSTP_Select_tblPhysicoChemicalWaterAnalysis_Report.AspectResultColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string OdorNorms {
                get {
                    try {
                        return ((string)(this[this.tableSTP_Select_tblPhysicoChemicalWaterAnalysis_Report.OdorNormsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OdorNorms\' in table \'STP_Select_tblPhysicoChemicalWaterAnal" +
                                "ysis_Report\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSTP_Select_tblPhysicoChemicalWaterAnalysis_Report.OdorNormsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string OdorResult {
                get {
                    try {
                        return ((string)(this[this.tableSTP_Select_tblPhysicoChemicalWaterAnalysis_Report.OdorResultColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OdorResult\' in table \'STP_Select_tblPhysicoChemicalWaterAna" +
                                "lysis_Report\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSTP_Select_tblPhysicoChemicalWaterAnalysis_Report.OdorResultColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ColorNorms {
                get {
                    try {
                        return ((string)(this[this.tableSTP_Select_tblPhysicoChemicalWaterAnalysis_Report.ColorNormsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ColorNorms\' in table \'STP_Select_tblPhysicoChemicalWaterAna" +
                                "lysis_Report\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSTP_Select_tblPhysicoChemicalWaterAnalysis_Report.ColorNormsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ColorResult {
                get {
                    try {
                        return ((string)(this[this.tableSTP_Select_tblPhysicoChemicalWaterAnalysis_Report.ColorResultColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ColorResult\' in table \'STP_Select_tblPhysicoChemicalWaterAn" +
                                "alysis_Report\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSTP_Select_tblPhysicoChemicalWaterAnalysis_Report.ColorResultColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Status {
                get {
                    try {
                        return ((string)(this[this.tableSTP_Select_tblPhysicoChemicalWaterAnalysis_Report.StatusColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Status\' in table \'STP_Select_tblPhysicoChemicalWaterAnalysi" +
                                "s_Report\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSTP_Select_tblPhysicoChemicalWaterAnalysis_Report.StatusColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Comment {
                get {
                    try {
                        return ((string)(this[this.tableSTP_Select_tblPhysicoChemicalWaterAnalysis_Report.CommentColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Comment\' in table \'STP_Select_tblPhysicoChemicalWaterAnalys" +
                                "is_Report\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSTP_Select_tblPhysicoChemicalWaterAnalysis_Report.CommentColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int InspectedBy {
                get {
                    try {
                        return ((int)(this[this.tableSTP_Select_tblPhysicoChemicalWaterAnalysis_Report.InspectedByColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InspectedBy\' in table \'STP_Select_tblPhysicoChemicalWaterAn" +
                                "alysis_Report\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSTP_Select_tblPhysicoChemicalWaterAnalysis_Report.InspectedByColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int LoginID {
                get {
                    try {
                        return ((int)(this[this.tableSTP_Select_tblPhysicoChemicalWaterAnalysis_Report.LoginIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LoginID\' in table \'STP_Select_tblPhysicoChemicalWaterAnalys" +
                                "is_Report\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSTP_Select_tblPhysicoChemicalWaterAnalysis_Report.LoginIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UserName {
                get {
                    try {
                        return ((string)(this[this.tableSTP_Select_tblPhysicoChemicalWaterAnalysis_Report.UserNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UserName\' in table \'STP_Select_tblPhysicoChemicalWaterAnaly" +
                                "sis_Report\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSTP_Select_tblPhysicoChemicalWaterAnalysis_Report.UserNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Plant {
                get {
                    if (this.IsPlantNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableSTP_Select_tblPhysicoChemicalWaterAnalysis_Report.PlantColumn]));
                    }
                }
                set {
                    this[this.tableSTP_Select_tblPhysicoChemicalWaterAnalysis_Report.PlantColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDateOfSamplingNull() {
                return this.IsNull(this.tableSTP_Select_tblPhysicoChemicalWaterAnalysis_Report.DateOfSamplingColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDateOfSamplingNull() {
                this[this.tableSTP_Select_tblPhysicoChemicalWaterAnalysis_Report.DateOfSamplingColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPHNormsNull() {
                return this.IsNull(this.tableSTP_Select_tblPhysicoChemicalWaterAnalysis_Report.PHNormsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPHNormsNull() {
                this[this.tableSTP_Select_tblPhysicoChemicalWaterAnalysis_Report.PHNormsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPHResultNull() {
                return this.IsNull(this.tableSTP_Select_tblPhysicoChemicalWaterAnalysis_Report.PHResultColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPHResultNull() {
                this[this.tableSTP_Select_tblPhysicoChemicalWaterAnalysis_Report.PHResultColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsConductivityNull() {
                return this.IsNull(this.tableSTP_Select_tblPhysicoChemicalWaterAnalysis_Report.ConductivityColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetConductivityNull() {
                this[this.tableSTP_Select_tblPhysicoChemicalWaterAnalysis_Report.ConductivityColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsConductivityResultNull() {
                return this.IsNull(this.tableSTP_Select_tblPhysicoChemicalWaterAnalysis_Report.ConductivityResultColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetConductivityResultNull() {
                this[this.tableSTP_Select_tblPhysicoChemicalWaterAnalysis_Report.ConductivityResultColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAspectNormsNull() {
                return this.IsNull(this.tableSTP_Select_tblPhysicoChemicalWaterAnalysis_Report.AspectNormsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAspectNormsNull() {
                this[this.tableSTP_Select_tblPhysicoChemicalWaterAnalysis_Report.AspectNormsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAspectResultNull() {
                return this.IsNull(this.tableSTP_Select_tblPhysicoChemicalWaterAnalysis_Report.AspectResultColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAspectResultNull() {
                this[this.tableSTP_Select_tblPhysicoChemicalWaterAnalysis_Report.AspectResultColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOdorNormsNull() {
                return this.IsNull(this.tableSTP_Select_tblPhysicoChemicalWaterAnalysis_Report.OdorNormsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOdorNormsNull() {
                this[this.tableSTP_Select_tblPhysicoChemicalWaterAnalysis_Report.OdorNormsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOdorResultNull() {
                return this.IsNull(this.tableSTP_Select_tblPhysicoChemicalWaterAnalysis_Report.OdorResultColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOdorResultNull() {
                this[this.tableSTP_Select_tblPhysicoChemicalWaterAnalysis_Report.OdorResultColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsColorNormsNull() {
                return this.IsNull(this.tableSTP_Select_tblPhysicoChemicalWaterAnalysis_Report.ColorNormsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetColorNormsNull() {
                this[this.tableSTP_Select_tblPhysicoChemicalWaterAnalysis_Report.ColorNormsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsColorResultNull() {
                return this.IsNull(this.tableSTP_Select_tblPhysicoChemicalWaterAnalysis_Report.ColorResultColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetColorResultNull() {
                this[this.tableSTP_Select_tblPhysicoChemicalWaterAnalysis_Report.ColorResultColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStatusNull() {
                return this.IsNull(this.tableSTP_Select_tblPhysicoChemicalWaterAnalysis_Report.StatusColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStatusNull() {
                this[this.tableSTP_Select_tblPhysicoChemicalWaterAnalysis_Report.StatusColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCommentNull() {
                return this.IsNull(this.tableSTP_Select_tblPhysicoChemicalWaterAnalysis_Report.CommentColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCommentNull() {
                this[this.tableSTP_Select_tblPhysicoChemicalWaterAnalysis_Report.CommentColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInspectedByNull() {
                return this.IsNull(this.tableSTP_Select_tblPhysicoChemicalWaterAnalysis_Report.InspectedByColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInspectedByNull() {
                this[this.tableSTP_Select_tblPhysicoChemicalWaterAnalysis_Report.InspectedByColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLoginIDNull() {
                return this.IsNull(this.tableSTP_Select_tblPhysicoChemicalWaterAnalysis_Report.LoginIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLoginIDNull() {
                this[this.tableSTP_Select_tblPhysicoChemicalWaterAnalysis_Report.LoginIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUserNameNull() {
                return this.IsNull(this.tableSTP_Select_tblPhysicoChemicalWaterAnalysis_Report.UserNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUserNameNull() {
                this[this.tableSTP_Select_tblPhysicoChemicalWaterAnalysis_Report.UserNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPlantNull() {
                return this.IsNull(this.tableSTP_Select_tblPhysicoChemicalWaterAnalysis_Report.PlantColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPlantNull() {
                this[this.tableSTP_Select_tblPhysicoChemicalWaterAnalysis_Report.PlantColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class STP_Select_tblPhysicoChemicalWaterAnalysis_ReportRowChangeEvent : global::System.EventArgs {
            
            private STP_Select_tblPhysicoChemicalWaterAnalysis_ReportRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public STP_Select_tblPhysicoChemicalWaterAnalysis_ReportRowChangeEvent(STP_Select_tblPhysicoChemicalWaterAnalysis_ReportRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public STP_Select_tblPhysicoChemicalWaterAnalysis_ReportRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
namespace QTMS.Reports.dsPhysicoChemicalWaterAnalysisTableAdapters {
    
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class STP_Select_tblPhysicoChemicalWaterAnalysis_ReportTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public STP_Select_tblPhysicoChemicalWaterAnalysis_ReportTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "STP_Select_tblPhysicoChemicalWaterAnalysis_Report";
            tableMapping.ColumnMappings.Add("PhyChemWA", "PhyChemWA");
            tableMapping.ColumnMappings.Add("DateOfSampling", "DateOfSampling");
            tableMapping.ColumnMappings.Add("PHNorms", "PHNorms");
            tableMapping.ColumnMappings.Add("PHResult", "PHResult");
            tableMapping.ColumnMappings.Add("Conductivity", "Conductivity");
            tableMapping.ColumnMappings.Add("ConductivityResult", "ConductivityResult");
            tableMapping.ColumnMappings.Add("AspectNorms", "AspectNorms");
            tableMapping.ColumnMappings.Add("AspectResult", "AspectResult");
            tableMapping.ColumnMappings.Add("OdorNorms", "OdorNorms");
            tableMapping.ColumnMappings.Add("OdorResult", "OdorResult");
            tableMapping.ColumnMappings.Add("ColorNorms", "ColorNorms");
            tableMapping.ColumnMappings.Add("ColorResult", "ColorResult");
            tableMapping.ColumnMappings.Add("Status", "Status");
            tableMapping.ColumnMappings.Add("Comment", "Comment");
            tableMapping.ColumnMappings.Add("InspectedBy", "InspectedBy");
            tableMapping.ColumnMappings.Add("LoginID", "LoginID");
            tableMapping.ColumnMappings.Add("UserName", "UserName");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::QTMS.Properties.Settings.Default.QTMS2ConnectionString1;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "dbo.STP_Select_tblPhysicoChemicalWaterAnalysis_Report";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.StoredProcedure;
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RETURN_VALUE", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.ReturnValue, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@DateOfsampling", global::System.Data.SqlDbType.SmallDateTime, 4, global::System.Data.ParameterDirection.Input, 16, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(dsPhysicoChemicalWaterAnalysis.STP_Select_tblPhysicoChemicalWaterAnalysis_ReportDataTable dataTable, global::System.Nullable<global::System.DateTime> DateOfsampling) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((DateOfsampling.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[1].Value = ((System.DateTime)(DateOfsampling.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual dsPhysicoChemicalWaterAnalysis.STP_Select_tblPhysicoChemicalWaterAnalysis_ReportDataTable GetData(global::System.Nullable<global::System.DateTime> DateOfsampling) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((DateOfsampling.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[1].Value = ((System.DateTime)(DateOfsampling.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            dsPhysicoChemicalWaterAnalysis.STP_Select_tblPhysicoChemicalWaterAnalysis_ReportDataTable dataTable = new dsPhysicoChemicalWaterAnalysis.STP_Select_tblPhysicoChemicalWaterAnalysis_ReportDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
}

#pragma warning restore 1591