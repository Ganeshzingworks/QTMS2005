//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.8009
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace QTMS.Reports {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("dsRMAnalysis")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class dsRMAnalysis : global::System.Data.DataSet {
        
        private STP_Select_RM_Analysis_ReportDataTable tableSTP_Select_RM_Analysis_Report;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public dsRMAnalysis() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected dsRMAnalysis(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["STP_Select_RM_Analysis_Report"] != null)) {
                    base.Tables.Add(new STP_Select_RM_Analysis_ReportDataTable(ds.Tables["STP_Select_RM_Analysis_Report"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public STP_Select_RM_Analysis_ReportDataTable STP_Select_RM_Analysis_Report {
            get {
                return this.tableSTP_Select_RM_Analysis_Report;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            dsRMAnalysis cln = ((dsRMAnalysis)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["STP_Select_RM_Analysis_Report"] != null)) {
                    base.Tables.Add(new STP_Select_RM_Analysis_ReportDataTable(ds.Tables["STP_Select_RM_Analysis_Report"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableSTP_Select_RM_Analysis_Report = ((STP_Select_RM_Analysis_ReportDataTable)(base.Tables["STP_Select_RM_Analysis_Report"]));
            if ((initTable == true)) {
                if ((this.tableSTP_Select_RM_Analysis_Report != null)) {
                    this.tableSTP_Select_RM_Analysis_Report.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "dsRMAnalysis";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/dsRMAnalysis.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableSTP_Select_RM_Analysis_Report = new STP_Select_RM_Analysis_ReportDataTable();
            base.Tables.Add(this.tableSTP_Select_RM_Analysis_Report);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeSTP_Select_RM_Analysis_Report() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            dsRMAnalysis ds = new dsRMAnalysis();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void STP_Select_RM_Analysis_ReportRowChangeEventHandler(object sender, STP_Select_RM_Analysis_ReportRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class STP_Select_RM_Analysis_ReportDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnRMCode;
            
            private global::System.Data.DataColumn columnRMSupplierName;
            
            private global::System.Data.DataColumn columnPlantLotNo;
            
            private global::System.Data.DataColumn columnReceiptDate;
            
            private global::System.Data.DataColumn columnSupplierLotNo;
            
            private global::System.Data.DataColumn columnChallanNo;
            
            private global::System.Data.DataColumn columnMRR;
            
            private global::System.Data.DataColumn columnSRR;
            
            private global::System.Data.DataColumn columnQuantityReceived;
            
            private global::System.Data.DataColumn columnQuantitySampled;
            
            private global::System.Data.DataColumn columnNoOfSegments;
            
            private global::System.Data.DataColumn columnActualNoOfSegments;
            
            private global::System.Data.DataColumn columnRMTransDone;
            
            private global::System.Data.DataColumn columnInspDate;
            
            private global::System.Data.DataColumn columnValidityDate;
            
            private global::System.Data.DataColumn columnFirstRMReception;
            
            private global::System.Data.DataColumn columnStatus;
            
            private global::System.Data.DataColumn columnRMINCIName;
            
            private global::System.Data.DataColumn columnRMDescription;
            
            private global::System.Data.DataColumn columnPreservativeTest;
            
            private global::System.Data.DataColumn columnAcceptedQuantity;
            
            private global::System.Data.DataColumn columnRMTransID;
            
            private global::System.Data.DataColumn columnAgentName;
            
            private global::System.Data.DataColumn columnMicroStatus;
            
            private global::System.Data.DataColumn columnRMSpecification;
            
            private global::System.Data.DataColumn columnCreationDate;
            
            private global::System.Data.DataColumn columnMicrobiologyTest;
            
            private global::System.Data.DataColumn columnRMCodeID;
            
            private global::System.Data.DataColumn columnRMSamplingID;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public STP_Select_RM_Analysis_ReportDataTable() {
                this.TableName = "STP_Select_RM_Analysis_Report";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal STP_Select_RM_Analysis_ReportDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected STP_Select_RM_Analysis_ReportDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RMCodeColumn {
                get {
                    return this.columnRMCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RMSupplierNameColumn {
                get {
                    return this.columnRMSupplierName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PlantLotNoColumn {
                get {
                    return this.columnPlantLotNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ReceiptDateColumn {
                get {
                    return this.columnReceiptDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SupplierLotNoColumn {
                get {
                    return this.columnSupplierLotNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ChallanNoColumn {
                get {
                    return this.columnChallanNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MRRColumn {
                get {
                    return this.columnMRR;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SRRColumn {
                get {
                    return this.columnSRR;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn QuantityReceivedColumn {
                get {
                    return this.columnQuantityReceived;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn QuantitySampledColumn {
                get {
                    return this.columnQuantitySampled;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NoOfSegmentsColumn {
                get {
                    return this.columnNoOfSegments;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ActualNoOfSegmentsColumn {
                get {
                    return this.columnActualNoOfSegments;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RMTransDoneColumn {
                get {
                    return this.columnRMTransDone;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InspDateColumn {
                get {
                    return this.columnInspDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ValidityDateColumn {
                get {
                    return this.columnValidityDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FirstRMReceptionColumn {
                get {
                    return this.columnFirstRMReception;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StatusColumn {
                get {
                    return this.columnStatus;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RMINCINameColumn {
                get {
                    return this.columnRMINCIName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RMDescriptionColumn {
                get {
                    return this.columnRMDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PreservativeTestColumn {
                get {
                    return this.columnPreservativeTest;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AcceptedQuantityColumn {
                get {
                    return this.columnAcceptedQuantity;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RMTransIDColumn {
                get {
                    return this.columnRMTransID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AgentNameColumn {
                get {
                    return this.columnAgentName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MicroStatusColumn {
                get {
                    return this.columnMicroStatus;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RMSpecificationColumn {
                get {
                    return this.columnRMSpecification;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CreationDateColumn {
                get {
                    return this.columnCreationDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MicrobiologyTestColumn {
                get {
                    return this.columnMicrobiologyTest;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RMCodeIDColumn {
                get {
                    return this.columnRMCodeID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RMSamplingIDColumn {
                get {
                    return this.columnRMSamplingID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public STP_Select_RM_Analysis_ReportRow this[int index] {
                get {
                    return ((STP_Select_RM_Analysis_ReportRow)(this.Rows[index]));
                }
            }
            
            public event STP_Select_RM_Analysis_ReportRowChangeEventHandler STP_Select_RM_Analysis_ReportRowChanging;
            
            public event STP_Select_RM_Analysis_ReportRowChangeEventHandler STP_Select_RM_Analysis_ReportRowChanged;
            
            public event STP_Select_RM_Analysis_ReportRowChangeEventHandler STP_Select_RM_Analysis_ReportRowDeleting;
            
            public event STP_Select_RM_Analysis_ReportRowChangeEventHandler STP_Select_RM_Analysis_ReportRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddSTP_Select_RM_Analysis_ReportRow(STP_Select_RM_Analysis_ReportRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public STP_Select_RM_Analysis_ReportRow AddSTP_Select_RM_Analysis_ReportRow(
                        string RMCode, 
                        string RMSupplierName, 
                        string PlantLotNo, 
                        System.DateTime ReceiptDate, 
                        string SupplierLotNo, 
                        string ChallanNo, 
                        string MRR, 
                        string SRR, 
                        string QuantityReceived, 
                        string QuantitySampled, 
                        int NoOfSegments, 
                        int ActualNoOfSegments, 
                        bool RMTransDone, 
                        System.DateTime InspDate, 
                        System.DateTime ValidityDate, 
                        string FirstRMReception, 
                        string Status, 
                        string RMINCIName, 
                        string RMDescription, 
                        byte PreservativeTest, 
                        long AcceptedQuantity, 
                        string AgentName, 
                        string MicroStatus, 
                        string RMSpecification, 
                        System.DateTime CreationDate, 
                        byte MicrobiologyTest) {
                STP_Select_RM_Analysis_ReportRow rowSTP_Select_RM_Analysis_ReportRow = ((STP_Select_RM_Analysis_ReportRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        RMCode,
                        RMSupplierName,
                        PlantLotNo,
                        ReceiptDate,
                        SupplierLotNo,
                        ChallanNo,
                        MRR,
                        SRR,
                        QuantityReceived,
                        QuantitySampled,
                        NoOfSegments,
                        ActualNoOfSegments,
                        RMTransDone,
                        InspDate,
                        ValidityDate,
                        FirstRMReception,
                        Status,
                        RMINCIName,
                        RMDescription,
                        PreservativeTest,
                        AcceptedQuantity,
                        null,
                        AgentName,
                        MicroStatus,
                        RMSpecification,
                        CreationDate,
                        MicrobiologyTest,
                        null,
                        null};
                rowSTP_Select_RM_Analysis_ReportRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowSTP_Select_RM_Analysis_ReportRow);
                return rowSTP_Select_RM_Analysis_ReportRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                STP_Select_RM_Analysis_ReportDataTable cln = ((STP_Select_RM_Analysis_ReportDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new STP_Select_RM_Analysis_ReportDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnRMCode = base.Columns["RMCode"];
                this.columnRMSupplierName = base.Columns["RMSupplierName"];
                this.columnPlantLotNo = base.Columns["PlantLotNo"];
                this.columnReceiptDate = base.Columns["ReceiptDate"];
                this.columnSupplierLotNo = base.Columns["SupplierLotNo"];
                this.columnChallanNo = base.Columns["ChallanNo"];
                this.columnMRR = base.Columns["MRR"];
                this.columnSRR = base.Columns["SRR"];
                this.columnQuantityReceived = base.Columns["QuantityReceived"];
                this.columnQuantitySampled = base.Columns["QuantitySampled"];
                this.columnNoOfSegments = base.Columns["NoOfSegments"];
                this.columnActualNoOfSegments = base.Columns["ActualNoOfSegments"];
                this.columnRMTransDone = base.Columns["RMTransDone"];
                this.columnInspDate = base.Columns["InspDate"];
                this.columnValidityDate = base.Columns["ValidityDate"];
                this.columnFirstRMReception = base.Columns["FirstRMReception"];
                this.columnStatus = base.Columns["Status"];
                this.columnRMINCIName = base.Columns["RMINCIName"];
                this.columnRMDescription = base.Columns["RMDescription"];
                this.columnPreservativeTest = base.Columns["PreservativeTest"];
                this.columnAcceptedQuantity = base.Columns["AcceptedQuantity"];
                this.columnRMTransID = base.Columns["RMTransID"];
                this.columnAgentName = base.Columns["AgentName"];
                this.columnMicroStatus = base.Columns["MicroStatus"];
                this.columnRMSpecification = base.Columns["RMSpecification"];
                this.columnCreationDate = base.Columns["CreationDate"];
                this.columnMicrobiologyTest = base.Columns["MicrobiologyTest"];
                this.columnRMCodeID = base.Columns["RMCodeID"];
                this.columnRMSamplingID = base.Columns["RMSamplingID"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnRMCode = new global::System.Data.DataColumn("RMCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRMCode);
                this.columnRMSupplierName = new global::System.Data.DataColumn("RMSupplierName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRMSupplierName);
                this.columnPlantLotNo = new global::System.Data.DataColumn("PlantLotNo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPlantLotNo);
                this.columnReceiptDate = new global::System.Data.DataColumn("ReceiptDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnReceiptDate);
                this.columnSupplierLotNo = new global::System.Data.DataColumn("SupplierLotNo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSupplierLotNo);
                this.columnChallanNo = new global::System.Data.DataColumn("ChallanNo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnChallanNo);
                this.columnMRR = new global::System.Data.DataColumn("MRR", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMRR);
                this.columnSRR = new global::System.Data.DataColumn("SRR", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSRR);
                this.columnQuantityReceived = new global::System.Data.DataColumn("QuantityReceived", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnQuantityReceived);
                this.columnQuantitySampled = new global::System.Data.DataColumn("QuantitySampled", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnQuantitySampled);
                this.columnNoOfSegments = new global::System.Data.DataColumn("NoOfSegments", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNoOfSegments);
                this.columnActualNoOfSegments = new global::System.Data.DataColumn("ActualNoOfSegments", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnActualNoOfSegments);
                this.columnRMTransDone = new global::System.Data.DataColumn("RMTransDone", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRMTransDone);
                this.columnInspDate = new global::System.Data.DataColumn("InspDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInspDate);
                this.columnValidityDate = new global::System.Data.DataColumn("ValidityDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnValidityDate);
                this.columnFirstRMReception = new global::System.Data.DataColumn("FirstRMReception", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFirstRMReception);
                this.columnStatus = new global::System.Data.DataColumn("Status", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStatus);
                this.columnRMINCIName = new global::System.Data.DataColumn("RMINCIName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRMINCIName);
                this.columnRMDescription = new global::System.Data.DataColumn("RMDescription", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRMDescription);
                this.columnPreservativeTest = new global::System.Data.DataColumn("PreservativeTest", typeof(byte), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPreservativeTest);
                this.columnAcceptedQuantity = new global::System.Data.DataColumn("AcceptedQuantity", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAcceptedQuantity);
                this.columnRMTransID = new global::System.Data.DataColumn("RMTransID", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRMTransID);
                this.columnAgentName = new global::System.Data.DataColumn("AgentName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAgentName);
                this.columnMicroStatus = new global::System.Data.DataColumn("MicroStatus", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMicroStatus);
                this.columnRMSpecification = new global::System.Data.DataColumn("RMSpecification", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRMSpecification);
                this.columnCreationDate = new global::System.Data.DataColumn("CreationDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCreationDate);
                this.columnMicrobiologyTest = new global::System.Data.DataColumn("MicrobiologyTest", typeof(byte), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMicrobiologyTest);
                this.columnRMCodeID = new global::System.Data.DataColumn("RMCodeID", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRMCodeID);
                this.columnRMSamplingID = new global::System.Data.DataColumn("RMSamplingID", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRMSamplingID);
                this.columnRMCode.AllowDBNull = false;
                this.columnRMCode.MaxLength = 50;
                this.columnRMSupplierName.MaxLength = 200;
                this.columnPlantLotNo.MaxLength = 50;
                this.columnSupplierLotNo.MaxLength = 50;
                this.columnChallanNo.MaxLength = 50;
                this.columnMRR.MaxLength = 50;
                this.columnSRR.MaxLength = 1;
                this.columnQuantityReceived.MaxLength = 50;
                this.columnQuantitySampled.MaxLength = 50;
                this.columnFirstRMReception.MaxLength = 1;
                this.columnStatus.MaxLength = 1;
                this.columnRMINCIName.MaxLength = 100;
                this.columnRMDescription.MaxLength = 200;
                this.columnRMTransID.AutoIncrement = true;
                this.columnRMTransID.AllowDBNull = false;
                this.columnRMTransID.ReadOnly = true;
                this.columnAgentName.MaxLength = 50;
                this.columnMicroStatus.MaxLength = 1;
                this.columnRMSpecification.MaxLength = 200;
                this.columnRMCodeID.AutoIncrement = true;
                this.columnRMCodeID.AllowDBNull = false;
                this.columnRMCodeID.ReadOnly = true;
                this.columnRMSamplingID.AutoIncrement = true;
                this.columnRMSamplingID.AllowDBNull = false;
                this.columnRMSamplingID.ReadOnly = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public STP_Select_RM_Analysis_ReportRow NewSTP_Select_RM_Analysis_ReportRow() {
                return ((STP_Select_RM_Analysis_ReportRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new STP_Select_RM_Analysis_ReportRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(STP_Select_RM_Analysis_ReportRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.STP_Select_RM_Analysis_ReportRowChanged != null)) {
                    this.STP_Select_RM_Analysis_ReportRowChanged(this, new STP_Select_RM_Analysis_ReportRowChangeEvent(((STP_Select_RM_Analysis_ReportRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.STP_Select_RM_Analysis_ReportRowChanging != null)) {
                    this.STP_Select_RM_Analysis_ReportRowChanging(this, new STP_Select_RM_Analysis_ReportRowChangeEvent(((STP_Select_RM_Analysis_ReportRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.STP_Select_RM_Analysis_ReportRowDeleted != null)) {
                    this.STP_Select_RM_Analysis_ReportRowDeleted(this, new STP_Select_RM_Analysis_ReportRowChangeEvent(((STP_Select_RM_Analysis_ReportRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.STP_Select_RM_Analysis_ReportRowDeleting != null)) {
                    this.STP_Select_RM_Analysis_ReportRowDeleting(this, new STP_Select_RM_Analysis_ReportRowChangeEvent(((STP_Select_RM_Analysis_ReportRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveSTP_Select_RM_Analysis_ReportRow(STP_Select_RM_Analysis_ReportRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                dsRMAnalysis ds = new dsRMAnalysis();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "STP_Select_RM_Analysis_ReportDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class STP_Select_RM_Analysis_ReportRow : global::System.Data.DataRow {
            
            private STP_Select_RM_Analysis_ReportDataTable tableSTP_Select_RM_Analysis_Report;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal STP_Select_RM_Analysis_ReportRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableSTP_Select_RM_Analysis_Report = ((STP_Select_RM_Analysis_ReportDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string RMCode {
                get {
                    return ((string)(this[this.tableSTP_Select_RM_Analysis_Report.RMCodeColumn]));
                }
                set {
                    this[this.tableSTP_Select_RM_Analysis_Report.RMCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string RMSupplierName {
                get {
                    try {
                        return ((string)(this[this.tableSTP_Select_RM_Analysis_Report.RMSupplierNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RMSupplierName\' in table \'STP_Select_RM_Analysis_Report\' is" +
                                " DBNull.", e);
                    }
                }
                set {
                    this[this.tableSTP_Select_RM_Analysis_Report.RMSupplierNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PlantLotNo {
                get {
                    try {
                        return ((string)(this[this.tableSTP_Select_RM_Analysis_Report.PlantLotNoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PlantLotNo\' in table \'STP_Select_RM_Analysis_Report\' is DBN" +
                                "ull.", e);
                    }
                }
                set {
                    this[this.tableSTP_Select_RM_Analysis_Report.PlantLotNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime ReceiptDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableSTP_Select_RM_Analysis_Report.ReceiptDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ReceiptDate\' in table \'STP_Select_RM_Analysis_Report\' is DB" +
                                "Null.", e);
                    }
                }
                set {
                    this[this.tableSTP_Select_RM_Analysis_Report.ReceiptDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SupplierLotNo {
                get {
                    try {
                        return ((string)(this[this.tableSTP_Select_RM_Analysis_Report.SupplierLotNoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SupplierLotNo\' in table \'STP_Select_RM_Analysis_Report\' is " +
                                "DBNull.", e);
                    }
                }
                set {
                    this[this.tableSTP_Select_RM_Analysis_Report.SupplierLotNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ChallanNo {
                get {
                    try {
                        return ((string)(this[this.tableSTP_Select_RM_Analysis_Report.ChallanNoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ChallanNo\' in table \'STP_Select_RM_Analysis_Report\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tableSTP_Select_RM_Analysis_Report.ChallanNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MRR {
                get {
                    try {
                        return ((string)(this[this.tableSTP_Select_RM_Analysis_Report.MRRColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MRR\' in table \'STP_Select_RM_Analysis_Report\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSTP_Select_RM_Analysis_Report.MRRColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SRR {
                get {
                    try {
                        return ((string)(this[this.tableSTP_Select_RM_Analysis_Report.SRRColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SRR\' in table \'STP_Select_RM_Analysis_Report\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSTP_Select_RM_Analysis_Report.SRRColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string QuantityReceived {
                get {
                    try {
                        return ((string)(this[this.tableSTP_Select_RM_Analysis_Report.QuantityReceivedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'QuantityReceived\' in table \'STP_Select_RM_Analysis_Report\' " +
                                "is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSTP_Select_RM_Analysis_Report.QuantityReceivedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string QuantitySampled {
                get {
                    try {
                        return ((string)(this[this.tableSTP_Select_RM_Analysis_Report.QuantitySampledColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'QuantitySampled\' in table \'STP_Select_RM_Analysis_Report\' i" +
                                "s DBNull.", e);
                    }
                }
                set {
                    this[this.tableSTP_Select_RM_Analysis_Report.QuantitySampledColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int NoOfSegments {
                get {
                    try {
                        return ((int)(this[this.tableSTP_Select_RM_Analysis_Report.NoOfSegmentsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'NoOfSegments\' in table \'STP_Select_RM_Analysis_Report\' is D" +
                                "BNull.", e);
                    }
                }
                set {
                    this[this.tableSTP_Select_RM_Analysis_Report.NoOfSegmentsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ActualNoOfSegments {
                get {
                    try {
                        return ((int)(this[this.tableSTP_Select_RM_Analysis_Report.ActualNoOfSegmentsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ActualNoOfSegments\' in table \'STP_Select_RM_Analysis_Report" +
                                "\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSTP_Select_RM_Analysis_Report.ActualNoOfSegmentsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool RMTransDone {
                get {
                    try {
                        return ((bool)(this[this.tableSTP_Select_RM_Analysis_Report.RMTransDoneColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RMTransDone\' in table \'STP_Select_RM_Analysis_Report\' is DB" +
                                "Null.", e);
                    }
                }
                set {
                    this[this.tableSTP_Select_RM_Analysis_Report.RMTransDoneColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime InspDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableSTP_Select_RM_Analysis_Report.InspDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InspDate\' in table \'STP_Select_RM_Analysis_Report\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableSTP_Select_RM_Analysis_Report.InspDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime ValidityDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableSTP_Select_RM_Analysis_Report.ValidityDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ValidityDate\' in table \'STP_Select_RM_Analysis_Report\' is D" +
                                "BNull.", e);
                    }
                }
                set {
                    this[this.tableSTP_Select_RM_Analysis_Report.ValidityDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FirstRMReception {
                get {
                    try {
                        return ((string)(this[this.tableSTP_Select_RM_Analysis_Report.FirstRMReceptionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FirstRMReception\' in table \'STP_Select_RM_Analysis_Report\' " +
                                "is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSTP_Select_RM_Analysis_Report.FirstRMReceptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Status {
                get {
                    try {
                        return ((string)(this[this.tableSTP_Select_RM_Analysis_Report.StatusColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Status\' in table \'STP_Select_RM_Analysis_Report\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableSTP_Select_RM_Analysis_Report.StatusColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string RMINCIName {
                get {
                    try {
                        return ((string)(this[this.tableSTP_Select_RM_Analysis_Report.RMINCINameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RMINCIName\' in table \'STP_Select_RM_Analysis_Report\' is DBN" +
                                "ull.", e);
                    }
                }
                set {
                    this[this.tableSTP_Select_RM_Analysis_Report.RMINCINameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string RMDescription {
                get {
                    try {
                        return ((string)(this[this.tableSTP_Select_RM_Analysis_Report.RMDescriptionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RMDescription\' in table \'STP_Select_RM_Analysis_Report\' is " +
                                "DBNull.", e);
                    }
                }
                set {
                    this[this.tableSTP_Select_RM_Analysis_Report.RMDescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte PreservativeTest {
                get {
                    try {
                        return ((byte)(this[this.tableSTP_Select_RM_Analysis_Report.PreservativeTestColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PreservativeTest\' in table \'STP_Select_RM_Analysis_Report\' " +
                                "is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSTP_Select_RM_Analysis_Report.PreservativeTestColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long AcceptedQuantity {
                get {
                    try {
                        return ((long)(this[this.tableSTP_Select_RM_Analysis_Report.AcceptedQuantityColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AcceptedQuantity\' in table \'STP_Select_RM_Analysis_Report\' " +
                                "is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSTP_Select_RM_Analysis_Report.AcceptedQuantityColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long RMTransID {
                get {
                    return ((long)(this[this.tableSTP_Select_RM_Analysis_Report.RMTransIDColumn]));
                }
                set {
                    this[this.tableSTP_Select_RM_Analysis_Report.RMTransIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AgentName {
                get {
                    try {
                        return ((string)(this[this.tableSTP_Select_RM_Analysis_Report.AgentNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AgentName\' in table \'STP_Select_RM_Analysis_Report\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tableSTP_Select_RM_Analysis_Report.AgentNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MicroStatus {
                get {
                    try {
                        return ((string)(this[this.tableSTP_Select_RM_Analysis_Report.MicroStatusColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MicroStatus\' in table \'STP_Select_RM_Analysis_Report\' is DB" +
                                "Null.", e);
                    }
                }
                set {
                    this[this.tableSTP_Select_RM_Analysis_Report.MicroStatusColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string RMSpecification {
                get {
                    try {
                        return ((string)(this[this.tableSTP_Select_RM_Analysis_Report.RMSpecificationColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RMSpecification\' in table \'STP_Select_RM_Analysis_Report\' i" +
                                "s DBNull.", e);
                    }
                }
                set {
                    this[this.tableSTP_Select_RM_Analysis_Report.RMSpecificationColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime CreationDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableSTP_Select_RM_Analysis_Report.CreationDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CreationDate\' in table \'STP_Select_RM_Analysis_Report\' is D" +
                                "BNull.", e);
                    }
                }
                set {
                    this[this.tableSTP_Select_RM_Analysis_Report.CreationDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte MicrobiologyTest {
                get {
                    try {
                        return ((byte)(this[this.tableSTP_Select_RM_Analysis_Report.MicrobiologyTestColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MicrobiologyTest\' in table \'STP_Select_RM_Analysis_Report\' " +
                                "is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSTP_Select_RM_Analysis_Report.MicrobiologyTestColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long RMCodeID {
                get {
                    return ((long)(this[this.tableSTP_Select_RM_Analysis_Report.RMCodeIDColumn]));
                }
                set {
                    this[this.tableSTP_Select_RM_Analysis_Report.RMCodeIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long RMSamplingID {
                get {
                    return ((long)(this[this.tableSTP_Select_RM_Analysis_Report.RMSamplingIDColumn]));
                }
                set {
                    this[this.tableSTP_Select_RM_Analysis_Report.RMSamplingIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRMSupplierNameNull() {
                return this.IsNull(this.tableSTP_Select_RM_Analysis_Report.RMSupplierNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRMSupplierNameNull() {
                this[this.tableSTP_Select_RM_Analysis_Report.RMSupplierNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPlantLotNoNull() {
                return this.IsNull(this.tableSTP_Select_RM_Analysis_Report.PlantLotNoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPlantLotNoNull() {
                this[this.tableSTP_Select_RM_Analysis_Report.PlantLotNoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsReceiptDateNull() {
                return this.IsNull(this.tableSTP_Select_RM_Analysis_Report.ReceiptDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetReceiptDateNull() {
                this[this.tableSTP_Select_RM_Analysis_Report.ReceiptDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSupplierLotNoNull() {
                return this.IsNull(this.tableSTP_Select_RM_Analysis_Report.SupplierLotNoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSupplierLotNoNull() {
                this[this.tableSTP_Select_RM_Analysis_Report.SupplierLotNoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsChallanNoNull() {
                return this.IsNull(this.tableSTP_Select_RM_Analysis_Report.ChallanNoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetChallanNoNull() {
                this[this.tableSTP_Select_RM_Analysis_Report.ChallanNoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMRRNull() {
                return this.IsNull(this.tableSTP_Select_RM_Analysis_Report.MRRColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMRRNull() {
                this[this.tableSTP_Select_RM_Analysis_Report.MRRColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSRRNull() {
                return this.IsNull(this.tableSTP_Select_RM_Analysis_Report.SRRColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSRRNull() {
                this[this.tableSTP_Select_RM_Analysis_Report.SRRColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsQuantityReceivedNull() {
                return this.IsNull(this.tableSTP_Select_RM_Analysis_Report.QuantityReceivedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetQuantityReceivedNull() {
                this[this.tableSTP_Select_RM_Analysis_Report.QuantityReceivedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsQuantitySampledNull() {
                return this.IsNull(this.tableSTP_Select_RM_Analysis_Report.QuantitySampledColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetQuantitySampledNull() {
                this[this.tableSTP_Select_RM_Analysis_Report.QuantitySampledColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNoOfSegmentsNull() {
                return this.IsNull(this.tableSTP_Select_RM_Analysis_Report.NoOfSegmentsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNoOfSegmentsNull() {
                this[this.tableSTP_Select_RM_Analysis_Report.NoOfSegmentsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsActualNoOfSegmentsNull() {
                return this.IsNull(this.tableSTP_Select_RM_Analysis_Report.ActualNoOfSegmentsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetActualNoOfSegmentsNull() {
                this[this.tableSTP_Select_RM_Analysis_Report.ActualNoOfSegmentsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRMTransDoneNull() {
                return this.IsNull(this.tableSTP_Select_RM_Analysis_Report.RMTransDoneColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRMTransDoneNull() {
                this[this.tableSTP_Select_RM_Analysis_Report.RMTransDoneColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInspDateNull() {
                return this.IsNull(this.tableSTP_Select_RM_Analysis_Report.InspDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInspDateNull() {
                this[this.tableSTP_Select_RM_Analysis_Report.InspDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsValidityDateNull() {
                return this.IsNull(this.tableSTP_Select_RM_Analysis_Report.ValidityDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetValidityDateNull() {
                this[this.tableSTP_Select_RM_Analysis_Report.ValidityDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFirstRMReceptionNull() {
                return this.IsNull(this.tableSTP_Select_RM_Analysis_Report.FirstRMReceptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFirstRMReceptionNull() {
                this[this.tableSTP_Select_RM_Analysis_Report.FirstRMReceptionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStatusNull() {
                return this.IsNull(this.tableSTP_Select_RM_Analysis_Report.StatusColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStatusNull() {
                this[this.tableSTP_Select_RM_Analysis_Report.StatusColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRMINCINameNull() {
                return this.IsNull(this.tableSTP_Select_RM_Analysis_Report.RMINCINameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRMINCINameNull() {
                this[this.tableSTP_Select_RM_Analysis_Report.RMINCINameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRMDescriptionNull() {
                return this.IsNull(this.tableSTP_Select_RM_Analysis_Report.RMDescriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRMDescriptionNull() {
                this[this.tableSTP_Select_RM_Analysis_Report.RMDescriptionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPreservativeTestNull() {
                return this.IsNull(this.tableSTP_Select_RM_Analysis_Report.PreservativeTestColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPreservativeTestNull() {
                this[this.tableSTP_Select_RM_Analysis_Report.PreservativeTestColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAcceptedQuantityNull() {
                return this.IsNull(this.tableSTP_Select_RM_Analysis_Report.AcceptedQuantityColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAcceptedQuantityNull() {
                this[this.tableSTP_Select_RM_Analysis_Report.AcceptedQuantityColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAgentNameNull() {
                return this.IsNull(this.tableSTP_Select_RM_Analysis_Report.AgentNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAgentNameNull() {
                this[this.tableSTP_Select_RM_Analysis_Report.AgentNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMicroStatusNull() {
                return this.IsNull(this.tableSTP_Select_RM_Analysis_Report.MicroStatusColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMicroStatusNull() {
                this[this.tableSTP_Select_RM_Analysis_Report.MicroStatusColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRMSpecificationNull() {
                return this.IsNull(this.tableSTP_Select_RM_Analysis_Report.RMSpecificationColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRMSpecificationNull() {
                this[this.tableSTP_Select_RM_Analysis_Report.RMSpecificationColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCreationDateNull() {
                return this.IsNull(this.tableSTP_Select_RM_Analysis_Report.CreationDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCreationDateNull() {
                this[this.tableSTP_Select_RM_Analysis_Report.CreationDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMicrobiologyTestNull() {
                return this.IsNull(this.tableSTP_Select_RM_Analysis_Report.MicrobiologyTestColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMicrobiologyTestNull() {
                this[this.tableSTP_Select_RM_Analysis_Report.MicrobiologyTestColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class STP_Select_RM_Analysis_ReportRowChangeEvent : global::System.EventArgs {
            
            private STP_Select_RM_Analysis_ReportRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public STP_Select_RM_Analysis_ReportRowChangeEvent(STP_Select_RM_Analysis_ReportRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public STP_Select_RM_Analysis_ReportRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
namespace QTMS.Reports.dsRMAnalysisTableAdapters {
    
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class STP_Select_RM_Analysis_ReportTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public STP_Select_RM_Analysis_ReportTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "STP_Select_RM_Analysis_Report";
            tableMapping.ColumnMappings.Add("RMCode", "RMCode");
            tableMapping.ColumnMappings.Add("RMSupplierName", "RMSupplierName");
            tableMapping.ColumnMappings.Add("PlantLotNo", "PlantLotNo");
            tableMapping.ColumnMappings.Add("ReceiptDate", "ReceiptDate");
            tableMapping.ColumnMappings.Add("SupplierLotNo", "SupplierLotNo");
            tableMapping.ColumnMappings.Add("ChallanNo", "ChallanNo");
            tableMapping.ColumnMappings.Add("MRR", "MRR");
            tableMapping.ColumnMappings.Add("SRR", "SRR");
            tableMapping.ColumnMappings.Add("QuantityReceived", "QuantityReceived");
            tableMapping.ColumnMappings.Add("QuantitySampled", "QuantitySampled");
            tableMapping.ColumnMappings.Add("NoOfSegments", "NoOfSegments");
            tableMapping.ColumnMappings.Add("ActualNoOfSegments", "ActualNoOfSegments");
            tableMapping.ColumnMappings.Add("RMTransDone", "RMTransDone");
            tableMapping.ColumnMappings.Add("InspDate", "InspDate");
            tableMapping.ColumnMappings.Add("ValidityDate", "ValidityDate");
            tableMapping.ColumnMappings.Add("FirstRMReception", "FirstRMReception");
            tableMapping.ColumnMappings.Add("Status", "Status");
            tableMapping.ColumnMappings.Add("RMINCIName", "RMINCIName");
            tableMapping.ColumnMappings.Add("RMDescription", "RMDescription");
            tableMapping.ColumnMappings.Add("PreservativeTest", "PreservativeTest");
            tableMapping.ColumnMappings.Add("AcceptedQuantity", "AcceptedQuantity");
            tableMapping.ColumnMappings.Add("RMTransID", "RMTransID");
            tableMapping.ColumnMappings.Add("AgentName", "AgentName");
            tableMapping.ColumnMappings.Add("MicroStatus", "MicroStatus");
            tableMapping.ColumnMappings.Add("RMSpecification", "RMSpecification");
            tableMapping.ColumnMappings.Add("CreationDate", "CreationDate");
            tableMapping.ColumnMappings.Add("MicrobiologyTest", "MicrobiologyTest");
            tableMapping.ColumnMappings.Add("RMCodeID", "RMCodeID");
            tableMapping.ColumnMappings.Add("RMSamplingID", "RMSamplingID");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::QTMS.Properties.Settings.Default.QTMS2ConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "dbo.STP_Select_RM_Analysis_Report";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.StoredProcedure;
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RETURN_VALUE", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.ReturnValue, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RMCodeID", global::System.Data.SqlDbType.BigInt, 8, global::System.Data.ParameterDirection.Input, 19, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(dsRMAnalysis.STP_Select_RM_Analysis_ReportDataTable dataTable, global::System.Nullable<long> RMCodeID) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((RMCodeID.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[1].Value = ((long)(RMCodeID.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual dsRMAnalysis.STP_Select_RM_Analysis_ReportDataTable GetData(global::System.Nullable<long> RMCodeID) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((RMCodeID.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[1].Value = ((long)(RMCodeID.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            dsRMAnalysis.STP_Select_RM_Analysis_ReportDataTable dataTable = new dsRMAnalysis.STP_Select_RM_Analysis_ReportDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
}

#pragma warning restore 1591