//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.8009
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace QTMS.Reports {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("dsRMHistory_Report")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class dsRMHistory_Report : global::System.Data.DataSet {
        
        private Select_View_FormulaHistory_ReportDataTable tableSelect_View_FormulaHistory_Report;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public dsRMHistory_Report() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected dsRMHistory_Report(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["Select_View_FormulaHistory_Report"] != null)) {
                    base.Tables.Add(new Select_View_FormulaHistory_ReportDataTable(ds.Tables["Select_View_FormulaHistory_Report"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public Select_View_FormulaHistory_ReportDataTable Select_View_FormulaHistory_Report {
            get {
                return this.tableSelect_View_FormulaHistory_Report;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            dsRMHistory_Report cln = ((dsRMHistory_Report)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["Select_View_FormulaHistory_Report"] != null)) {
                    base.Tables.Add(new Select_View_FormulaHistory_ReportDataTable(ds.Tables["Select_View_FormulaHistory_Report"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableSelect_View_FormulaHistory_Report = ((Select_View_FormulaHistory_ReportDataTable)(base.Tables["Select_View_FormulaHistory_Report"]));
            if ((initTable == true)) {
                if ((this.tableSelect_View_FormulaHistory_Report != null)) {
                    this.tableSelect_View_FormulaHistory_Report.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "dsRMHistory_Report";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/dsRMHistory_Report.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableSelect_View_FormulaHistory_Report = new Select_View_FormulaHistory_ReportDataTable();
            base.Tables.Add(this.tableSelect_View_FormulaHistory_Report);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeSelect_View_FormulaHistory_Report() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            dsRMHistory_Report ds = new dsRMHistory_Report();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void Select_View_FormulaHistory_ReportRowChangeEventHandler(object sender, Select_View_FormulaHistory_ReportRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class Select_View_FormulaHistory_ReportDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnRMCodeID;
            
            private global::System.Data.DataColumn columnRMCode;
            
            private global::System.Data.DataColumn columnRMINCIName;
            
            private global::System.Data.DataColumn columnRMFamilyID;
            
            private global::System.Data.DataColumn columnRMFamilyName;
            
            private global::System.Data.DataColumn columnRMSupplierName;
            
            private global::System.Data.DataColumn columnPlantLotNo;
            
            private global::System.Data.DataColumn columnSupplierLotNo;
            
            private global::System.Data.DataColumn columnQuantityReceived;
            
            private global::System.Data.DataColumn columnNormsReading;
            
            private global::System.Data.DataColumn columnDescName;
            
            private global::System.Data.DataColumn columnParaName;
            
            private global::System.Data.DataColumn columnTestType;
            
            private global::System.Data.DataColumn columnNormsMin;
            
            private global::System.Data.DataColumn columnNormsMax;
            
            private global::System.Data.DataColumn columnRMSamplingID;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Select_View_FormulaHistory_ReportDataTable() {
                this.TableName = "Select_View_FormulaHistory_Report";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Select_View_FormulaHistory_ReportDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected Select_View_FormulaHistory_ReportDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RMCodeIDColumn {
                get {
                    return this.columnRMCodeID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RMCodeColumn {
                get {
                    return this.columnRMCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RMINCINameColumn {
                get {
                    return this.columnRMINCIName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RMFamilyIDColumn {
                get {
                    return this.columnRMFamilyID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RMFamilyNameColumn {
                get {
                    return this.columnRMFamilyName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RMSupplierNameColumn {
                get {
                    return this.columnRMSupplierName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PlantLotNoColumn {
                get {
                    return this.columnPlantLotNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SupplierLotNoColumn {
                get {
                    return this.columnSupplierLotNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn QuantityReceivedColumn {
                get {
                    return this.columnQuantityReceived;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NormsReadingColumn {
                get {
                    return this.columnNormsReading;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DescNameColumn {
                get {
                    return this.columnDescName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ParaNameColumn {
                get {
                    return this.columnParaName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TestTypeColumn {
                get {
                    return this.columnTestType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NormsMinColumn {
                get {
                    return this.columnNormsMin;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NormsMaxColumn {
                get {
                    return this.columnNormsMax;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RMSamplingIDColumn {
                get {
                    return this.columnRMSamplingID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Select_View_FormulaHistory_ReportRow this[int index] {
                get {
                    return ((Select_View_FormulaHistory_ReportRow)(this.Rows[index]));
                }
            }
            
            public event Select_View_FormulaHistory_ReportRowChangeEventHandler Select_View_FormulaHistory_ReportRowChanging;
            
            public event Select_View_FormulaHistory_ReportRowChangeEventHandler Select_View_FormulaHistory_ReportRowChanged;
            
            public event Select_View_FormulaHistory_ReportRowChangeEventHandler Select_View_FormulaHistory_ReportRowDeleting;
            
            public event Select_View_FormulaHistory_ReportRowChangeEventHandler Select_View_FormulaHistory_ReportRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddSelect_View_FormulaHistory_ReportRow(Select_View_FormulaHistory_ReportRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Select_View_FormulaHistory_ReportRow AddSelect_View_FormulaHistory_ReportRow(string RMCode, string RMINCIName, long RMFamilyID, string RMFamilyName, string RMSupplierName, string PlantLotNo, string SupplierLotNo, string QuantityReceived, string NormsReading, string DescName, string ParaName, string TestType, string NormsMin, string NormsMax) {
                Select_View_FormulaHistory_ReportRow rowSelect_View_FormulaHistory_ReportRow = ((Select_View_FormulaHistory_ReportRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        RMCode,
                        RMINCIName,
                        RMFamilyID,
                        RMFamilyName,
                        RMSupplierName,
                        PlantLotNo,
                        SupplierLotNo,
                        QuantityReceived,
                        NormsReading,
                        DescName,
                        ParaName,
                        TestType,
                        NormsMin,
                        NormsMax,
                        null};
                rowSelect_View_FormulaHistory_ReportRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowSelect_View_FormulaHistory_ReportRow);
                return rowSelect_View_FormulaHistory_ReportRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                Select_View_FormulaHistory_ReportDataTable cln = ((Select_View_FormulaHistory_ReportDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new Select_View_FormulaHistory_ReportDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnRMCodeID = base.Columns["RMCodeID"];
                this.columnRMCode = base.Columns["RMCode"];
                this.columnRMINCIName = base.Columns["RMINCIName"];
                this.columnRMFamilyID = base.Columns["RMFamilyID"];
                this.columnRMFamilyName = base.Columns["RMFamilyName"];
                this.columnRMSupplierName = base.Columns["RMSupplierName"];
                this.columnPlantLotNo = base.Columns["PlantLotNo"];
                this.columnSupplierLotNo = base.Columns["SupplierLotNo"];
                this.columnQuantityReceived = base.Columns["QuantityReceived"];
                this.columnNormsReading = base.Columns["NormsReading"];
                this.columnDescName = base.Columns["DescName"];
                this.columnParaName = base.Columns["ParaName"];
                this.columnTestType = base.Columns["TestType"];
                this.columnNormsMin = base.Columns["NormsMin"];
                this.columnNormsMax = base.Columns["NormsMax"];
                this.columnRMSamplingID = base.Columns["RMSamplingID"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnRMCodeID = new global::System.Data.DataColumn("RMCodeID", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRMCodeID);
                this.columnRMCode = new global::System.Data.DataColumn("RMCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRMCode);
                this.columnRMINCIName = new global::System.Data.DataColumn("RMINCIName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRMINCIName);
                this.columnRMFamilyID = new global::System.Data.DataColumn("RMFamilyID", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRMFamilyID);
                this.columnRMFamilyName = new global::System.Data.DataColumn("RMFamilyName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRMFamilyName);
                this.columnRMSupplierName = new global::System.Data.DataColumn("RMSupplierName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRMSupplierName);
                this.columnPlantLotNo = new global::System.Data.DataColumn("PlantLotNo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPlantLotNo);
                this.columnSupplierLotNo = new global::System.Data.DataColumn("SupplierLotNo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSupplierLotNo);
                this.columnQuantityReceived = new global::System.Data.DataColumn("QuantityReceived", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnQuantityReceived);
                this.columnNormsReading = new global::System.Data.DataColumn("NormsReading", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNormsReading);
                this.columnDescName = new global::System.Data.DataColumn("DescName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDescName);
                this.columnParaName = new global::System.Data.DataColumn("ParaName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnParaName);
                this.columnTestType = new global::System.Data.DataColumn("TestType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTestType);
                this.columnNormsMin = new global::System.Data.DataColumn("NormsMin", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNormsMin);
                this.columnNormsMax = new global::System.Data.DataColumn("NormsMax", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNormsMax);
                this.columnRMSamplingID = new global::System.Data.DataColumn("RMSamplingID", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRMSamplingID);
                this.columnRMCodeID.AutoIncrement = true;
                this.columnRMCodeID.AllowDBNull = false;
                this.columnRMCodeID.ReadOnly = true;
                this.columnRMCode.AllowDBNull = false;
                this.columnRMCode.MaxLength = 50;
                this.columnRMINCIName.MaxLength = 100;
                this.columnRMFamilyName.MaxLength = 200;
                this.columnRMSupplierName.MaxLength = 200;
                this.columnPlantLotNo.MaxLength = 50;
                this.columnSupplierLotNo.MaxLength = 50;
                this.columnQuantityReceived.MaxLength = 50;
                this.columnNormsReading.MaxLength = 50;
                this.columnDescName.MaxLength = 250;
                this.columnParaName.MaxLength = 250;
                this.columnTestType.MaxLength = 50;
                this.columnNormsMin.MaxLength = 50;
                this.columnNormsMax.MaxLength = 50;
                this.columnRMSamplingID.AutoIncrement = true;
                this.columnRMSamplingID.AllowDBNull = false;
                this.columnRMSamplingID.ReadOnly = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Select_View_FormulaHistory_ReportRow NewSelect_View_FormulaHistory_ReportRow() {
                return ((Select_View_FormulaHistory_ReportRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new Select_View_FormulaHistory_ReportRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(Select_View_FormulaHistory_ReportRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.Select_View_FormulaHistory_ReportRowChanged != null)) {
                    this.Select_View_FormulaHistory_ReportRowChanged(this, new Select_View_FormulaHistory_ReportRowChangeEvent(((Select_View_FormulaHistory_ReportRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.Select_View_FormulaHistory_ReportRowChanging != null)) {
                    this.Select_View_FormulaHistory_ReportRowChanging(this, new Select_View_FormulaHistory_ReportRowChangeEvent(((Select_View_FormulaHistory_ReportRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.Select_View_FormulaHistory_ReportRowDeleted != null)) {
                    this.Select_View_FormulaHistory_ReportRowDeleted(this, new Select_View_FormulaHistory_ReportRowChangeEvent(((Select_View_FormulaHistory_ReportRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.Select_View_FormulaHistory_ReportRowDeleting != null)) {
                    this.Select_View_FormulaHistory_ReportRowDeleting(this, new Select_View_FormulaHistory_ReportRowChangeEvent(((Select_View_FormulaHistory_ReportRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveSelect_View_FormulaHistory_ReportRow(Select_View_FormulaHistory_ReportRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                dsRMHistory_Report ds = new dsRMHistory_Report();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "Select_View_FormulaHistory_ReportDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class Select_View_FormulaHistory_ReportRow : global::System.Data.DataRow {
            
            private Select_View_FormulaHistory_ReportDataTable tableSelect_View_FormulaHistory_Report;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Select_View_FormulaHistory_ReportRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableSelect_View_FormulaHistory_Report = ((Select_View_FormulaHistory_ReportDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long RMCodeID {
                get {
                    return ((long)(this[this.tableSelect_View_FormulaHistory_Report.RMCodeIDColumn]));
                }
                set {
                    this[this.tableSelect_View_FormulaHistory_Report.RMCodeIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string RMCode {
                get {
                    return ((string)(this[this.tableSelect_View_FormulaHistory_Report.RMCodeColumn]));
                }
                set {
                    this[this.tableSelect_View_FormulaHistory_Report.RMCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string RMINCIName {
                get {
                    try {
                        return ((string)(this[this.tableSelect_View_FormulaHistory_Report.RMINCINameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RMINCIName\' in table \'Select_View_FormulaHistory_Report\' is" +
                                " DBNull.", e);
                    }
                }
                set {
                    this[this.tableSelect_View_FormulaHistory_Report.RMINCINameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long RMFamilyID {
                get {
                    try {
                        return ((long)(this[this.tableSelect_View_FormulaHistory_Report.RMFamilyIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RMFamilyID\' in table \'Select_View_FormulaHistory_Report\' is" +
                                " DBNull.", e);
                    }
                }
                set {
                    this[this.tableSelect_View_FormulaHistory_Report.RMFamilyIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string RMFamilyName {
                get {
                    try {
                        return ((string)(this[this.tableSelect_View_FormulaHistory_Report.RMFamilyNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RMFamilyName\' in table \'Select_View_FormulaHistory_Report\' " +
                                "is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSelect_View_FormulaHistory_Report.RMFamilyNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string RMSupplierName {
                get {
                    try {
                        return ((string)(this[this.tableSelect_View_FormulaHistory_Report.RMSupplierNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RMSupplierName\' in table \'Select_View_FormulaHistory_Report" +
                                "\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSelect_View_FormulaHistory_Report.RMSupplierNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PlantLotNo {
                get {
                    try {
                        return ((string)(this[this.tableSelect_View_FormulaHistory_Report.PlantLotNoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PlantLotNo\' in table \'Select_View_FormulaHistory_Report\' is" +
                                " DBNull.", e);
                    }
                }
                set {
                    this[this.tableSelect_View_FormulaHistory_Report.PlantLotNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SupplierLotNo {
                get {
                    try {
                        return ((string)(this[this.tableSelect_View_FormulaHistory_Report.SupplierLotNoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SupplierLotNo\' in table \'Select_View_FormulaHistory_Report\'" +
                                " is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSelect_View_FormulaHistory_Report.SupplierLotNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string QuantityReceived {
                get {
                    try {
                        return ((string)(this[this.tableSelect_View_FormulaHistory_Report.QuantityReceivedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'QuantityReceived\' in table \'Select_View_FormulaHistory_Repo" +
                                "rt\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSelect_View_FormulaHistory_Report.QuantityReceivedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NormsReading {
                get {
                    try {
                        return ((string)(this[this.tableSelect_View_FormulaHistory_Report.NormsReadingColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'NormsReading\' in table \'Select_View_FormulaHistory_Report\' " +
                                "is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSelect_View_FormulaHistory_Report.NormsReadingColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DescName {
                get {
                    try {
                        return ((string)(this[this.tableSelect_View_FormulaHistory_Report.DescNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DescName\' in table \'Select_View_FormulaHistory_Report\' is D" +
                                "BNull.", e);
                    }
                }
                set {
                    this[this.tableSelect_View_FormulaHistory_Report.DescNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ParaName {
                get {
                    try {
                        return ((string)(this[this.tableSelect_View_FormulaHistory_Report.ParaNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ParaName\' in table \'Select_View_FormulaHistory_Report\' is D" +
                                "BNull.", e);
                    }
                }
                set {
                    this[this.tableSelect_View_FormulaHistory_Report.ParaNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TestType {
                get {
                    try {
                        return ((string)(this[this.tableSelect_View_FormulaHistory_Report.TestTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TestType\' in table \'Select_View_FormulaHistory_Report\' is D" +
                                "BNull.", e);
                    }
                }
                set {
                    this[this.tableSelect_View_FormulaHistory_Report.TestTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NormsMin {
                get {
                    try {
                        return ((string)(this[this.tableSelect_View_FormulaHistory_Report.NormsMinColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'NormsMin\' in table \'Select_View_FormulaHistory_Report\' is D" +
                                "BNull.", e);
                    }
                }
                set {
                    this[this.tableSelect_View_FormulaHistory_Report.NormsMinColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NormsMax {
                get {
                    try {
                        return ((string)(this[this.tableSelect_View_FormulaHistory_Report.NormsMaxColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'NormsMax\' in table \'Select_View_FormulaHistory_Report\' is D" +
                                "BNull.", e);
                    }
                }
                set {
                    this[this.tableSelect_View_FormulaHistory_Report.NormsMaxColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long RMSamplingID {
                get {
                    return ((long)(this[this.tableSelect_View_FormulaHistory_Report.RMSamplingIDColumn]));
                }
                set {
                    this[this.tableSelect_View_FormulaHistory_Report.RMSamplingIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRMINCINameNull() {
                return this.IsNull(this.tableSelect_View_FormulaHistory_Report.RMINCINameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRMINCINameNull() {
                this[this.tableSelect_View_FormulaHistory_Report.RMINCINameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRMFamilyIDNull() {
                return this.IsNull(this.tableSelect_View_FormulaHistory_Report.RMFamilyIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRMFamilyIDNull() {
                this[this.tableSelect_View_FormulaHistory_Report.RMFamilyIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRMFamilyNameNull() {
                return this.IsNull(this.tableSelect_View_FormulaHistory_Report.RMFamilyNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRMFamilyNameNull() {
                this[this.tableSelect_View_FormulaHistory_Report.RMFamilyNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRMSupplierNameNull() {
                return this.IsNull(this.tableSelect_View_FormulaHistory_Report.RMSupplierNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRMSupplierNameNull() {
                this[this.tableSelect_View_FormulaHistory_Report.RMSupplierNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPlantLotNoNull() {
                return this.IsNull(this.tableSelect_View_FormulaHistory_Report.PlantLotNoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPlantLotNoNull() {
                this[this.tableSelect_View_FormulaHistory_Report.PlantLotNoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSupplierLotNoNull() {
                return this.IsNull(this.tableSelect_View_FormulaHistory_Report.SupplierLotNoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSupplierLotNoNull() {
                this[this.tableSelect_View_FormulaHistory_Report.SupplierLotNoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsQuantityReceivedNull() {
                return this.IsNull(this.tableSelect_View_FormulaHistory_Report.QuantityReceivedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetQuantityReceivedNull() {
                this[this.tableSelect_View_FormulaHistory_Report.QuantityReceivedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNormsReadingNull() {
                return this.IsNull(this.tableSelect_View_FormulaHistory_Report.NormsReadingColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNormsReadingNull() {
                this[this.tableSelect_View_FormulaHistory_Report.NormsReadingColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDescNameNull() {
                return this.IsNull(this.tableSelect_View_FormulaHistory_Report.DescNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDescNameNull() {
                this[this.tableSelect_View_FormulaHistory_Report.DescNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsParaNameNull() {
                return this.IsNull(this.tableSelect_View_FormulaHistory_Report.ParaNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetParaNameNull() {
                this[this.tableSelect_View_FormulaHistory_Report.ParaNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTestTypeNull() {
                return this.IsNull(this.tableSelect_View_FormulaHistory_Report.TestTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTestTypeNull() {
                this[this.tableSelect_View_FormulaHistory_Report.TestTypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNormsMinNull() {
                return this.IsNull(this.tableSelect_View_FormulaHistory_Report.NormsMinColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNormsMinNull() {
                this[this.tableSelect_View_FormulaHistory_Report.NormsMinColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNormsMaxNull() {
                return this.IsNull(this.tableSelect_View_FormulaHistory_Report.NormsMaxColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNormsMaxNull() {
                this[this.tableSelect_View_FormulaHistory_Report.NormsMaxColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class Select_View_FormulaHistory_ReportRowChangeEvent : global::System.EventArgs {
            
            private Select_View_FormulaHistory_ReportRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Select_View_FormulaHistory_ReportRowChangeEvent(Select_View_FormulaHistory_ReportRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Select_View_FormulaHistory_ReportRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
namespace QTMS.Reports.dsRMHistory_ReportTableAdapters {
    
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class Select_View_FormulaHistory_ReportTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public Select_View_FormulaHistory_ReportTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Select_View_FormulaHistory_Report";
            tableMapping.ColumnMappings.Add("RMCodeID", "RMCodeID");
            tableMapping.ColumnMappings.Add("RMCode", "RMCode");
            tableMapping.ColumnMappings.Add("RMINCIName", "RMINCIName");
            tableMapping.ColumnMappings.Add("RMFamilyID", "RMFamilyID");
            tableMapping.ColumnMappings.Add("RMFamilyName", "RMFamilyName");
            tableMapping.ColumnMappings.Add("RMSupplierName", "RMSupplierName");
            tableMapping.ColumnMappings.Add("PlantLotNo", "PlantLotNo");
            tableMapping.ColumnMappings.Add("SupplierLotNo", "SupplierLotNo");
            tableMapping.ColumnMappings.Add("QuantityReceived", "QuantityReceived");
            tableMapping.ColumnMappings.Add("NormsReading", "NormsReading");
            tableMapping.ColumnMappings.Add("DescName", "DescName");
            tableMapping.ColumnMappings.Add("ParaName", "ParaName");
            tableMapping.ColumnMappings.Add("TestType", "TestType");
            tableMapping.ColumnMappings.Add("NormsMin", "NormsMin");
            tableMapping.ColumnMappings.Add("NormsMax", "NormsMax");
            tableMapping.ColumnMappings.Add("RMSamplingID", "RMSamplingID");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::QTMS.Properties.Settings.Default.QTMS2ConnectionString1;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "dbo.Select_View_FormulaHistory_Report";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.StoredProcedure;
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RETURN_VALUE", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.ReturnValue, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(dsRMHistory_Report.Select_View_FormulaHistory_ReportDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual dsRMHistory_Report.Select_View_FormulaHistory_ReportDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            dsRMHistory_Report.Select_View_FormulaHistory_ReportDataTable dataTable = new dsRMHistory_Report.Select_View_FormulaHistory_ReportDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
}

#pragma warning restore 1591