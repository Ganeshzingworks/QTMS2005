//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.8009
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace QTMS.Reports {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("dsRMMicrobiology")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class dsRMMicrobiology : global::System.Data.DataSet {
        
        private STP_Select_RMMicrobiologyTest_ReportsDataTable tableSTP_Select_RMMicrobiologyTest_Reports;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public dsRMMicrobiology() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected dsRMMicrobiology(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["STP_Select_RMMicrobiologyTest_Reports"] != null)) {
                    base.Tables.Add(new STP_Select_RMMicrobiologyTest_ReportsDataTable(ds.Tables["STP_Select_RMMicrobiologyTest_Reports"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public STP_Select_RMMicrobiologyTest_ReportsDataTable STP_Select_RMMicrobiologyTest_Reports {
            get {
                return this.tableSTP_Select_RMMicrobiologyTest_Reports;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            dsRMMicrobiology cln = ((dsRMMicrobiology)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["STP_Select_RMMicrobiologyTest_Reports"] != null)) {
                    base.Tables.Add(new STP_Select_RMMicrobiologyTest_ReportsDataTable(ds.Tables["STP_Select_RMMicrobiologyTest_Reports"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableSTP_Select_RMMicrobiologyTest_Reports = ((STP_Select_RMMicrobiologyTest_ReportsDataTable)(base.Tables["STP_Select_RMMicrobiologyTest_Reports"]));
            if ((initTable == true)) {
                if ((this.tableSTP_Select_RMMicrobiologyTest_Reports != null)) {
                    this.tableSTP_Select_RMMicrobiologyTest_Reports.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "dsRMMicrobiology";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/dsRMMicrobiology.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableSTP_Select_RMMicrobiologyTest_Reports = new STP_Select_RMMicrobiologyTest_ReportsDataTable();
            base.Tables.Add(this.tableSTP_Select_RMMicrobiologyTest_Reports);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeSTP_Select_RMMicrobiologyTest_Reports() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            dsRMMicrobiology ds = new dsRMMicrobiology();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void STP_Select_RMMicrobiologyTest_ReportsRowChangeEventHandler(object sender, STP_Select_RMMicrobiologyTest_ReportsRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class STP_Select_RMMicrobiologyTest_ReportsDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnRMCodeID;
            
            private global::System.Data.DataColumn columnRMCode;
            
            private global::System.Data.DataColumn columnPlantLotNo;
            
            private global::System.Data.DataColumn columnReceiptDate;
            
            private global::System.Data.DataColumn columnClearDate;
            
            private global::System.Data.DataColumn columnStatus;
            
            private global::System.Data.DataColumn columnMethodName;
            
            private global::System.Data.DataColumn columnInnoc_Broth_Date;
            
            private global::System.Data.DataColumn columnInnoc_Broth_Time;
            
            private global::System.Data.DataColumn columnInnoc_Agar_Date;
            
            private global::System.Data.DataColumn columnInnoc_Agar_Time;
            
            private global::System.Data.DataColumn columnInccubation_Broth_Date;
            
            private global::System.Data.DataColumn columnInccubation_Broth_Time;
            
            private global::System.Data.DataColumn columnInccubation_Agar_Date;
            
            private global::System.Data.DataColumn columnInccubation_Agar_Time;
            
            private global::System.Data.DataColumn columnInccubation_Other_Date;
            
            private global::System.Data.DataColumn columnInccubation_Other_time;
            
            private global::System.Data.DataColumn columnResult_Broth_Date;
            
            private global::System.Data.DataColumn columnResult_Broth_Time;
            
            private global::System.Data.DataColumn columnResult_Agar_Date;
            
            private global::System.Data.DataColumn columnResult_Agar_Time;
            
            private global::System.Data.DataColumn columnResult_Other_Date;
            
            private global::System.Data.DataColumn columnResult_Other_Time;
            
            private global::System.Data.DataColumn columnTotalTime_Broth;
            
            private global::System.Data.DataColumn columnTotalTime_Agar;
            
            private global::System.Data.DataColumn columnTotalTime_Other;
            
            private global::System.Data.DataColumn columnRemarks_Broth;
            
            private global::System.Data.DataColumn columnRemarks_Agar;
            
            private global::System.Data.DataColumn columnInspectedBy;
            
            private global::System.Data.DataColumn columnRemarks_Other;
            
            private global::System.Data.DataColumn columnMediaLotNo;
            
            private global::System.Data.DataColumn columnRMMicroNo;
            
            private global::System.Data.DataColumn columnRMDetailID;
            
            private global::System.Data.DataColumn columnRMSamplingID;
            
            private global::System.Data.DataColumn columnMicroNorms;
            
            private global::System.Data.DataColumn columnUserID;
            
            private global::System.Data.DataColumn columnUserName;
            
            private global::System.Data.DataColumn columnRMDescription;
            
            private global::System.Data.DataColumn columnInccub_Broth_Temp;
            
            private global::System.Data.DataColumn columnInccub_Agar_Temp;
            
            private global::System.Data.DataColumn columnInccub_Other_Temp;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public STP_Select_RMMicrobiologyTest_ReportsDataTable() {
                this.TableName = "STP_Select_RMMicrobiologyTest_Reports";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal STP_Select_RMMicrobiologyTest_ReportsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected STP_Select_RMMicrobiologyTest_ReportsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RMCodeIDColumn {
                get {
                    return this.columnRMCodeID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RMCodeColumn {
                get {
                    return this.columnRMCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PlantLotNoColumn {
                get {
                    return this.columnPlantLotNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ReceiptDateColumn {
                get {
                    return this.columnReceiptDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ClearDateColumn {
                get {
                    return this.columnClearDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StatusColumn {
                get {
                    return this.columnStatus;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MethodNameColumn {
                get {
                    return this.columnMethodName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Innoc_Broth_DateColumn {
                get {
                    return this.columnInnoc_Broth_Date;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Innoc_Broth_TimeColumn {
                get {
                    return this.columnInnoc_Broth_Time;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Innoc_Agar_DateColumn {
                get {
                    return this.columnInnoc_Agar_Date;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Innoc_Agar_TimeColumn {
                get {
                    return this.columnInnoc_Agar_Time;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Inccubation_Broth_DateColumn {
                get {
                    return this.columnInccubation_Broth_Date;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Inccubation_Broth_TimeColumn {
                get {
                    return this.columnInccubation_Broth_Time;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Inccubation_Agar_DateColumn {
                get {
                    return this.columnInccubation_Agar_Date;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Inccubation_Agar_TimeColumn {
                get {
                    return this.columnInccubation_Agar_Time;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Inccubation_Other_DateColumn {
                get {
                    return this.columnInccubation_Other_Date;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Inccubation_Other_timeColumn {
                get {
                    return this.columnInccubation_Other_time;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Result_Broth_DateColumn {
                get {
                    return this.columnResult_Broth_Date;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Result_Broth_TimeColumn {
                get {
                    return this.columnResult_Broth_Time;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Result_Agar_DateColumn {
                get {
                    return this.columnResult_Agar_Date;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Result_Agar_TimeColumn {
                get {
                    return this.columnResult_Agar_Time;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Result_Other_DateColumn {
                get {
                    return this.columnResult_Other_Date;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Result_Other_TimeColumn {
                get {
                    return this.columnResult_Other_Time;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalTime_BrothColumn {
                get {
                    return this.columnTotalTime_Broth;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalTime_AgarColumn {
                get {
                    return this.columnTotalTime_Agar;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalTime_OtherColumn {
                get {
                    return this.columnTotalTime_Other;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Remarks_BrothColumn {
                get {
                    return this.columnRemarks_Broth;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Remarks_AgarColumn {
                get {
                    return this.columnRemarks_Agar;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InspectedByColumn {
                get {
                    return this.columnInspectedBy;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Remarks_OtherColumn {
                get {
                    return this.columnRemarks_Other;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MediaLotNoColumn {
                get {
                    return this.columnMediaLotNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RMMicroNoColumn {
                get {
                    return this.columnRMMicroNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RMDetailIDColumn {
                get {
                    return this.columnRMDetailID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RMSamplingIDColumn {
                get {
                    return this.columnRMSamplingID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MicroNormsColumn {
                get {
                    return this.columnMicroNorms;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UserIDColumn {
                get {
                    return this.columnUserID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UserNameColumn {
                get {
                    return this.columnUserName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RMDescriptionColumn {
                get {
                    return this.columnRMDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Inccub_Broth_TempColumn {
                get {
                    return this.columnInccub_Broth_Temp;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Inccub_Agar_TempColumn {
                get {
                    return this.columnInccub_Agar_Temp;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Inccub_Other_TempColumn {
                get {
                    return this.columnInccub_Other_Temp;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public STP_Select_RMMicrobiologyTest_ReportsRow this[int index] {
                get {
                    return ((STP_Select_RMMicrobiologyTest_ReportsRow)(this.Rows[index]));
                }
            }
            
            public event STP_Select_RMMicrobiologyTest_ReportsRowChangeEventHandler STP_Select_RMMicrobiologyTest_ReportsRowChanging;
            
            public event STP_Select_RMMicrobiologyTest_ReportsRowChangeEventHandler STP_Select_RMMicrobiologyTest_ReportsRowChanged;
            
            public event STP_Select_RMMicrobiologyTest_ReportsRowChangeEventHandler STP_Select_RMMicrobiologyTest_ReportsRowDeleting;
            
            public event STP_Select_RMMicrobiologyTest_ReportsRowChangeEventHandler STP_Select_RMMicrobiologyTest_ReportsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddSTP_Select_RMMicrobiologyTest_ReportsRow(STP_Select_RMMicrobiologyTest_ReportsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public STP_Select_RMMicrobiologyTest_ReportsRow AddSTP_Select_RMMicrobiologyTest_ReportsRow(
                        string RMCode, 
                        string PlantLotNo, 
                        System.DateTime ReceiptDate, 
                        System.DateTime ClearDate, 
                        string Status, 
                        string MethodName, 
                        System.DateTime Innoc_Broth_Date, 
                        string Innoc_Broth_Time, 
                        System.DateTime Innoc_Agar_Date, 
                        string Innoc_Agar_Time, 
                        System.DateTime Inccubation_Broth_Date, 
                        string Inccubation_Broth_Time, 
                        System.DateTime Inccubation_Agar_Date, 
                        string Inccubation_Agar_Time, 
                        System.DateTime Inccubation_Other_Date, 
                        string Inccubation_Other_time, 
                        System.DateTime Result_Broth_Date, 
                        string Result_Broth_Time, 
                        System.DateTime Result_Agar_Date, 
                        string Result_Agar_Time, 
                        System.DateTime Result_Other_Date, 
                        string Result_Other_Time, 
                        string TotalTime_Broth, 
                        string TotalTime_Agar, 
                        string TotalTime_Other, 
                        string Remarks_Broth, 
                        string Remarks_Agar, 
                        int InspectedBy, 
                        string Remarks_Other, 
                        string MediaLotNo, 
                        string MicroNorms, 
                        string UserName, 
                        string RMDescription, 
                        string Inccub_Broth_Temp, 
                        string Inccub_Agar_Temp, 
                        string Inccub_Other_Temp) {
                STP_Select_RMMicrobiologyTest_ReportsRow rowSTP_Select_RMMicrobiologyTest_ReportsRow = ((STP_Select_RMMicrobiologyTest_ReportsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        RMCode,
                        PlantLotNo,
                        ReceiptDate,
                        ClearDate,
                        Status,
                        MethodName,
                        Innoc_Broth_Date,
                        Innoc_Broth_Time,
                        Innoc_Agar_Date,
                        Innoc_Agar_Time,
                        Inccubation_Broth_Date,
                        Inccubation_Broth_Time,
                        Inccubation_Agar_Date,
                        Inccubation_Agar_Time,
                        Inccubation_Other_Date,
                        Inccubation_Other_time,
                        Result_Broth_Date,
                        Result_Broth_Time,
                        Result_Agar_Date,
                        Result_Agar_Time,
                        Result_Other_Date,
                        Result_Other_Time,
                        TotalTime_Broth,
                        TotalTime_Agar,
                        TotalTime_Other,
                        Remarks_Broth,
                        Remarks_Agar,
                        InspectedBy,
                        Remarks_Other,
                        MediaLotNo,
                        null,
                        null,
                        null,
                        MicroNorms,
                        null,
                        UserName,
                        RMDescription,
                        Inccub_Broth_Temp,
                        Inccub_Agar_Temp,
                        Inccub_Other_Temp};
                rowSTP_Select_RMMicrobiologyTest_ReportsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowSTP_Select_RMMicrobiologyTest_ReportsRow);
                return rowSTP_Select_RMMicrobiologyTest_ReportsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public STP_Select_RMMicrobiologyTest_ReportsRow FindByRMCodeIDRMMicroNoRMDetailIDRMSamplingIDUserID(long RMCodeID, long RMMicroNo, long RMDetailID, long RMSamplingID, int UserID) {
                return ((STP_Select_RMMicrobiologyTest_ReportsRow)(this.Rows.Find(new object[] {
                            RMCodeID,
                            RMMicroNo,
                            RMDetailID,
                            RMSamplingID,
                            UserID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                STP_Select_RMMicrobiologyTest_ReportsDataTable cln = ((STP_Select_RMMicrobiologyTest_ReportsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new STP_Select_RMMicrobiologyTest_ReportsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnRMCodeID = base.Columns["RMCodeID"];
                this.columnRMCode = base.Columns["RMCode"];
                this.columnPlantLotNo = base.Columns["PlantLotNo"];
                this.columnReceiptDate = base.Columns["ReceiptDate"];
                this.columnClearDate = base.Columns["ClearDate"];
                this.columnStatus = base.Columns["Status"];
                this.columnMethodName = base.Columns["MethodName"];
                this.columnInnoc_Broth_Date = base.Columns["Innoc_Broth_Date"];
                this.columnInnoc_Broth_Time = base.Columns["Innoc_Broth_Time"];
                this.columnInnoc_Agar_Date = base.Columns["Innoc_Agar_Date"];
                this.columnInnoc_Agar_Time = base.Columns["Innoc_Agar_Time"];
                this.columnInccubation_Broth_Date = base.Columns["Inccubation_Broth_Date"];
                this.columnInccubation_Broth_Time = base.Columns["Inccubation_Broth_Time"];
                this.columnInccubation_Agar_Date = base.Columns["Inccubation_Agar_Date"];
                this.columnInccubation_Agar_Time = base.Columns["Inccubation_Agar_Time"];
                this.columnInccubation_Other_Date = base.Columns["Inccubation_Other_Date"];
                this.columnInccubation_Other_time = base.Columns["Inccubation_Other_time"];
                this.columnResult_Broth_Date = base.Columns["Result_Broth_Date"];
                this.columnResult_Broth_Time = base.Columns["Result_Broth_Time"];
                this.columnResult_Agar_Date = base.Columns["Result_Agar_Date"];
                this.columnResult_Agar_Time = base.Columns["Result_Agar_Time"];
                this.columnResult_Other_Date = base.Columns["Result_Other_Date"];
                this.columnResult_Other_Time = base.Columns["Result_Other_Time"];
                this.columnTotalTime_Broth = base.Columns["TotalTime_Broth"];
                this.columnTotalTime_Agar = base.Columns["TotalTime_Agar"];
                this.columnTotalTime_Other = base.Columns["TotalTime_Other"];
                this.columnRemarks_Broth = base.Columns["Remarks_Broth"];
                this.columnRemarks_Agar = base.Columns["Remarks_Agar"];
                this.columnInspectedBy = base.Columns["InspectedBy"];
                this.columnRemarks_Other = base.Columns["Remarks_Other"];
                this.columnMediaLotNo = base.Columns["MediaLotNo"];
                this.columnRMMicroNo = base.Columns["RMMicroNo"];
                this.columnRMDetailID = base.Columns["RMDetailID"];
                this.columnRMSamplingID = base.Columns["RMSamplingID"];
                this.columnMicroNorms = base.Columns["MicroNorms"];
                this.columnUserID = base.Columns["UserID"];
                this.columnUserName = base.Columns["UserName"];
                this.columnRMDescription = base.Columns["RMDescription"];
                this.columnInccub_Broth_Temp = base.Columns["Inccub_Broth_Temp"];
                this.columnInccub_Agar_Temp = base.Columns["Inccub_Agar_Temp"];
                this.columnInccub_Other_Temp = base.Columns["Inccub_Other_Temp"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnRMCodeID = new global::System.Data.DataColumn("RMCodeID", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRMCodeID);
                this.columnRMCode = new global::System.Data.DataColumn("RMCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRMCode);
                this.columnPlantLotNo = new global::System.Data.DataColumn("PlantLotNo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPlantLotNo);
                this.columnReceiptDate = new global::System.Data.DataColumn("ReceiptDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnReceiptDate);
                this.columnClearDate = new global::System.Data.DataColumn("ClearDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnClearDate);
                this.columnStatus = new global::System.Data.DataColumn("Status", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStatus);
                this.columnMethodName = new global::System.Data.DataColumn("MethodName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMethodName);
                this.columnInnoc_Broth_Date = new global::System.Data.DataColumn("Innoc_Broth_Date", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInnoc_Broth_Date);
                this.columnInnoc_Broth_Time = new global::System.Data.DataColumn("Innoc_Broth_Time", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInnoc_Broth_Time);
                this.columnInnoc_Agar_Date = new global::System.Data.DataColumn("Innoc_Agar_Date", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInnoc_Agar_Date);
                this.columnInnoc_Agar_Time = new global::System.Data.DataColumn("Innoc_Agar_Time", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInnoc_Agar_Time);
                this.columnInccubation_Broth_Date = new global::System.Data.DataColumn("Inccubation_Broth_Date", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInccubation_Broth_Date);
                this.columnInccubation_Broth_Time = new global::System.Data.DataColumn("Inccubation_Broth_Time", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInccubation_Broth_Time);
                this.columnInccubation_Agar_Date = new global::System.Data.DataColumn("Inccubation_Agar_Date", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInccubation_Agar_Date);
                this.columnInccubation_Agar_Time = new global::System.Data.DataColumn("Inccubation_Agar_Time", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInccubation_Agar_Time);
                this.columnInccubation_Other_Date = new global::System.Data.DataColumn("Inccubation_Other_Date", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInccubation_Other_Date);
                this.columnInccubation_Other_time = new global::System.Data.DataColumn("Inccubation_Other_time", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInccubation_Other_time);
                this.columnResult_Broth_Date = new global::System.Data.DataColumn("Result_Broth_Date", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnResult_Broth_Date);
                this.columnResult_Broth_Time = new global::System.Data.DataColumn("Result_Broth_Time", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnResult_Broth_Time);
                this.columnResult_Agar_Date = new global::System.Data.DataColumn("Result_Agar_Date", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnResult_Agar_Date);
                this.columnResult_Agar_Time = new global::System.Data.DataColumn("Result_Agar_Time", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnResult_Agar_Time);
                this.columnResult_Other_Date = new global::System.Data.DataColumn("Result_Other_Date", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnResult_Other_Date);
                this.columnResult_Other_Time = new global::System.Data.DataColumn("Result_Other_Time", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnResult_Other_Time);
                this.columnTotalTime_Broth = new global::System.Data.DataColumn("TotalTime_Broth", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalTime_Broth);
                this.columnTotalTime_Agar = new global::System.Data.DataColumn("TotalTime_Agar", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalTime_Agar);
                this.columnTotalTime_Other = new global::System.Data.DataColumn("TotalTime_Other", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalTime_Other);
                this.columnRemarks_Broth = new global::System.Data.DataColumn("Remarks_Broth", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRemarks_Broth);
                this.columnRemarks_Agar = new global::System.Data.DataColumn("Remarks_Agar", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRemarks_Agar);
                this.columnInspectedBy = new global::System.Data.DataColumn("InspectedBy", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInspectedBy);
                this.columnRemarks_Other = new global::System.Data.DataColumn("Remarks_Other", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRemarks_Other);
                this.columnMediaLotNo = new global::System.Data.DataColumn("MediaLotNo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMediaLotNo);
                this.columnRMMicroNo = new global::System.Data.DataColumn("RMMicroNo", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRMMicroNo);
                this.columnRMDetailID = new global::System.Data.DataColumn("RMDetailID", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRMDetailID);
                this.columnRMSamplingID = new global::System.Data.DataColumn("RMSamplingID", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRMSamplingID);
                this.columnMicroNorms = new global::System.Data.DataColumn("MicroNorms", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMicroNorms);
                this.columnUserID = new global::System.Data.DataColumn("UserID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUserID);
                this.columnUserName = new global::System.Data.DataColumn("UserName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUserName);
                this.columnRMDescription = new global::System.Data.DataColumn("RMDescription", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRMDescription);
                this.columnInccub_Broth_Temp = new global::System.Data.DataColumn("Inccub_Broth_Temp", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInccub_Broth_Temp);
                this.columnInccub_Agar_Temp = new global::System.Data.DataColumn("Inccub_Agar_Temp", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInccub_Agar_Temp);
                this.columnInccub_Other_Temp = new global::System.Data.DataColumn("Inccub_Other_Temp", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInccub_Other_Temp);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnRMCodeID,
                                this.columnRMMicroNo,
                                this.columnRMDetailID,
                                this.columnRMSamplingID,
                                this.columnUserID}, true));
                this.columnRMCodeID.AutoIncrement = true;
                this.columnRMCodeID.AllowDBNull = false;
                this.columnRMCodeID.ReadOnly = true;
                this.columnRMCode.AllowDBNull = false;
                this.columnRMCode.MaxLength = 50;
                this.columnPlantLotNo.MaxLength = 50;
                this.columnStatus.MaxLength = 1;
                this.columnMethodName.MaxLength = 15;
                this.columnInnoc_Broth_Time.MaxLength = 50;
                this.columnInnoc_Agar_Time.MaxLength = 50;
                this.columnInccubation_Broth_Time.MaxLength = 50;
                this.columnInccubation_Agar_Time.MaxLength = 50;
                this.columnInccubation_Other_time.MaxLength = 50;
                this.columnResult_Broth_Time.MaxLength = 50;
                this.columnResult_Agar_Time.MaxLength = 50;
                this.columnResult_Other_Time.MaxLength = 50;
                this.columnTotalTime_Broth.MaxLength = 50;
                this.columnTotalTime_Agar.MaxLength = 50;
                this.columnTotalTime_Other.MaxLength = 50;
                this.columnRemarks_Broth.MaxLength = 250;
                this.columnRemarks_Agar.MaxLength = 250;
                this.columnRemarks_Other.MaxLength = 250;
                this.columnMediaLotNo.MaxLength = 50;
                this.columnRMMicroNo.AutoIncrement = true;
                this.columnRMMicroNo.AllowDBNull = false;
                this.columnRMMicroNo.ReadOnly = true;
                this.columnRMDetailID.AutoIncrement = true;
                this.columnRMDetailID.AllowDBNull = false;
                this.columnRMDetailID.ReadOnly = true;
                this.columnRMSamplingID.AutoIncrement = true;
                this.columnRMSamplingID.AllowDBNull = false;
                this.columnRMSamplingID.ReadOnly = true;
                this.columnMicroNorms.MaxLength = 250;
                this.columnUserID.AutoIncrement = true;
                this.columnUserID.AllowDBNull = false;
                this.columnUserID.ReadOnly = true;
                this.columnUserName.MaxLength = 50;
                this.columnRMDescription.MaxLength = 200;
                this.columnInccub_Broth_Temp.MaxLength = 50;
                this.columnInccub_Agar_Temp.MaxLength = 50;
                this.columnInccub_Other_Temp.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public STP_Select_RMMicrobiologyTest_ReportsRow NewSTP_Select_RMMicrobiologyTest_ReportsRow() {
                return ((STP_Select_RMMicrobiologyTest_ReportsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new STP_Select_RMMicrobiologyTest_ReportsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(STP_Select_RMMicrobiologyTest_ReportsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.STP_Select_RMMicrobiologyTest_ReportsRowChanged != null)) {
                    this.STP_Select_RMMicrobiologyTest_ReportsRowChanged(this, new STP_Select_RMMicrobiologyTest_ReportsRowChangeEvent(((STP_Select_RMMicrobiologyTest_ReportsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.STP_Select_RMMicrobiologyTest_ReportsRowChanging != null)) {
                    this.STP_Select_RMMicrobiologyTest_ReportsRowChanging(this, new STP_Select_RMMicrobiologyTest_ReportsRowChangeEvent(((STP_Select_RMMicrobiologyTest_ReportsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.STP_Select_RMMicrobiologyTest_ReportsRowDeleted != null)) {
                    this.STP_Select_RMMicrobiologyTest_ReportsRowDeleted(this, new STP_Select_RMMicrobiologyTest_ReportsRowChangeEvent(((STP_Select_RMMicrobiologyTest_ReportsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.STP_Select_RMMicrobiologyTest_ReportsRowDeleting != null)) {
                    this.STP_Select_RMMicrobiologyTest_ReportsRowDeleting(this, new STP_Select_RMMicrobiologyTest_ReportsRowChangeEvent(((STP_Select_RMMicrobiologyTest_ReportsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveSTP_Select_RMMicrobiologyTest_ReportsRow(STP_Select_RMMicrobiologyTest_ReportsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                dsRMMicrobiology ds = new dsRMMicrobiology();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "STP_Select_RMMicrobiologyTest_ReportsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class STP_Select_RMMicrobiologyTest_ReportsRow : global::System.Data.DataRow {
            
            private STP_Select_RMMicrobiologyTest_ReportsDataTable tableSTP_Select_RMMicrobiologyTest_Reports;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal STP_Select_RMMicrobiologyTest_ReportsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableSTP_Select_RMMicrobiologyTest_Reports = ((STP_Select_RMMicrobiologyTest_ReportsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long RMCodeID {
                get {
                    return ((long)(this[this.tableSTP_Select_RMMicrobiologyTest_Reports.RMCodeIDColumn]));
                }
                set {
                    this[this.tableSTP_Select_RMMicrobiologyTest_Reports.RMCodeIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string RMCode {
                get {
                    return ((string)(this[this.tableSTP_Select_RMMicrobiologyTest_Reports.RMCodeColumn]));
                }
                set {
                    this[this.tableSTP_Select_RMMicrobiologyTest_Reports.RMCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PlantLotNo {
                get {
                    try {
                        return ((string)(this[this.tableSTP_Select_RMMicrobiologyTest_Reports.PlantLotNoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PlantLotNo\' in table \'STP_Select_RMMicrobiologyTest_Reports" +
                                "\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSTP_Select_RMMicrobiologyTest_Reports.PlantLotNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime ReceiptDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableSTP_Select_RMMicrobiologyTest_Reports.ReceiptDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ReceiptDate\' in table \'STP_Select_RMMicrobiologyTest_Report" +
                                "s\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSTP_Select_RMMicrobiologyTest_Reports.ReceiptDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime ClearDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableSTP_Select_RMMicrobiologyTest_Reports.ClearDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ClearDate\' in table \'STP_Select_RMMicrobiologyTest_Reports\'" +
                                " is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSTP_Select_RMMicrobiologyTest_Reports.ClearDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Status {
                get {
                    try {
                        return ((string)(this[this.tableSTP_Select_RMMicrobiologyTest_Reports.StatusColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Status\' in table \'STP_Select_RMMicrobiologyTest_Reports\' is" +
                                " DBNull.", e);
                    }
                }
                set {
                    this[this.tableSTP_Select_RMMicrobiologyTest_Reports.StatusColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MethodName {
                get {
                    try {
                        return ((string)(this[this.tableSTP_Select_RMMicrobiologyTest_Reports.MethodNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MethodName\' in table \'STP_Select_RMMicrobiologyTest_Reports" +
                                "\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSTP_Select_RMMicrobiologyTest_Reports.MethodNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime Innoc_Broth_Date {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableSTP_Select_RMMicrobiologyTest_Reports.Innoc_Broth_DateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Innoc_Broth_Date\' in table \'STP_Select_RMMicrobiologyTest_R" +
                                "eports\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSTP_Select_RMMicrobiologyTest_Reports.Innoc_Broth_DateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Innoc_Broth_Time {
                get {
                    try {
                        return ((string)(this[this.tableSTP_Select_RMMicrobiologyTest_Reports.Innoc_Broth_TimeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Innoc_Broth_Time\' in table \'STP_Select_RMMicrobiologyTest_R" +
                                "eports\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSTP_Select_RMMicrobiologyTest_Reports.Innoc_Broth_TimeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime Innoc_Agar_Date {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableSTP_Select_RMMicrobiologyTest_Reports.Innoc_Agar_DateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Innoc_Agar_Date\' in table \'STP_Select_RMMicrobiologyTest_Re" +
                                "ports\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSTP_Select_RMMicrobiologyTest_Reports.Innoc_Agar_DateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Innoc_Agar_Time {
                get {
                    try {
                        return ((string)(this[this.tableSTP_Select_RMMicrobiologyTest_Reports.Innoc_Agar_TimeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Innoc_Agar_Time\' in table \'STP_Select_RMMicrobiologyTest_Re" +
                                "ports\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSTP_Select_RMMicrobiologyTest_Reports.Innoc_Agar_TimeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime Inccubation_Broth_Date {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableSTP_Select_RMMicrobiologyTest_Reports.Inccubation_Broth_DateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Inccubation_Broth_Date\' in table \'STP_Select_RMMicrobiology" +
                                "Test_Reports\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSTP_Select_RMMicrobiologyTest_Reports.Inccubation_Broth_DateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Inccubation_Broth_Time {
                get {
                    try {
                        return ((string)(this[this.tableSTP_Select_RMMicrobiologyTest_Reports.Inccubation_Broth_TimeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Inccubation_Broth_Time\' in table \'STP_Select_RMMicrobiology" +
                                "Test_Reports\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSTP_Select_RMMicrobiologyTest_Reports.Inccubation_Broth_TimeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime Inccubation_Agar_Date {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableSTP_Select_RMMicrobiologyTest_Reports.Inccubation_Agar_DateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Inccubation_Agar_Date\' in table \'STP_Select_RMMicrobiologyT" +
                                "est_Reports\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSTP_Select_RMMicrobiologyTest_Reports.Inccubation_Agar_DateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Inccubation_Agar_Time {
                get {
                    try {
                        return ((string)(this[this.tableSTP_Select_RMMicrobiologyTest_Reports.Inccubation_Agar_TimeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Inccubation_Agar_Time\' in table \'STP_Select_RMMicrobiologyT" +
                                "est_Reports\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSTP_Select_RMMicrobiologyTest_Reports.Inccubation_Agar_TimeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime Inccubation_Other_Date {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableSTP_Select_RMMicrobiologyTest_Reports.Inccubation_Other_DateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Inccubation_Other_Date\' in table \'STP_Select_RMMicrobiology" +
                                "Test_Reports\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSTP_Select_RMMicrobiologyTest_Reports.Inccubation_Other_DateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Inccubation_Other_time {
                get {
                    try {
                        return ((string)(this[this.tableSTP_Select_RMMicrobiologyTest_Reports.Inccubation_Other_timeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Inccubation_Other_time\' in table \'STP_Select_RMMicrobiology" +
                                "Test_Reports\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSTP_Select_RMMicrobiologyTest_Reports.Inccubation_Other_timeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime Result_Broth_Date {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableSTP_Select_RMMicrobiologyTest_Reports.Result_Broth_DateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Result_Broth_Date\' in table \'STP_Select_RMMicrobiologyTest_" +
                                "Reports\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSTP_Select_RMMicrobiologyTest_Reports.Result_Broth_DateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Result_Broth_Time {
                get {
                    try {
                        return ((string)(this[this.tableSTP_Select_RMMicrobiologyTest_Reports.Result_Broth_TimeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Result_Broth_Time\' in table \'STP_Select_RMMicrobiologyTest_" +
                                "Reports\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSTP_Select_RMMicrobiologyTest_Reports.Result_Broth_TimeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime Result_Agar_Date {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableSTP_Select_RMMicrobiologyTest_Reports.Result_Agar_DateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Result_Agar_Date\' in table \'STP_Select_RMMicrobiologyTest_R" +
                                "eports\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSTP_Select_RMMicrobiologyTest_Reports.Result_Agar_DateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Result_Agar_Time {
                get {
                    try {
                        return ((string)(this[this.tableSTP_Select_RMMicrobiologyTest_Reports.Result_Agar_TimeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Result_Agar_Time\' in table \'STP_Select_RMMicrobiologyTest_R" +
                                "eports\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSTP_Select_RMMicrobiologyTest_Reports.Result_Agar_TimeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime Result_Other_Date {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableSTP_Select_RMMicrobiologyTest_Reports.Result_Other_DateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Result_Other_Date\' in table \'STP_Select_RMMicrobiologyTest_" +
                                "Reports\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSTP_Select_RMMicrobiologyTest_Reports.Result_Other_DateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Result_Other_Time {
                get {
                    try {
                        return ((string)(this[this.tableSTP_Select_RMMicrobiologyTest_Reports.Result_Other_TimeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Result_Other_Time\' in table \'STP_Select_RMMicrobiologyTest_" +
                                "Reports\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSTP_Select_RMMicrobiologyTest_Reports.Result_Other_TimeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TotalTime_Broth {
                get {
                    try {
                        return ((string)(this[this.tableSTP_Select_RMMicrobiologyTest_Reports.TotalTime_BrothColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TotalTime_Broth\' in table \'STP_Select_RMMicrobiologyTest_Re" +
                                "ports\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSTP_Select_RMMicrobiologyTest_Reports.TotalTime_BrothColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TotalTime_Agar {
                get {
                    try {
                        return ((string)(this[this.tableSTP_Select_RMMicrobiologyTest_Reports.TotalTime_AgarColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TotalTime_Agar\' in table \'STP_Select_RMMicrobiologyTest_Rep" +
                                "orts\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSTP_Select_RMMicrobiologyTest_Reports.TotalTime_AgarColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TotalTime_Other {
                get {
                    try {
                        return ((string)(this[this.tableSTP_Select_RMMicrobiologyTest_Reports.TotalTime_OtherColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TotalTime_Other\' in table \'STP_Select_RMMicrobiologyTest_Re" +
                                "ports\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSTP_Select_RMMicrobiologyTest_Reports.TotalTime_OtherColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Remarks_Broth {
                get {
                    try {
                        return ((string)(this[this.tableSTP_Select_RMMicrobiologyTest_Reports.Remarks_BrothColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Remarks_Broth\' in table \'STP_Select_RMMicrobiologyTest_Repo" +
                                "rts\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSTP_Select_RMMicrobiologyTest_Reports.Remarks_BrothColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Remarks_Agar {
                get {
                    try {
                        return ((string)(this[this.tableSTP_Select_RMMicrobiologyTest_Reports.Remarks_AgarColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Remarks_Agar\' in table \'STP_Select_RMMicrobiologyTest_Repor" +
                                "ts\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSTP_Select_RMMicrobiologyTest_Reports.Remarks_AgarColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int InspectedBy {
                get {
                    try {
                        return ((int)(this[this.tableSTP_Select_RMMicrobiologyTest_Reports.InspectedByColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InspectedBy\' in table \'STP_Select_RMMicrobiologyTest_Report" +
                                "s\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSTP_Select_RMMicrobiologyTest_Reports.InspectedByColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Remarks_Other {
                get {
                    try {
                        return ((string)(this[this.tableSTP_Select_RMMicrobiologyTest_Reports.Remarks_OtherColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Remarks_Other\' in table \'STP_Select_RMMicrobiologyTest_Repo" +
                                "rts\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSTP_Select_RMMicrobiologyTest_Reports.Remarks_OtherColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MediaLotNo {
                get {
                    try {
                        return ((string)(this[this.tableSTP_Select_RMMicrobiologyTest_Reports.MediaLotNoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MediaLotNo\' in table \'STP_Select_RMMicrobiologyTest_Reports" +
                                "\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSTP_Select_RMMicrobiologyTest_Reports.MediaLotNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long RMMicroNo {
                get {
                    return ((long)(this[this.tableSTP_Select_RMMicrobiologyTest_Reports.RMMicroNoColumn]));
                }
                set {
                    this[this.tableSTP_Select_RMMicrobiologyTest_Reports.RMMicroNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long RMDetailID {
                get {
                    return ((long)(this[this.tableSTP_Select_RMMicrobiologyTest_Reports.RMDetailIDColumn]));
                }
                set {
                    this[this.tableSTP_Select_RMMicrobiologyTest_Reports.RMDetailIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long RMSamplingID {
                get {
                    return ((long)(this[this.tableSTP_Select_RMMicrobiologyTest_Reports.RMSamplingIDColumn]));
                }
                set {
                    this[this.tableSTP_Select_RMMicrobiologyTest_Reports.RMSamplingIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MicroNorms {
                get {
                    try {
                        return ((string)(this[this.tableSTP_Select_RMMicrobiologyTest_Reports.MicroNormsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MicroNorms\' in table \'STP_Select_RMMicrobiologyTest_Reports" +
                                "\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSTP_Select_RMMicrobiologyTest_Reports.MicroNormsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int UserID {
                get {
                    return ((int)(this[this.tableSTP_Select_RMMicrobiologyTest_Reports.UserIDColumn]));
                }
                set {
                    this[this.tableSTP_Select_RMMicrobiologyTest_Reports.UserIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UserName {
                get {
                    try {
                        return ((string)(this[this.tableSTP_Select_RMMicrobiologyTest_Reports.UserNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UserName\' in table \'STP_Select_RMMicrobiologyTest_Reports\' " +
                                "is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSTP_Select_RMMicrobiologyTest_Reports.UserNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string RMDescription {
                get {
                    try {
                        return ((string)(this[this.tableSTP_Select_RMMicrobiologyTest_Reports.RMDescriptionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RMDescription\' in table \'STP_Select_RMMicrobiologyTest_Repo" +
                                "rts\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSTP_Select_RMMicrobiologyTest_Reports.RMDescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Inccub_Broth_Temp {
                get {
                    try {
                        return ((string)(this[this.tableSTP_Select_RMMicrobiologyTest_Reports.Inccub_Broth_TempColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Inccub_Broth_Temp\' in table \'STP_Select_RMMicrobiologyTest_" +
                                "Reports\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSTP_Select_RMMicrobiologyTest_Reports.Inccub_Broth_TempColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Inccub_Agar_Temp {
                get {
                    try {
                        return ((string)(this[this.tableSTP_Select_RMMicrobiologyTest_Reports.Inccub_Agar_TempColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Inccub_Agar_Temp\' in table \'STP_Select_RMMicrobiologyTest_R" +
                                "eports\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSTP_Select_RMMicrobiologyTest_Reports.Inccub_Agar_TempColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Inccub_Other_Temp {
                get {
                    try {
                        return ((string)(this[this.tableSTP_Select_RMMicrobiologyTest_Reports.Inccub_Other_TempColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Inccub_Other_Temp\' in table \'STP_Select_RMMicrobiologyTest_" +
                                "Reports\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSTP_Select_RMMicrobiologyTest_Reports.Inccub_Other_TempColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPlantLotNoNull() {
                return this.IsNull(this.tableSTP_Select_RMMicrobiologyTest_Reports.PlantLotNoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPlantLotNoNull() {
                this[this.tableSTP_Select_RMMicrobiologyTest_Reports.PlantLotNoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsReceiptDateNull() {
                return this.IsNull(this.tableSTP_Select_RMMicrobiologyTest_Reports.ReceiptDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetReceiptDateNull() {
                this[this.tableSTP_Select_RMMicrobiologyTest_Reports.ReceiptDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsClearDateNull() {
                return this.IsNull(this.tableSTP_Select_RMMicrobiologyTest_Reports.ClearDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetClearDateNull() {
                this[this.tableSTP_Select_RMMicrobiologyTest_Reports.ClearDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStatusNull() {
                return this.IsNull(this.tableSTP_Select_RMMicrobiologyTest_Reports.StatusColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStatusNull() {
                this[this.tableSTP_Select_RMMicrobiologyTest_Reports.StatusColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMethodNameNull() {
                return this.IsNull(this.tableSTP_Select_RMMicrobiologyTest_Reports.MethodNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMethodNameNull() {
                this[this.tableSTP_Select_RMMicrobiologyTest_Reports.MethodNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInnoc_Broth_DateNull() {
                return this.IsNull(this.tableSTP_Select_RMMicrobiologyTest_Reports.Innoc_Broth_DateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInnoc_Broth_DateNull() {
                this[this.tableSTP_Select_RMMicrobiologyTest_Reports.Innoc_Broth_DateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInnoc_Broth_TimeNull() {
                return this.IsNull(this.tableSTP_Select_RMMicrobiologyTest_Reports.Innoc_Broth_TimeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInnoc_Broth_TimeNull() {
                this[this.tableSTP_Select_RMMicrobiologyTest_Reports.Innoc_Broth_TimeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInnoc_Agar_DateNull() {
                return this.IsNull(this.tableSTP_Select_RMMicrobiologyTest_Reports.Innoc_Agar_DateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInnoc_Agar_DateNull() {
                this[this.tableSTP_Select_RMMicrobiologyTest_Reports.Innoc_Agar_DateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInnoc_Agar_TimeNull() {
                return this.IsNull(this.tableSTP_Select_RMMicrobiologyTest_Reports.Innoc_Agar_TimeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInnoc_Agar_TimeNull() {
                this[this.tableSTP_Select_RMMicrobiologyTest_Reports.Innoc_Agar_TimeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInccubation_Broth_DateNull() {
                return this.IsNull(this.tableSTP_Select_RMMicrobiologyTest_Reports.Inccubation_Broth_DateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInccubation_Broth_DateNull() {
                this[this.tableSTP_Select_RMMicrobiologyTest_Reports.Inccubation_Broth_DateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInccubation_Broth_TimeNull() {
                return this.IsNull(this.tableSTP_Select_RMMicrobiologyTest_Reports.Inccubation_Broth_TimeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInccubation_Broth_TimeNull() {
                this[this.tableSTP_Select_RMMicrobiologyTest_Reports.Inccubation_Broth_TimeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInccubation_Agar_DateNull() {
                return this.IsNull(this.tableSTP_Select_RMMicrobiologyTest_Reports.Inccubation_Agar_DateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInccubation_Agar_DateNull() {
                this[this.tableSTP_Select_RMMicrobiologyTest_Reports.Inccubation_Agar_DateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInccubation_Agar_TimeNull() {
                return this.IsNull(this.tableSTP_Select_RMMicrobiologyTest_Reports.Inccubation_Agar_TimeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInccubation_Agar_TimeNull() {
                this[this.tableSTP_Select_RMMicrobiologyTest_Reports.Inccubation_Agar_TimeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInccubation_Other_DateNull() {
                return this.IsNull(this.tableSTP_Select_RMMicrobiologyTest_Reports.Inccubation_Other_DateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInccubation_Other_DateNull() {
                this[this.tableSTP_Select_RMMicrobiologyTest_Reports.Inccubation_Other_DateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInccubation_Other_timeNull() {
                return this.IsNull(this.tableSTP_Select_RMMicrobiologyTest_Reports.Inccubation_Other_timeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInccubation_Other_timeNull() {
                this[this.tableSTP_Select_RMMicrobiologyTest_Reports.Inccubation_Other_timeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsResult_Broth_DateNull() {
                return this.IsNull(this.tableSTP_Select_RMMicrobiologyTest_Reports.Result_Broth_DateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetResult_Broth_DateNull() {
                this[this.tableSTP_Select_RMMicrobiologyTest_Reports.Result_Broth_DateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsResult_Broth_TimeNull() {
                return this.IsNull(this.tableSTP_Select_RMMicrobiologyTest_Reports.Result_Broth_TimeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetResult_Broth_TimeNull() {
                this[this.tableSTP_Select_RMMicrobiologyTest_Reports.Result_Broth_TimeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsResult_Agar_DateNull() {
                return this.IsNull(this.tableSTP_Select_RMMicrobiologyTest_Reports.Result_Agar_DateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetResult_Agar_DateNull() {
                this[this.tableSTP_Select_RMMicrobiologyTest_Reports.Result_Agar_DateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsResult_Agar_TimeNull() {
                return this.IsNull(this.tableSTP_Select_RMMicrobiologyTest_Reports.Result_Agar_TimeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetResult_Agar_TimeNull() {
                this[this.tableSTP_Select_RMMicrobiologyTest_Reports.Result_Agar_TimeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsResult_Other_DateNull() {
                return this.IsNull(this.tableSTP_Select_RMMicrobiologyTest_Reports.Result_Other_DateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetResult_Other_DateNull() {
                this[this.tableSTP_Select_RMMicrobiologyTest_Reports.Result_Other_DateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsResult_Other_TimeNull() {
                return this.IsNull(this.tableSTP_Select_RMMicrobiologyTest_Reports.Result_Other_TimeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetResult_Other_TimeNull() {
                this[this.tableSTP_Select_RMMicrobiologyTest_Reports.Result_Other_TimeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTotalTime_BrothNull() {
                return this.IsNull(this.tableSTP_Select_RMMicrobiologyTest_Reports.TotalTime_BrothColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTotalTime_BrothNull() {
                this[this.tableSTP_Select_RMMicrobiologyTest_Reports.TotalTime_BrothColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTotalTime_AgarNull() {
                return this.IsNull(this.tableSTP_Select_RMMicrobiologyTest_Reports.TotalTime_AgarColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTotalTime_AgarNull() {
                this[this.tableSTP_Select_RMMicrobiologyTest_Reports.TotalTime_AgarColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTotalTime_OtherNull() {
                return this.IsNull(this.tableSTP_Select_RMMicrobiologyTest_Reports.TotalTime_OtherColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTotalTime_OtherNull() {
                this[this.tableSTP_Select_RMMicrobiologyTest_Reports.TotalTime_OtherColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRemarks_BrothNull() {
                return this.IsNull(this.tableSTP_Select_RMMicrobiologyTest_Reports.Remarks_BrothColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRemarks_BrothNull() {
                this[this.tableSTP_Select_RMMicrobiologyTest_Reports.Remarks_BrothColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRemarks_AgarNull() {
                return this.IsNull(this.tableSTP_Select_RMMicrobiologyTest_Reports.Remarks_AgarColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRemarks_AgarNull() {
                this[this.tableSTP_Select_RMMicrobiologyTest_Reports.Remarks_AgarColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInspectedByNull() {
                return this.IsNull(this.tableSTP_Select_RMMicrobiologyTest_Reports.InspectedByColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInspectedByNull() {
                this[this.tableSTP_Select_RMMicrobiologyTest_Reports.InspectedByColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRemarks_OtherNull() {
                return this.IsNull(this.tableSTP_Select_RMMicrobiologyTest_Reports.Remarks_OtherColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRemarks_OtherNull() {
                this[this.tableSTP_Select_RMMicrobiologyTest_Reports.Remarks_OtherColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMediaLotNoNull() {
                return this.IsNull(this.tableSTP_Select_RMMicrobiologyTest_Reports.MediaLotNoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMediaLotNoNull() {
                this[this.tableSTP_Select_RMMicrobiologyTest_Reports.MediaLotNoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMicroNormsNull() {
                return this.IsNull(this.tableSTP_Select_RMMicrobiologyTest_Reports.MicroNormsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMicroNormsNull() {
                this[this.tableSTP_Select_RMMicrobiologyTest_Reports.MicroNormsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUserNameNull() {
                return this.IsNull(this.tableSTP_Select_RMMicrobiologyTest_Reports.UserNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUserNameNull() {
                this[this.tableSTP_Select_RMMicrobiologyTest_Reports.UserNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRMDescriptionNull() {
                return this.IsNull(this.tableSTP_Select_RMMicrobiologyTest_Reports.RMDescriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRMDescriptionNull() {
                this[this.tableSTP_Select_RMMicrobiologyTest_Reports.RMDescriptionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInccub_Broth_TempNull() {
                return this.IsNull(this.tableSTP_Select_RMMicrobiologyTest_Reports.Inccub_Broth_TempColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInccub_Broth_TempNull() {
                this[this.tableSTP_Select_RMMicrobiologyTest_Reports.Inccub_Broth_TempColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInccub_Agar_TempNull() {
                return this.IsNull(this.tableSTP_Select_RMMicrobiologyTest_Reports.Inccub_Agar_TempColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInccub_Agar_TempNull() {
                this[this.tableSTP_Select_RMMicrobiologyTest_Reports.Inccub_Agar_TempColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInccub_Other_TempNull() {
                return this.IsNull(this.tableSTP_Select_RMMicrobiologyTest_Reports.Inccub_Other_TempColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInccub_Other_TempNull() {
                this[this.tableSTP_Select_RMMicrobiologyTest_Reports.Inccub_Other_TempColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class STP_Select_RMMicrobiologyTest_ReportsRowChangeEvent : global::System.EventArgs {
            
            private STP_Select_RMMicrobiologyTest_ReportsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public STP_Select_RMMicrobiologyTest_ReportsRowChangeEvent(STP_Select_RMMicrobiologyTest_ReportsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public STP_Select_RMMicrobiologyTest_ReportsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
namespace QTMS.Reports.dsRMMicrobiologyTableAdapters {
    
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class STP_Select_RMMicrobiologyTest_ReportsTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public STP_Select_RMMicrobiologyTest_ReportsTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "STP_Select_RMMicrobiologyTest_Reports";
            tableMapping.ColumnMappings.Add("RMCodeID", "RMCodeID");
            tableMapping.ColumnMappings.Add("RMCode", "RMCode");
            tableMapping.ColumnMappings.Add("PlantLotNo", "PlantLotNo");
            tableMapping.ColumnMappings.Add("ReceiptDate", "ReceiptDate");
            tableMapping.ColumnMappings.Add("ClearDate", "ClearDate");
            tableMapping.ColumnMappings.Add("Status", "Status");
            tableMapping.ColumnMappings.Add("MethodName", "MethodName");
            tableMapping.ColumnMappings.Add("Innoc_Broth_Date", "Innoc_Broth_Date");
            tableMapping.ColumnMappings.Add("Innoc_Broth_Time", "Innoc_Broth_Time");
            tableMapping.ColumnMappings.Add("Innoc_Agar_Date", "Innoc_Agar_Date");
            tableMapping.ColumnMappings.Add("Innoc_Agar_Time", "Innoc_Agar_Time");
            tableMapping.ColumnMappings.Add("Inccubation_Broth_Date", "Inccubation_Broth_Date");
            tableMapping.ColumnMappings.Add("Inccubation_Broth_Time", "Inccubation_Broth_Time");
            tableMapping.ColumnMappings.Add("Inccubation_Agar_Date", "Inccubation_Agar_Date");
            tableMapping.ColumnMappings.Add("Inccubation_Agar_Time", "Inccubation_Agar_Time");
            tableMapping.ColumnMappings.Add("Inccubation_Other_Date", "Inccubation_Other_Date");
            tableMapping.ColumnMappings.Add("Inccubation_Other_time", "Inccubation_Other_time");
            tableMapping.ColumnMappings.Add("Result_Broth_Date", "Result_Broth_Date");
            tableMapping.ColumnMappings.Add("Result_Broth_Time", "Result_Broth_Time");
            tableMapping.ColumnMappings.Add("Result_Agar_Date", "Result_Agar_Date");
            tableMapping.ColumnMappings.Add("Result_Agar_Time", "Result_Agar_Time");
            tableMapping.ColumnMappings.Add("Result_Other_Date", "Result_Other_Date");
            tableMapping.ColumnMappings.Add("Result_Other_Time", "Result_Other_Time");
            tableMapping.ColumnMappings.Add("TotalTime_Broth", "TotalTime_Broth");
            tableMapping.ColumnMappings.Add("TotalTime_Agar", "TotalTime_Agar");
            tableMapping.ColumnMappings.Add("TotalTime_Other", "TotalTime_Other");
            tableMapping.ColumnMappings.Add("Remarks_Broth", "Remarks_Broth");
            tableMapping.ColumnMappings.Add("Remarks_Agar", "Remarks_Agar");
            tableMapping.ColumnMappings.Add("InspectedBy", "InspectedBy");
            tableMapping.ColumnMappings.Add("Remarks_Other", "Remarks_Other");
            tableMapping.ColumnMappings.Add("MediaLotNo", "MediaLotNo");
            tableMapping.ColumnMappings.Add("RMMicroNo", "RMMicroNo");
            tableMapping.ColumnMappings.Add("RMDetailID", "RMDetailID");
            tableMapping.ColumnMappings.Add("RMSamplingID", "RMSamplingID");
            tableMapping.ColumnMappings.Add("MicroNorms", "MicroNorms");
            tableMapping.ColumnMappings.Add("UserID", "UserID");
            tableMapping.ColumnMappings.Add("UserName", "UserName");
            tableMapping.ColumnMappings.Add("RMDescription", "RMDescription");
            tableMapping.ColumnMappings.Add("Inccub_Broth_Temp", "Inccub_Broth_Temp");
            tableMapping.ColumnMappings.Add("Inccub_Agar_Temp", "Inccub_Agar_Temp");
            tableMapping.ColumnMappings.Add("Inccub_Other_Temp", "Inccub_Other_Temp");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::QTMS.Properties.Settings.Default.QTMS2ConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "dbo.STP_Select_RMMicrobiologyTest_Reports";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.StoredProcedure;
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RETURN_VALUE", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.ReturnValue, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FromDate", global::System.Data.SqlDbType.VarChar, 50, global::System.Data.ParameterDirection.Input, 0, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ToDate", global::System.Data.SqlDbType.VarChar, 50, global::System.Data.ParameterDirection.Input, 0, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@WithDate", global::System.Data.SqlDbType.VarChar, 50, global::System.Data.ParameterDirection.Input, 0, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(dsRMMicrobiology.STP_Select_RMMicrobiologyTest_ReportsDataTable dataTable, string FromDate, string ToDate, string WithDate) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((FromDate == null)) {
                this.Adapter.SelectCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = ((string)(FromDate));
            }
            if ((ToDate == null)) {
                this.Adapter.SelectCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[2].Value = ((string)(ToDate));
            }
            if ((WithDate == null)) {
                this.Adapter.SelectCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[3].Value = ((string)(WithDate));
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual dsRMMicrobiology.STP_Select_RMMicrobiologyTest_ReportsDataTable GetData(string FromDate, string ToDate, string WithDate) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((FromDate == null)) {
                this.Adapter.SelectCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = ((string)(FromDate));
            }
            if ((ToDate == null)) {
                this.Adapter.SelectCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[2].Value = ((string)(ToDate));
            }
            if ((WithDate == null)) {
                this.Adapter.SelectCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[3].Value = ((string)(WithDate));
            }
            dsRMMicrobiology.STP_Select_RMMicrobiologyTest_ReportsDataTable dataTable = new dsRMMicrobiology.STP_Select_RMMicrobiologyTest_ReportsDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
}

#pragma warning restore 1591