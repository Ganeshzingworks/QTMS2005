//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.8009
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace QTMS.Reports {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("dsStabilityTest_Report")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class dsStabilityTest_Report : global::System.Data.DataSet {
        
        private View_StabilityTest_ReportDataTable tableView_StabilityTest_Report;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public dsStabilityTest_Report() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected dsStabilityTest_Report(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["View_StabilityTest_Report"] != null)) {
                    base.Tables.Add(new View_StabilityTest_ReportDataTable(ds.Tables["View_StabilityTest_Report"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public View_StabilityTest_ReportDataTable View_StabilityTest_Report {
            get {
                return this.tableView_StabilityTest_Report;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            dsStabilityTest_Report cln = ((dsStabilityTest_Report)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["View_StabilityTest_Report"] != null)) {
                    base.Tables.Add(new View_StabilityTest_ReportDataTable(ds.Tables["View_StabilityTest_Report"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableView_StabilityTest_Report = ((View_StabilityTest_ReportDataTable)(base.Tables["View_StabilityTest_Report"]));
            if ((initTable == true)) {
                if ((this.tableView_StabilityTest_Report != null)) {
                    this.tableView_StabilityTest_Report.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "dsStabilityTest_Report";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/dsStabilityTest_Report.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableView_StabilityTest_Report = new View_StabilityTest_ReportDataTable();
            base.Tables.Add(this.tableView_StabilityTest_Report);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeView_StabilityTest_Report() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            dsStabilityTest_Report ds = new dsStabilityTest_Report();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void View_StabilityTest_ReportRowChangeEventHandler(object sender, View_StabilityTest_ReportRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class View_StabilityTest_ReportDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnFMID;
            
            private global::System.Data.DataColumn columnTest;
            
            private global::System.Data.DataColumn columnFGPhyMethodNo;
            
            private global::System.Data.DataColumn columnNormsMin;
            
            private global::System.Data.DataColumn columnNormsMax;
            
            private global::System.Data.DataColumn columnNormsReading;
            
            private global::System.Data.DataColumn columnTestType;
            
            private global::System.Data.DataColumn columnRemark;
            
            private global::System.Data.DataColumn columnCompletedDay;
            
            private global::System.Data.DataColumn columnReadingType;
            
            private global::System.Data.DataColumn columnFormulaNo;
            
            private global::System.Data.DataColumn columnBulkDesc;
            
            private global::System.Data.DataColumn columnCreatedOn;
            
            private global::System.Data.DataColumn columnNoBatches;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public View_StabilityTest_ReportDataTable() {
                this.TableName = "View_StabilityTest_Report";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal View_StabilityTest_ReportDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected View_StabilityTest_ReportDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FMIDColumn {
                get {
                    return this.columnFMID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TestColumn {
                get {
                    return this.columnTest;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FGPhyMethodNoColumn {
                get {
                    return this.columnFGPhyMethodNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NormsMinColumn {
                get {
                    return this.columnNormsMin;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NormsMaxColumn {
                get {
                    return this.columnNormsMax;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NormsReadingColumn {
                get {
                    return this.columnNormsReading;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TestTypeColumn {
                get {
                    return this.columnTestType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RemarkColumn {
                get {
                    return this.columnRemark;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CompletedDayColumn {
                get {
                    return this.columnCompletedDay;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ReadingTypeColumn {
                get {
                    return this.columnReadingType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FormulaNoColumn {
                get {
                    return this.columnFormulaNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BulkDescColumn {
                get {
                    return this.columnBulkDesc;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CreatedOnColumn {
                get {
                    return this.columnCreatedOn;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NoBatchesColumn {
                get {
                    return this.columnNoBatches;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public View_StabilityTest_ReportRow this[int index] {
                get {
                    return ((View_StabilityTest_ReportRow)(this.Rows[index]));
                }
            }
            
            public event View_StabilityTest_ReportRowChangeEventHandler View_StabilityTest_ReportRowChanging;
            
            public event View_StabilityTest_ReportRowChangeEventHandler View_StabilityTest_ReportRowChanged;
            
            public event View_StabilityTest_ReportRowChangeEventHandler View_StabilityTest_ReportRowDeleting;
            
            public event View_StabilityTest_ReportRowChangeEventHandler View_StabilityTest_ReportRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddView_StabilityTest_ReportRow(View_StabilityTest_ReportRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public View_StabilityTest_ReportRow AddView_StabilityTest_ReportRow(int FMID, string Test, int FGPhyMethodNo, string NormsMin, string NormsMax, string NormsReading, string TestType, string Remark, string CompletedDay, string ReadingType, string FormulaNo, string BulkDesc, System.DateTime CreatedOn, int NoBatches) {
                View_StabilityTest_ReportRow rowView_StabilityTest_ReportRow = ((View_StabilityTest_ReportRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        FMID,
                        Test,
                        FGPhyMethodNo,
                        NormsMin,
                        NormsMax,
                        NormsReading,
                        TestType,
                        Remark,
                        CompletedDay,
                        ReadingType,
                        FormulaNo,
                        BulkDesc,
                        CreatedOn,
                        NoBatches};
                rowView_StabilityTest_ReportRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowView_StabilityTest_ReportRow);
                return rowView_StabilityTest_ReportRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                View_StabilityTest_ReportDataTable cln = ((View_StabilityTest_ReportDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new View_StabilityTest_ReportDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnFMID = base.Columns["FMID"];
                this.columnTest = base.Columns["Test"];
                this.columnFGPhyMethodNo = base.Columns["FGPhyMethodNo"];
                this.columnNormsMin = base.Columns["NormsMin"];
                this.columnNormsMax = base.Columns["NormsMax"];
                this.columnNormsReading = base.Columns["NormsReading"];
                this.columnTestType = base.Columns["TestType"];
                this.columnRemark = base.Columns["Remark"];
                this.columnCompletedDay = base.Columns["CompletedDay"];
                this.columnReadingType = base.Columns["ReadingType"];
                this.columnFormulaNo = base.Columns["FormulaNo"];
                this.columnBulkDesc = base.Columns["BulkDesc"];
                this.columnCreatedOn = base.Columns["CreatedOn"];
                this.columnNoBatches = base.Columns["NoBatches"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnFMID = new global::System.Data.DataColumn("FMID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFMID);
                this.columnTest = new global::System.Data.DataColumn("Test", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTest);
                this.columnFGPhyMethodNo = new global::System.Data.DataColumn("FGPhyMethodNo", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFGPhyMethodNo);
                this.columnNormsMin = new global::System.Data.DataColumn("NormsMin", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNormsMin);
                this.columnNormsMax = new global::System.Data.DataColumn("NormsMax", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNormsMax);
                this.columnNormsReading = new global::System.Data.DataColumn("NormsReading", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNormsReading);
                this.columnTestType = new global::System.Data.DataColumn("TestType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTestType);
                this.columnRemark = new global::System.Data.DataColumn("Remark", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRemark);
                this.columnCompletedDay = new global::System.Data.DataColumn("CompletedDay", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCompletedDay);
                this.columnReadingType = new global::System.Data.DataColumn("ReadingType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnReadingType);
                this.columnFormulaNo = new global::System.Data.DataColumn("FormulaNo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFormulaNo);
                this.columnBulkDesc = new global::System.Data.DataColumn("BulkDesc", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBulkDesc);
                this.columnCreatedOn = new global::System.Data.DataColumn("CreatedOn", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCreatedOn);
                this.columnNoBatches = new global::System.Data.DataColumn("NoBatches", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNoBatches);
                this.columnTest.ReadOnly = true;
                this.columnTest.MaxLength = 501;
                this.columnNormsMin.MaxLength = 50;
                this.columnNormsMax.MaxLength = 50;
                this.columnNormsReading.MaxLength = 50;
                this.columnTestType.MaxLength = 50;
                this.columnRemark.MaxLength = 200;
                this.columnCompletedDay.MaxLength = 50;
                this.columnReadingType.MaxLength = 50;
                this.columnFormulaNo.AllowDBNull = false;
                this.columnFormulaNo.MaxLength = 200;
                this.columnBulkDesc.MaxLength = 250;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public View_StabilityTest_ReportRow NewView_StabilityTest_ReportRow() {
                return ((View_StabilityTest_ReportRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new View_StabilityTest_ReportRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(View_StabilityTest_ReportRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.View_StabilityTest_ReportRowChanged != null)) {
                    this.View_StabilityTest_ReportRowChanged(this, new View_StabilityTest_ReportRowChangeEvent(((View_StabilityTest_ReportRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.View_StabilityTest_ReportRowChanging != null)) {
                    this.View_StabilityTest_ReportRowChanging(this, new View_StabilityTest_ReportRowChangeEvent(((View_StabilityTest_ReportRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.View_StabilityTest_ReportRowDeleted != null)) {
                    this.View_StabilityTest_ReportRowDeleted(this, new View_StabilityTest_ReportRowChangeEvent(((View_StabilityTest_ReportRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.View_StabilityTest_ReportRowDeleting != null)) {
                    this.View_StabilityTest_ReportRowDeleting(this, new View_StabilityTest_ReportRowChangeEvent(((View_StabilityTest_ReportRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveView_StabilityTest_ReportRow(View_StabilityTest_ReportRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                dsStabilityTest_Report ds = new dsStabilityTest_Report();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "View_StabilityTest_ReportDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class View_StabilityTest_ReportRow : global::System.Data.DataRow {
            
            private View_StabilityTest_ReportDataTable tableView_StabilityTest_Report;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal View_StabilityTest_ReportRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableView_StabilityTest_Report = ((View_StabilityTest_ReportDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int FMID {
                get {
                    try {
                        return ((int)(this[this.tableView_StabilityTest_Report.FMIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FMID\' in table \'View_StabilityTest_Report\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableView_StabilityTest_Report.FMIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Test {
                get {
                    try {
                        return ((string)(this[this.tableView_StabilityTest_Report.TestColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Test\' in table \'View_StabilityTest_Report\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableView_StabilityTest_Report.TestColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int FGPhyMethodNo {
                get {
                    try {
                        return ((int)(this[this.tableView_StabilityTest_Report.FGPhyMethodNoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FGPhyMethodNo\' in table \'View_StabilityTest_Report\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tableView_StabilityTest_Report.FGPhyMethodNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NormsMin {
                get {
                    try {
                        return ((string)(this[this.tableView_StabilityTest_Report.NormsMinColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'NormsMin\' in table \'View_StabilityTest_Report\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableView_StabilityTest_Report.NormsMinColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NormsMax {
                get {
                    try {
                        return ((string)(this[this.tableView_StabilityTest_Report.NormsMaxColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'NormsMax\' in table \'View_StabilityTest_Report\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableView_StabilityTest_Report.NormsMaxColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NormsReading {
                get {
                    try {
                        return ((string)(this[this.tableView_StabilityTest_Report.NormsReadingColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'NormsReading\' in table \'View_StabilityTest_Report\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableView_StabilityTest_Report.NormsReadingColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TestType {
                get {
                    try {
                        return ((string)(this[this.tableView_StabilityTest_Report.TestTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TestType\' in table \'View_StabilityTest_Report\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableView_StabilityTest_Report.TestTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Remark {
                get {
                    try {
                        return ((string)(this[this.tableView_StabilityTest_Report.RemarkColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Remark\' in table \'View_StabilityTest_Report\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableView_StabilityTest_Report.RemarkColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CompletedDay {
                get {
                    try {
                        return ((string)(this[this.tableView_StabilityTest_Report.CompletedDayColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CompletedDay\' in table \'View_StabilityTest_Report\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableView_StabilityTest_Report.CompletedDayColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ReadingType {
                get {
                    try {
                        return ((string)(this[this.tableView_StabilityTest_Report.ReadingTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ReadingType\' in table \'View_StabilityTest_Report\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableView_StabilityTest_Report.ReadingTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FormulaNo {
                get {
                    return ((string)(this[this.tableView_StabilityTest_Report.FormulaNoColumn]));
                }
                set {
                    this[this.tableView_StabilityTest_Report.FormulaNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BulkDesc {
                get {
                    try {
                        return ((string)(this[this.tableView_StabilityTest_Report.BulkDescColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BulkDesc\' in table \'View_StabilityTest_Report\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableView_StabilityTest_Report.BulkDescColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime CreatedOn {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableView_StabilityTest_Report.CreatedOnColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CreatedOn\' in table \'View_StabilityTest_Report\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableView_StabilityTest_Report.CreatedOnColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int NoBatches {
                get {
                    try {
                        return ((int)(this[this.tableView_StabilityTest_Report.NoBatchesColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'NoBatches\' in table \'View_StabilityTest_Report\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableView_StabilityTest_Report.NoBatchesColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFMIDNull() {
                return this.IsNull(this.tableView_StabilityTest_Report.FMIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFMIDNull() {
                this[this.tableView_StabilityTest_Report.FMIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTestNull() {
                return this.IsNull(this.tableView_StabilityTest_Report.TestColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTestNull() {
                this[this.tableView_StabilityTest_Report.TestColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFGPhyMethodNoNull() {
                return this.IsNull(this.tableView_StabilityTest_Report.FGPhyMethodNoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFGPhyMethodNoNull() {
                this[this.tableView_StabilityTest_Report.FGPhyMethodNoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNormsMinNull() {
                return this.IsNull(this.tableView_StabilityTest_Report.NormsMinColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNormsMinNull() {
                this[this.tableView_StabilityTest_Report.NormsMinColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNormsMaxNull() {
                return this.IsNull(this.tableView_StabilityTest_Report.NormsMaxColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNormsMaxNull() {
                this[this.tableView_StabilityTest_Report.NormsMaxColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNormsReadingNull() {
                return this.IsNull(this.tableView_StabilityTest_Report.NormsReadingColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNormsReadingNull() {
                this[this.tableView_StabilityTest_Report.NormsReadingColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTestTypeNull() {
                return this.IsNull(this.tableView_StabilityTest_Report.TestTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTestTypeNull() {
                this[this.tableView_StabilityTest_Report.TestTypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRemarkNull() {
                return this.IsNull(this.tableView_StabilityTest_Report.RemarkColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRemarkNull() {
                this[this.tableView_StabilityTest_Report.RemarkColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCompletedDayNull() {
                return this.IsNull(this.tableView_StabilityTest_Report.CompletedDayColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCompletedDayNull() {
                this[this.tableView_StabilityTest_Report.CompletedDayColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsReadingTypeNull() {
                return this.IsNull(this.tableView_StabilityTest_Report.ReadingTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetReadingTypeNull() {
                this[this.tableView_StabilityTest_Report.ReadingTypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBulkDescNull() {
                return this.IsNull(this.tableView_StabilityTest_Report.BulkDescColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBulkDescNull() {
                this[this.tableView_StabilityTest_Report.BulkDescColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCreatedOnNull() {
                return this.IsNull(this.tableView_StabilityTest_Report.CreatedOnColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCreatedOnNull() {
                this[this.tableView_StabilityTest_Report.CreatedOnColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNoBatchesNull() {
                return this.IsNull(this.tableView_StabilityTest_Report.NoBatchesColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNoBatchesNull() {
                this[this.tableView_StabilityTest_Report.NoBatchesColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class View_StabilityTest_ReportRowChangeEvent : global::System.EventArgs {
            
            private View_StabilityTest_ReportRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public View_StabilityTest_ReportRowChangeEvent(View_StabilityTest_ReportRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public View_StabilityTest_ReportRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
namespace QTMS.Reports.dsStabilityTest_ReportTableAdapters {
    
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class View_StabilityTest_ReportTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.OleDb.OleDbDataAdapter _adapter;
        
        private global::System.Data.OleDb.OleDbConnection _connection;
        
        private global::System.Data.OleDb.OleDbCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public View_StabilityTest_ReportTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Data.OleDb.OleDbDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.OleDb.OleDbConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.OleDb.OleDbCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.OleDb.OleDbCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.OleDb.OleDbDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "View_StabilityTest_Report";
            tableMapping.ColumnMappings.Add("FMID", "FMID");
            tableMapping.ColumnMappings.Add("Test", "Test");
            tableMapping.ColumnMappings.Add("FGPhyMethodNo", "FGPhyMethodNo");
            tableMapping.ColumnMappings.Add("NormsMin", "NormsMin");
            tableMapping.ColumnMappings.Add("NormsMax", "NormsMax");
            tableMapping.ColumnMappings.Add("NormsReading", "NormsReading");
            tableMapping.ColumnMappings.Add("TestType", "TestType");
            tableMapping.ColumnMappings.Add("Remark", "Remark");
            tableMapping.ColumnMappings.Add("CompletedDay", "CompletedDay");
            tableMapping.ColumnMappings.Add("ReadingType", "ReadingType");
            tableMapping.ColumnMappings.Add("FormulaNo", "FormulaNo");
            tableMapping.ColumnMappings.Add("BulkDesc", "BulkDesc");
            tableMapping.ColumnMappings.Add("CreatedOn", "CreatedOn");
            tableMapping.ColumnMappings.Add("NoBatches", "NoBatches");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.OleDb.OleDbConnection();
            this._connection.ConnectionString = global::QTMS.Properties.Settings.Default.ConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.OleDb.OleDbCommand[1];
            this._commandCollection[0] = new global::System.Data.OleDb.OleDbCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT \"FMID\", \"Test\", \"FGPhyMethodNo\", \"NormsMin\", \"NormsMax\", \"NormsReading\", \"" +
                "TestType\", \"Remark\", \"CompletedDay\", \"ReadingType\", \"FormulaNo\", \"BulkDesc\", \"Cr" +
                "eatedOn\", \"NoBatches\" FROM \"dbo\".\"View_StabilityTest_Report\"";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(dsStabilityTest_Report.View_StabilityTest_ReportDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual dsStabilityTest_Report.View_StabilityTest_ReportDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            dsStabilityTest_Report.View_StabilityTest_ReportDataTable dataTable = new dsStabilityTest_Report.View_StabilityTest_ReportDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
}

#pragma warning restore 1591