//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.8009
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace QTMS.Reports {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("dsWDTestMethodDetails")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class dsWDTestMethodDetails : global::System.Data.DataSet {
        
        private STP_Select_tblCompatibilityTestMethodDetailsReport_FNoDataTable tableSTP_Select_tblCompatibilityTestMethodDetailsReport_FNo;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public dsWDTestMethodDetails() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected dsWDTestMethodDetails(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["STP_Select_tblCompatibilityTestMethodDetailsReport_FNo"] != null)) {
                    base.Tables.Add(new STP_Select_tblCompatibilityTestMethodDetailsReport_FNoDataTable(ds.Tables["STP_Select_tblCompatibilityTestMethodDetailsReport_FNo"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public STP_Select_tblCompatibilityTestMethodDetailsReport_FNoDataTable STP_Select_tblCompatibilityTestMethodDetailsReport_FNo {
            get {
                return this.tableSTP_Select_tblCompatibilityTestMethodDetailsReport_FNo;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            dsWDTestMethodDetails cln = ((dsWDTestMethodDetails)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["STP_Select_tblCompatibilityTestMethodDetailsReport_FNo"] != null)) {
                    base.Tables.Add(new STP_Select_tblCompatibilityTestMethodDetailsReport_FNoDataTable(ds.Tables["STP_Select_tblCompatibilityTestMethodDetailsReport_FNo"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableSTP_Select_tblCompatibilityTestMethodDetailsReport_FNo = ((STP_Select_tblCompatibilityTestMethodDetailsReport_FNoDataTable)(base.Tables["STP_Select_tblCompatibilityTestMethodDetailsReport_FNo"]));
            if ((initTable == true)) {
                if ((this.tableSTP_Select_tblCompatibilityTestMethodDetailsReport_FNo != null)) {
                    this.tableSTP_Select_tblCompatibilityTestMethodDetailsReport_FNo.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "dsWDTestMethodDetails";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/dsWDTestMethodDetails.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableSTP_Select_tblCompatibilityTestMethodDetailsReport_FNo = new STP_Select_tblCompatibilityTestMethodDetailsReport_FNoDataTable();
            base.Tables.Add(this.tableSTP_Select_tblCompatibilityTestMethodDetailsReport_FNo);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeSTP_Select_tblCompatibilityTestMethodDetailsReport_FNo() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            dsWDTestMethodDetails ds = new dsWDTestMethodDetails();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void STP_Select_tblCompatibilityTestMethodDetailsReport_FNoRowChangeEventHandler(object sender, STP_Select_tblCompatibilityTestMethodDetailsReport_FNoRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class STP_Select_tblCompatibilityTestMethodDetailsReport_FNoDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnCompTestDetailNo;
            
            private global::System.Data.DataColumn columnFNo;
            
            private global::System.Data.DataColumn columnTestNo;
            
            private global::System.Data.DataColumn columnTareWt;
            
            private global::System.Data.DataColumn columnTemp;
            
            private global::System.Data.DataColumn columnDays0;
            
            private global::System.Data.DataColumn columnDays7;
            
            private global::System.Data.DataColumn columnDays30;
            
            private global::System.Data.DataColumn columnDays60;
            
            private global::System.Data.DataColumn columnDays3Yrs;
            
            private global::System.Data.DataColumn columnDays4Yrs;
            
            private global::System.Data.DataColumn columnTestStatus;
            
            private global::System.Data.DataColumn columnStatus;
            
            private global::System.Data.DataColumn columnInspectedBy;
            
            private global::System.Data.DataColumn columnLoginID;
            
            private global::System.Data.DataColumn columnBottleJar;
            
            private global::System.Data.DataColumn columnCapPlug;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public STP_Select_tblCompatibilityTestMethodDetailsReport_FNoDataTable() {
                this.TableName = "STP_Select_tblCompatibilityTestMethodDetailsReport_FNo";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal STP_Select_tblCompatibilityTestMethodDetailsReport_FNoDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected STP_Select_tblCompatibilityTestMethodDetailsReport_FNoDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CompTestDetailNoColumn {
                get {
                    return this.columnCompTestDetailNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FNoColumn {
                get {
                    return this.columnFNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TestNoColumn {
                get {
                    return this.columnTestNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TareWtColumn {
                get {
                    return this.columnTareWt;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TempColumn {
                get {
                    return this.columnTemp;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Days0Column {
                get {
                    return this.columnDays0;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Days7Column {
                get {
                    return this.columnDays7;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Days30Column {
                get {
                    return this.columnDays30;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Days60Column {
                get {
                    return this.columnDays60;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Days3YrsColumn {
                get {
                    return this.columnDays3Yrs;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Days4YrsColumn {
                get {
                    return this.columnDays4Yrs;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TestStatusColumn {
                get {
                    return this.columnTestStatus;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StatusColumn {
                get {
                    return this.columnStatus;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InspectedByColumn {
                get {
                    return this.columnInspectedBy;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LoginIDColumn {
                get {
                    return this.columnLoginID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BottleJarColumn {
                get {
                    return this.columnBottleJar;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CapPlugColumn {
                get {
                    return this.columnCapPlug;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public STP_Select_tblCompatibilityTestMethodDetailsReport_FNoRow this[int index] {
                get {
                    return ((STP_Select_tblCompatibilityTestMethodDetailsReport_FNoRow)(this.Rows[index]));
                }
            }
            
            public event STP_Select_tblCompatibilityTestMethodDetailsReport_FNoRowChangeEventHandler STP_Select_tblCompatibilityTestMethodDetailsReport_FNoRowChanging;
            
            public event STP_Select_tblCompatibilityTestMethodDetailsReport_FNoRowChangeEventHandler STP_Select_tblCompatibilityTestMethodDetailsReport_FNoRowChanged;
            
            public event STP_Select_tblCompatibilityTestMethodDetailsReport_FNoRowChangeEventHandler STP_Select_tblCompatibilityTestMethodDetailsReport_FNoRowDeleting;
            
            public event STP_Select_tblCompatibilityTestMethodDetailsReport_FNoRowChangeEventHandler STP_Select_tblCompatibilityTestMethodDetailsReport_FNoRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddSTP_Select_tblCompatibilityTestMethodDetailsReport_FNoRow(STP_Select_tblCompatibilityTestMethodDetailsReport_FNoRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public STP_Select_tblCompatibilityTestMethodDetailsReport_FNoRow AddSTP_Select_tblCompatibilityTestMethodDetailsReport_FNoRow(
                        long FNo, 
                        int TestNo, 
                        decimal TareWt, 
                        string Temp, 
                        decimal Days0, 
                        decimal Days7, 
                        decimal Days30, 
                        decimal Days60, 
                        decimal Days3Yrs, 
                        decimal Days4Yrs, 
                        string TestStatus, 
                        string Status, 
                        int InspectedBy, 
                        int LoginID, 
                        decimal BottleJar, 
                        decimal CapPlug) {
                STP_Select_tblCompatibilityTestMethodDetailsReport_FNoRow rowSTP_Select_tblCompatibilityTestMethodDetailsReport_FNoRow = ((STP_Select_tblCompatibilityTestMethodDetailsReport_FNoRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        FNo,
                        TestNo,
                        TareWt,
                        Temp,
                        Days0,
                        Days7,
                        Days30,
                        Days60,
                        Days3Yrs,
                        Days4Yrs,
                        TestStatus,
                        Status,
                        InspectedBy,
                        LoginID,
                        BottleJar,
                        CapPlug};
                rowSTP_Select_tblCompatibilityTestMethodDetailsReport_FNoRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowSTP_Select_tblCompatibilityTestMethodDetailsReport_FNoRow);
                return rowSTP_Select_tblCompatibilityTestMethodDetailsReport_FNoRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public STP_Select_tblCompatibilityTestMethodDetailsReport_FNoRow FindByCompTestDetailNo(long CompTestDetailNo) {
                return ((STP_Select_tblCompatibilityTestMethodDetailsReport_FNoRow)(this.Rows.Find(new object[] {
                            CompTestDetailNo})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                STP_Select_tblCompatibilityTestMethodDetailsReport_FNoDataTable cln = ((STP_Select_tblCompatibilityTestMethodDetailsReport_FNoDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new STP_Select_tblCompatibilityTestMethodDetailsReport_FNoDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnCompTestDetailNo = base.Columns["CompTestDetailNo"];
                this.columnFNo = base.Columns["FNo"];
                this.columnTestNo = base.Columns["TestNo"];
                this.columnTareWt = base.Columns["TareWt"];
                this.columnTemp = base.Columns["Temp"];
                this.columnDays0 = base.Columns["Days0"];
                this.columnDays7 = base.Columns["Days7"];
                this.columnDays30 = base.Columns["Days30"];
                this.columnDays60 = base.Columns["Days60"];
                this.columnDays3Yrs = base.Columns["Days3Yrs"];
                this.columnDays4Yrs = base.Columns["Days4Yrs"];
                this.columnTestStatus = base.Columns["TestStatus"];
                this.columnStatus = base.Columns["Status"];
                this.columnInspectedBy = base.Columns["InspectedBy"];
                this.columnLoginID = base.Columns["LoginID"];
                this.columnBottleJar = base.Columns["BottleJar"];
                this.columnCapPlug = base.Columns["CapPlug"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnCompTestDetailNo = new global::System.Data.DataColumn("CompTestDetailNo", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCompTestDetailNo);
                this.columnFNo = new global::System.Data.DataColumn("FNo", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFNo);
                this.columnTestNo = new global::System.Data.DataColumn("TestNo", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTestNo);
                this.columnTareWt = new global::System.Data.DataColumn("TareWt", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTareWt);
                this.columnTemp = new global::System.Data.DataColumn("Temp", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTemp);
                this.columnDays0 = new global::System.Data.DataColumn("Days0", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDays0);
                this.columnDays7 = new global::System.Data.DataColumn("Days7", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDays7);
                this.columnDays30 = new global::System.Data.DataColumn("Days30", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDays30);
                this.columnDays60 = new global::System.Data.DataColumn("Days60", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDays60);
                this.columnDays3Yrs = new global::System.Data.DataColumn("Days3Yrs", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDays3Yrs);
                this.columnDays4Yrs = new global::System.Data.DataColumn("Days4Yrs", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDays4Yrs);
                this.columnTestStatus = new global::System.Data.DataColumn("TestStatus", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTestStatus);
                this.columnStatus = new global::System.Data.DataColumn("Status", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStatus);
                this.columnInspectedBy = new global::System.Data.DataColumn("InspectedBy", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInspectedBy);
                this.columnLoginID = new global::System.Data.DataColumn("LoginID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLoginID);
                this.columnBottleJar = new global::System.Data.DataColumn("BottleJar", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBottleJar);
                this.columnCapPlug = new global::System.Data.DataColumn("CapPlug", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCapPlug);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnCompTestDetailNo}, true));
                this.columnCompTestDetailNo.AutoIncrement = true;
                this.columnCompTestDetailNo.AllowDBNull = false;
                this.columnCompTestDetailNo.ReadOnly = true;
                this.columnCompTestDetailNo.Unique = true;
                this.columnTemp.MaxLength = 50;
                this.columnTestStatus.MaxLength = 10;
                this.columnStatus.MaxLength = 10;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public STP_Select_tblCompatibilityTestMethodDetailsReport_FNoRow NewSTP_Select_tblCompatibilityTestMethodDetailsReport_FNoRow() {
                return ((STP_Select_tblCompatibilityTestMethodDetailsReport_FNoRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new STP_Select_tblCompatibilityTestMethodDetailsReport_FNoRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(STP_Select_tblCompatibilityTestMethodDetailsReport_FNoRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.STP_Select_tblCompatibilityTestMethodDetailsReport_FNoRowChanged != null)) {
                    this.STP_Select_tblCompatibilityTestMethodDetailsReport_FNoRowChanged(this, new STP_Select_tblCompatibilityTestMethodDetailsReport_FNoRowChangeEvent(((STP_Select_tblCompatibilityTestMethodDetailsReport_FNoRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.STP_Select_tblCompatibilityTestMethodDetailsReport_FNoRowChanging != null)) {
                    this.STP_Select_tblCompatibilityTestMethodDetailsReport_FNoRowChanging(this, new STP_Select_tblCompatibilityTestMethodDetailsReport_FNoRowChangeEvent(((STP_Select_tblCompatibilityTestMethodDetailsReport_FNoRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.STP_Select_tblCompatibilityTestMethodDetailsReport_FNoRowDeleted != null)) {
                    this.STP_Select_tblCompatibilityTestMethodDetailsReport_FNoRowDeleted(this, new STP_Select_tblCompatibilityTestMethodDetailsReport_FNoRowChangeEvent(((STP_Select_tblCompatibilityTestMethodDetailsReport_FNoRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.STP_Select_tblCompatibilityTestMethodDetailsReport_FNoRowDeleting != null)) {
                    this.STP_Select_tblCompatibilityTestMethodDetailsReport_FNoRowDeleting(this, new STP_Select_tblCompatibilityTestMethodDetailsReport_FNoRowChangeEvent(((STP_Select_tblCompatibilityTestMethodDetailsReport_FNoRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveSTP_Select_tblCompatibilityTestMethodDetailsReport_FNoRow(STP_Select_tblCompatibilityTestMethodDetailsReport_FNoRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                dsWDTestMethodDetails ds = new dsWDTestMethodDetails();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "STP_Select_tblCompatibilityTestMethodDetailsReport_FNoDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class STP_Select_tblCompatibilityTestMethodDetailsReport_FNoRow : global::System.Data.DataRow {
            
            private STP_Select_tblCompatibilityTestMethodDetailsReport_FNoDataTable tableSTP_Select_tblCompatibilityTestMethodDetailsReport_FNo;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal STP_Select_tblCompatibilityTestMethodDetailsReport_FNoRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableSTP_Select_tblCompatibilityTestMethodDetailsReport_FNo = ((STP_Select_tblCompatibilityTestMethodDetailsReport_FNoDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long CompTestDetailNo {
                get {
                    return ((long)(this[this.tableSTP_Select_tblCompatibilityTestMethodDetailsReport_FNo.CompTestDetailNoColumn]));
                }
                set {
                    this[this.tableSTP_Select_tblCompatibilityTestMethodDetailsReport_FNo.CompTestDetailNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long FNo {
                get {
                    try {
                        return ((long)(this[this.tableSTP_Select_tblCompatibilityTestMethodDetailsReport_FNo.FNoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FNo\' in table \'STP_Select_tblCompatibilityTestMethodDetails" +
                                "Report_FNo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSTP_Select_tblCompatibilityTestMethodDetailsReport_FNo.FNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int TestNo {
                get {
                    try {
                        return ((int)(this[this.tableSTP_Select_tblCompatibilityTestMethodDetailsReport_FNo.TestNoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TestNo\' in table \'STP_Select_tblCompatibilityTestMethodDeta" +
                                "ilsReport_FNo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSTP_Select_tblCompatibilityTestMethodDetailsReport_FNo.TestNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TareWt {
                get {
                    try {
                        return ((decimal)(this[this.tableSTP_Select_tblCompatibilityTestMethodDetailsReport_FNo.TareWtColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TareWt\' in table \'STP_Select_tblCompatibilityTestMethodDeta" +
                                "ilsReport_FNo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSTP_Select_tblCompatibilityTestMethodDetailsReport_FNo.TareWtColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Temp {
                get {
                    try {
                        return ((string)(this[this.tableSTP_Select_tblCompatibilityTestMethodDetailsReport_FNo.TempColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Temp\' in table \'STP_Select_tblCompatibilityTestMethodDetail" +
                                "sReport_FNo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSTP_Select_tblCompatibilityTestMethodDetailsReport_FNo.TempColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Days0 {
                get {
                    try {
                        return ((decimal)(this[this.tableSTP_Select_tblCompatibilityTestMethodDetailsReport_FNo.Days0Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Days0\' in table \'STP_Select_tblCompatibilityTestMethodDetai" +
                                "lsReport_FNo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSTP_Select_tblCompatibilityTestMethodDetailsReport_FNo.Days0Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Days7 {
                get {
                    try {
                        return ((decimal)(this[this.tableSTP_Select_tblCompatibilityTestMethodDetailsReport_FNo.Days7Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Days7\' in table \'STP_Select_tblCompatibilityTestMethodDetai" +
                                "lsReport_FNo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSTP_Select_tblCompatibilityTestMethodDetailsReport_FNo.Days7Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Days30 {
                get {
                    try {
                        return ((decimal)(this[this.tableSTP_Select_tblCompatibilityTestMethodDetailsReport_FNo.Days30Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Days30\' in table \'STP_Select_tblCompatibilityTestMethodDeta" +
                                "ilsReport_FNo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSTP_Select_tblCompatibilityTestMethodDetailsReport_FNo.Days30Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Days60 {
                get {
                    try {
                        return ((decimal)(this[this.tableSTP_Select_tblCompatibilityTestMethodDetailsReport_FNo.Days60Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Days60\' in table \'STP_Select_tblCompatibilityTestMethodDeta" +
                                "ilsReport_FNo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSTP_Select_tblCompatibilityTestMethodDetailsReport_FNo.Days60Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Days3Yrs {
                get {
                    try {
                        return ((decimal)(this[this.tableSTP_Select_tblCompatibilityTestMethodDetailsReport_FNo.Days3YrsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Days3Yrs\' in table \'STP_Select_tblCompatibilityTestMethodDe" +
                                "tailsReport_FNo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSTP_Select_tblCompatibilityTestMethodDetailsReport_FNo.Days3YrsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Days4Yrs {
                get {
                    try {
                        return ((decimal)(this[this.tableSTP_Select_tblCompatibilityTestMethodDetailsReport_FNo.Days4YrsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Days4Yrs\' in table \'STP_Select_tblCompatibilityTestMethodDe" +
                                "tailsReport_FNo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSTP_Select_tblCompatibilityTestMethodDetailsReport_FNo.Days4YrsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TestStatus {
                get {
                    try {
                        return ((string)(this[this.tableSTP_Select_tblCompatibilityTestMethodDetailsReport_FNo.TestStatusColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TestStatus\' in table \'STP_Select_tblCompatibilityTestMethod" +
                                "DetailsReport_FNo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSTP_Select_tblCompatibilityTestMethodDetailsReport_FNo.TestStatusColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Status {
                get {
                    try {
                        return ((string)(this[this.tableSTP_Select_tblCompatibilityTestMethodDetailsReport_FNo.StatusColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Status\' in table \'STP_Select_tblCompatibilityTestMethodDeta" +
                                "ilsReport_FNo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSTP_Select_tblCompatibilityTestMethodDetailsReport_FNo.StatusColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int InspectedBy {
                get {
                    try {
                        return ((int)(this[this.tableSTP_Select_tblCompatibilityTestMethodDetailsReport_FNo.InspectedByColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InspectedBy\' in table \'STP_Select_tblCompatibilityTestMetho" +
                                "dDetailsReport_FNo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSTP_Select_tblCompatibilityTestMethodDetailsReport_FNo.InspectedByColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int LoginID {
                get {
                    try {
                        return ((int)(this[this.tableSTP_Select_tblCompatibilityTestMethodDetailsReport_FNo.LoginIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LoginID\' in table \'STP_Select_tblCompatibilityTestMethodDet" +
                                "ailsReport_FNo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSTP_Select_tblCompatibilityTestMethodDetailsReport_FNo.LoginIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal BottleJar {
                get {
                    try {
                        return ((decimal)(this[this.tableSTP_Select_tblCompatibilityTestMethodDetailsReport_FNo.BottleJarColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BottleJar\' in table \'STP_Select_tblCompatibilityTestMethodD" +
                                "etailsReport_FNo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSTP_Select_tblCompatibilityTestMethodDetailsReport_FNo.BottleJarColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal CapPlug {
                get {
                    try {
                        return ((decimal)(this[this.tableSTP_Select_tblCompatibilityTestMethodDetailsReport_FNo.CapPlugColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CapPlug\' in table \'STP_Select_tblCompatibilityTestMethodDet" +
                                "ailsReport_FNo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSTP_Select_tblCompatibilityTestMethodDetailsReport_FNo.CapPlugColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFNoNull() {
                return this.IsNull(this.tableSTP_Select_tblCompatibilityTestMethodDetailsReport_FNo.FNoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFNoNull() {
                this[this.tableSTP_Select_tblCompatibilityTestMethodDetailsReport_FNo.FNoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTestNoNull() {
                return this.IsNull(this.tableSTP_Select_tblCompatibilityTestMethodDetailsReport_FNo.TestNoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTestNoNull() {
                this[this.tableSTP_Select_tblCompatibilityTestMethodDetailsReport_FNo.TestNoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTareWtNull() {
                return this.IsNull(this.tableSTP_Select_tblCompatibilityTestMethodDetailsReport_FNo.TareWtColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTareWtNull() {
                this[this.tableSTP_Select_tblCompatibilityTestMethodDetailsReport_FNo.TareWtColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTempNull() {
                return this.IsNull(this.tableSTP_Select_tblCompatibilityTestMethodDetailsReport_FNo.TempColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTempNull() {
                this[this.tableSTP_Select_tblCompatibilityTestMethodDetailsReport_FNo.TempColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDays0Null() {
                return this.IsNull(this.tableSTP_Select_tblCompatibilityTestMethodDetailsReport_FNo.Days0Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDays0Null() {
                this[this.tableSTP_Select_tblCompatibilityTestMethodDetailsReport_FNo.Days0Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDays7Null() {
                return this.IsNull(this.tableSTP_Select_tblCompatibilityTestMethodDetailsReport_FNo.Days7Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDays7Null() {
                this[this.tableSTP_Select_tblCompatibilityTestMethodDetailsReport_FNo.Days7Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDays30Null() {
                return this.IsNull(this.tableSTP_Select_tblCompatibilityTestMethodDetailsReport_FNo.Days30Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDays30Null() {
                this[this.tableSTP_Select_tblCompatibilityTestMethodDetailsReport_FNo.Days30Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDays60Null() {
                return this.IsNull(this.tableSTP_Select_tblCompatibilityTestMethodDetailsReport_FNo.Days60Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDays60Null() {
                this[this.tableSTP_Select_tblCompatibilityTestMethodDetailsReport_FNo.Days60Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDays3YrsNull() {
                return this.IsNull(this.tableSTP_Select_tblCompatibilityTestMethodDetailsReport_FNo.Days3YrsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDays3YrsNull() {
                this[this.tableSTP_Select_tblCompatibilityTestMethodDetailsReport_FNo.Days3YrsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDays4YrsNull() {
                return this.IsNull(this.tableSTP_Select_tblCompatibilityTestMethodDetailsReport_FNo.Days4YrsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDays4YrsNull() {
                this[this.tableSTP_Select_tblCompatibilityTestMethodDetailsReport_FNo.Days4YrsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTestStatusNull() {
                return this.IsNull(this.tableSTP_Select_tblCompatibilityTestMethodDetailsReport_FNo.TestStatusColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTestStatusNull() {
                this[this.tableSTP_Select_tblCompatibilityTestMethodDetailsReport_FNo.TestStatusColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStatusNull() {
                return this.IsNull(this.tableSTP_Select_tblCompatibilityTestMethodDetailsReport_FNo.StatusColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStatusNull() {
                this[this.tableSTP_Select_tblCompatibilityTestMethodDetailsReport_FNo.StatusColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInspectedByNull() {
                return this.IsNull(this.tableSTP_Select_tblCompatibilityTestMethodDetailsReport_FNo.InspectedByColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInspectedByNull() {
                this[this.tableSTP_Select_tblCompatibilityTestMethodDetailsReport_FNo.InspectedByColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLoginIDNull() {
                return this.IsNull(this.tableSTP_Select_tblCompatibilityTestMethodDetailsReport_FNo.LoginIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLoginIDNull() {
                this[this.tableSTP_Select_tblCompatibilityTestMethodDetailsReport_FNo.LoginIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBottleJarNull() {
                return this.IsNull(this.tableSTP_Select_tblCompatibilityTestMethodDetailsReport_FNo.BottleJarColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBottleJarNull() {
                this[this.tableSTP_Select_tblCompatibilityTestMethodDetailsReport_FNo.BottleJarColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCapPlugNull() {
                return this.IsNull(this.tableSTP_Select_tblCompatibilityTestMethodDetailsReport_FNo.CapPlugColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCapPlugNull() {
                this[this.tableSTP_Select_tblCompatibilityTestMethodDetailsReport_FNo.CapPlugColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class STP_Select_tblCompatibilityTestMethodDetailsReport_FNoRowChangeEvent : global::System.EventArgs {
            
            private STP_Select_tblCompatibilityTestMethodDetailsReport_FNoRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public STP_Select_tblCompatibilityTestMethodDetailsReport_FNoRowChangeEvent(STP_Select_tblCompatibilityTestMethodDetailsReport_FNoRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public STP_Select_tblCompatibilityTestMethodDetailsReport_FNoRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
namespace QTMS.Reports.dsWDTestMethodDetailsTableAdapters {
    
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class STP_Select_tblCompatibilityTestMethodDetailsReport_FNoTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public STP_Select_tblCompatibilityTestMethodDetailsReport_FNoTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "STP_Select_tblCompatibilityTestMethodDetailsReport_FNo";
            tableMapping.ColumnMappings.Add("CompTestDetailNo", "CompTestDetailNo");
            tableMapping.ColumnMappings.Add("FNo", "FNo");
            tableMapping.ColumnMappings.Add("TestNo", "TestNo");
            tableMapping.ColumnMappings.Add("TareWt", "TareWt");
            tableMapping.ColumnMappings.Add("Temp", "Temp");
            tableMapping.ColumnMappings.Add("Days0", "Days0");
            tableMapping.ColumnMappings.Add("Days7", "Days7");
            tableMapping.ColumnMappings.Add("Days30", "Days30");
            tableMapping.ColumnMappings.Add("Days60", "Days60");
            tableMapping.ColumnMappings.Add("Days3Yrs", "Days3Yrs");
            tableMapping.ColumnMappings.Add("Days4Yrs", "Days4Yrs");
            tableMapping.ColumnMappings.Add("TestStatus", "TestStatus");
            tableMapping.ColumnMappings.Add("Status", "Status");
            tableMapping.ColumnMappings.Add("InspectedBy", "InspectedBy");
            tableMapping.ColumnMappings.Add("LoginID", "LoginID");
            tableMapping.ColumnMappings.Add("BottleJar", "BottleJar");
            tableMapping.ColumnMappings.Add("CapPlug", "CapPlug");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::QTMS.Properties.Settings.Default.QTMS2ConnectionString1;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "dbo.STP_Select_tblCompatibilityTestMethodDetailsReport_FNo";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.StoredProcedure;
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RETURN_VALUE", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.ReturnValue, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FNo", global::System.Data.SqlDbType.BigInt, 8, global::System.Data.ParameterDirection.Input, 19, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(dsWDTestMethodDetails.STP_Select_tblCompatibilityTestMethodDetailsReport_FNoDataTable dataTable, global::System.Nullable<long> FNo) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((FNo.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[1].Value = ((long)(FNo.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual dsWDTestMethodDetails.STP_Select_tblCompatibilityTestMethodDetailsReport_FNoDataTable GetData(global::System.Nullable<long> FNo) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((FNo.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[1].Value = ((long)(FNo.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            dsWDTestMethodDetails.STP_Select_tblCompatibilityTestMethodDetailsReport_FNoDataTable dataTable = new dsWDTestMethodDetails.STP_Select_tblCompatibilityTestMethodDetailsReport_FNoDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
}

#pragma warning restore 1591