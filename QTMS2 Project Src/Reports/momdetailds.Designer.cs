//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.8009
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace QTMS.Reports {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("momdetailds")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class momdetailds : global::System.Data.DataSet {
        
        private STP_tblMOMProcessMaster_By_MOMIdDataTable tableSTP_tblMOMProcessMaster_By_MOMId;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public momdetailds() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected momdetailds(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["STP_tblMOMProcessMaster_By_MOMId"] != null)) {
                    base.Tables.Add(new STP_tblMOMProcessMaster_By_MOMIdDataTable(ds.Tables["STP_tblMOMProcessMaster_By_MOMId"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public STP_tblMOMProcessMaster_By_MOMIdDataTable STP_tblMOMProcessMaster_By_MOMId {
            get {
                return this.tableSTP_tblMOMProcessMaster_By_MOMId;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            momdetailds cln = ((momdetailds)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["STP_tblMOMProcessMaster_By_MOMId"] != null)) {
                    base.Tables.Add(new STP_tblMOMProcessMaster_By_MOMIdDataTable(ds.Tables["STP_tblMOMProcessMaster_By_MOMId"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableSTP_tblMOMProcessMaster_By_MOMId = ((STP_tblMOMProcessMaster_By_MOMIdDataTable)(base.Tables["STP_tblMOMProcessMaster_By_MOMId"]));
            if ((initTable == true)) {
                if ((this.tableSTP_tblMOMProcessMaster_By_MOMId != null)) {
                    this.tableSTP_tblMOMProcessMaster_By_MOMId.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "momdetailds";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/momdetailds.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableSTP_tblMOMProcessMaster_By_MOMId = new STP_tblMOMProcessMaster_By_MOMIdDataTable();
            base.Tables.Add(this.tableSTP_tblMOMProcessMaster_By_MOMId);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeSTP_tblMOMProcessMaster_By_MOMId() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            momdetailds ds = new momdetailds();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void STP_tblMOMProcessMaster_By_MOMIdRowChangeEventHandler(object sender, STP_tblMOMProcessMaster_By_MOMIdRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class STP_tblMOMProcessMaster_By_MOMIdDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnDetailID;
            
            private global::System.Data.DataColumn columnMomId;
            
            private global::System.Data.DataColumn columnSrNo;
            
            private global::System.Data.DataColumn columnIsNoteProSubPro;
            
            private global::System.Data.DataColumn columnProcessDesc;
            
            private global::System.Data.DataColumn columnScrapper;
            
            private global::System.Data.DataColumn columnImpeller;
            
            private global::System.Data.DataColumn columnEmulsifer;
            
            private global::System.Data.DataColumn columnVac;
            
            private global::System.Data.DataColumn columnSymb;
            
            private global::System.Data.DataColumn columnAccsessories;
            
            private global::System.Data.DataColumn columnPrintSequenceNo;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public STP_tblMOMProcessMaster_By_MOMIdDataTable() {
                this.TableName = "STP_tblMOMProcessMaster_By_MOMId";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal STP_tblMOMProcessMaster_By_MOMIdDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected STP_tblMOMProcessMaster_By_MOMIdDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DetailIDColumn {
                get {
                    return this.columnDetailID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MomIdColumn {
                get {
                    return this.columnMomId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SrNoColumn {
                get {
                    return this.columnSrNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsNoteProSubProColumn {
                get {
                    return this.columnIsNoteProSubPro;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ProcessDescColumn {
                get {
                    return this.columnProcessDesc;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ScrapperColumn {
                get {
                    return this.columnScrapper;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ImpellerColumn {
                get {
                    return this.columnImpeller;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EmulsiferColumn {
                get {
                    return this.columnEmulsifer;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn VacColumn {
                get {
                    return this.columnVac;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SymbColumn {
                get {
                    return this.columnSymb;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AccsessoriesColumn {
                get {
                    return this.columnAccsessories;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PrintSequenceNoColumn {
                get {
                    return this.columnPrintSequenceNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public STP_tblMOMProcessMaster_By_MOMIdRow this[int index] {
                get {
                    return ((STP_tblMOMProcessMaster_By_MOMIdRow)(this.Rows[index]));
                }
            }
            
            public event STP_tblMOMProcessMaster_By_MOMIdRowChangeEventHandler STP_tblMOMProcessMaster_By_MOMIdRowChanging;
            
            public event STP_tblMOMProcessMaster_By_MOMIdRowChangeEventHandler STP_tblMOMProcessMaster_By_MOMIdRowChanged;
            
            public event STP_tblMOMProcessMaster_By_MOMIdRowChangeEventHandler STP_tblMOMProcessMaster_By_MOMIdRowDeleting;
            
            public event STP_tblMOMProcessMaster_By_MOMIdRowChangeEventHandler STP_tblMOMProcessMaster_By_MOMIdRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddSTP_tblMOMProcessMaster_By_MOMIdRow(STP_tblMOMProcessMaster_By_MOMIdRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public STP_tblMOMProcessMaster_By_MOMIdRow AddSTP_tblMOMProcessMaster_By_MOMIdRow(int MomId, double SrNo, int IsNoteProSubPro, string ProcessDesc, string Scrapper, string Impeller, string Emulsifer, string Vac, string Symb, string Accsessories, int PrintSequenceNo) {
                STP_tblMOMProcessMaster_By_MOMIdRow rowSTP_tblMOMProcessMaster_By_MOMIdRow = ((STP_tblMOMProcessMaster_By_MOMIdRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        MomId,
                        SrNo,
                        IsNoteProSubPro,
                        ProcessDesc,
                        Scrapper,
                        Impeller,
                        Emulsifer,
                        Vac,
                        Symb,
                        Accsessories,
                        PrintSequenceNo};
                rowSTP_tblMOMProcessMaster_By_MOMIdRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowSTP_tblMOMProcessMaster_By_MOMIdRow);
                return rowSTP_tblMOMProcessMaster_By_MOMIdRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                STP_tblMOMProcessMaster_By_MOMIdDataTable cln = ((STP_tblMOMProcessMaster_By_MOMIdDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new STP_tblMOMProcessMaster_By_MOMIdDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnDetailID = base.Columns["DetailID"];
                this.columnMomId = base.Columns["MomId"];
                this.columnSrNo = base.Columns["SrNo"];
                this.columnIsNoteProSubPro = base.Columns["IsNoteProSubPro"];
                this.columnProcessDesc = base.Columns["ProcessDesc"];
                this.columnScrapper = base.Columns["Scrapper"];
                this.columnImpeller = base.Columns["Impeller"];
                this.columnEmulsifer = base.Columns["Emulsifer"];
                this.columnVac = base.Columns["Vac"];
                this.columnSymb = base.Columns["Symb"];
                this.columnAccsessories = base.Columns["Accsessories"];
                this.columnPrintSequenceNo = base.Columns["PrintSequenceNo"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnDetailID = new global::System.Data.DataColumn("DetailID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDetailID);
                this.columnMomId = new global::System.Data.DataColumn("MomId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMomId);
                this.columnSrNo = new global::System.Data.DataColumn("SrNo", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSrNo);
                this.columnIsNoteProSubPro = new global::System.Data.DataColumn("IsNoteProSubPro", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsNoteProSubPro);
                this.columnProcessDesc = new global::System.Data.DataColumn("ProcessDesc", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProcessDesc);
                this.columnScrapper = new global::System.Data.DataColumn("Scrapper", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnScrapper);
                this.columnImpeller = new global::System.Data.DataColumn("Impeller", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnImpeller);
                this.columnEmulsifer = new global::System.Data.DataColumn("Emulsifer", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmulsifer);
                this.columnVac = new global::System.Data.DataColumn("Vac", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnVac);
                this.columnSymb = new global::System.Data.DataColumn("Symb", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSymb);
                this.columnAccsessories = new global::System.Data.DataColumn("Accsessories", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAccsessories);
                this.columnPrintSequenceNo = new global::System.Data.DataColumn("PrintSequenceNo", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPrintSequenceNo);
                this.columnDetailID.AutoIncrement = true;
                this.columnDetailID.AllowDBNull = false;
                this.columnDetailID.ReadOnly = true;
                this.columnProcessDesc.MaxLength = 200;
                this.columnScrapper.MaxLength = 50;
                this.columnImpeller.MaxLength = 50;
                this.columnEmulsifer.MaxLength = 50;
                this.columnVac.MaxLength = 50;
                this.columnSymb.MaxLength = 100;
                this.columnAccsessories.MaxLength = 150;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public STP_tblMOMProcessMaster_By_MOMIdRow NewSTP_tblMOMProcessMaster_By_MOMIdRow() {
                return ((STP_tblMOMProcessMaster_By_MOMIdRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new STP_tblMOMProcessMaster_By_MOMIdRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(STP_tblMOMProcessMaster_By_MOMIdRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.STP_tblMOMProcessMaster_By_MOMIdRowChanged != null)) {
                    this.STP_tblMOMProcessMaster_By_MOMIdRowChanged(this, new STP_tblMOMProcessMaster_By_MOMIdRowChangeEvent(((STP_tblMOMProcessMaster_By_MOMIdRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.STP_tblMOMProcessMaster_By_MOMIdRowChanging != null)) {
                    this.STP_tblMOMProcessMaster_By_MOMIdRowChanging(this, new STP_tblMOMProcessMaster_By_MOMIdRowChangeEvent(((STP_tblMOMProcessMaster_By_MOMIdRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.STP_tblMOMProcessMaster_By_MOMIdRowDeleted != null)) {
                    this.STP_tblMOMProcessMaster_By_MOMIdRowDeleted(this, new STP_tblMOMProcessMaster_By_MOMIdRowChangeEvent(((STP_tblMOMProcessMaster_By_MOMIdRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.STP_tblMOMProcessMaster_By_MOMIdRowDeleting != null)) {
                    this.STP_tblMOMProcessMaster_By_MOMIdRowDeleting(this, new STP_tblMOMProcessMaster_By_MOMIdRowChangeEvent(((STP_tblMOMProcessMaster_By_MOMIdRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveSTP_tblMOMProcessMaster_By_MOMIdRow(STP_tblMOMProcessMaster_By_MOMIdRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                momdetailds ds = new momdetailds();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "STP_tblMOMProcessMaster_By_MOMIdDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class STP_tblMOMProcessMaster_By_MOMIdRow : global::System.Data.DataRow {
            
            private STP_tblMOMProcessMaster_By_MOMIdDataTable tableSTP_tblMOMProcessMaster_By_MOMId;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal STP_tblMOMProcessMaster_By_MOMIdRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableSTP_tblMOMProcessMaster_By_MOMId = ((STP_tblMOMProcessMaster_By_MOMIdDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int DetailID {
                get {
                    return ((int)(this[this.tableSTP_tblMOMProcessMaster_By_MOMId.DetailIDColumn]));
                }
                set {
                    this[this.tableSTP_tblMOMProcessMaster_By_MOMId.DetailIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int MomId {
                get {
                    try {
                        return ((int)(this[this.tableSTP_tblMOMProcessMaster_By_MOMId.MomIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MomId\' in table \'STP_tblMOMProcessMaster_By_MOMId\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableSTP_tblMOMProcessMaster_By_MOMId.MomIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double SrNo {
                get {
                    try {
                        return ((double)(this[this.tableSTP_tblMOMProcessMaster_By_MOMId.SrNoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SrNo\' in table \'STP_tblMOMProcessMaster_By_MOMId\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableSTP_tblMOMProcessMaster_By_MOMId.SrNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int IsNoteProSubPro {
                get {
                    try {
                        return ((int)(this[this.tableSTP_tblMOMProcessMaster_By_MOMId.IsNoteProSubProColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsNoteProSubPro\' in table \'STP_tblMOMProcessMaster_By_MOMId" +
                                "\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSTP_tblMOMProcessMaster_By_MOMId.IsNoteProSubProColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ProcessDesc {
                get {
                    try {
                        return ((string)(this[this.tableSTP_tblMOMProcessMaster_By_MOMId.ProcessDescColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ProcessDesc\' in table \'STP_tblMOMProcessMaster_By_MOMId\' is" +
                                " DBNull.", e);
                    }
                }
                set {
                    this[this.tableSTP_tblMOMProcessMaster_By_MOMId.ProcessDescColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Scrapper {
                get {
                    try {
                        return ((string)(this[this.tableSTP_tblMOMProcessMaster_By_MOMId.ScrapperColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Scrapper\' in table \'STP_tblMOMProcessMaster_By_MOMId\' is DB" +
                                "Null.", e);
                    }
                }
                set {
                    this[this.tableSTP_tblMOMProcessMaster_By_MOMId.ScrapperColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Impeller {
                get {
                    try {
                        return ((string)(this[this.tableSTP_tblMOMProcessMaster_By_MOMId.ImpellerColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Impeller\' in table \'STP_tblMOMProcessMaster_By_MOMId\' is DB" +
                                "Null.", e);
                    }
                }
                set {
                    this[this.tableSTP_tblMOMProcessMaster_By_MOMId.ImpellerColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Emulsifer {
                get {
                    try {
                        return ((string)(this[this.tableSTP_tblMOMProcessMaster_By_MOMId.EmulsiferColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Emulsifer\' in table \'STP_tblMOMProcessMaster_By_MOMId\' is D" +
                                "BNull.", e);
                    }
                }
                set {
                    this[this.tableSTP_tblMOMProcessMaster_By_MOMId.EmulsiferColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Vac {
                get {
                    try {
                        return ((string)(this[this.tableSTP_tblMOMProcessMaster_By_MOMId.VacColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Vac\' in table \'STP_tblMOMProcessMaster_By_MOMId\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableSTP_tblMOMProcessMaster_By_MOMId.VacColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Symb {
                get {
                    try {
                        return ((string)(this[this.tableSTP_tblMOMProcessMaster_By_MOMId.SymbColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Symb\' in table \'STP_tblMOMProcessMaster_By_MOMId\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableSTP_tblMOMProcessMaster_By_MOMId.SymbColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Accsessories {
                get {
                    try {
                        return ((string)(this[this.tableSTP_tblMOMProcessMaster_By_MOMId.AccsessoriesColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Accsessories\' in table \'STP_tblMOMProcessMaster_By_MOMId\' i" +
                                "s DBNull.", e);
                    }
                }
                set {
                    this[this.tableSTP_tblMOMProcessMaster_By_MOMId.AccsessoriesColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int PrintSequenceNo {
                get {
                    try {
                        return ((int)(this[this.tableSTP_tblMOMProcessMaster_By_MOMId.PrintSequenceNoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PrintSequenceNo\' in table \'STP_tblMOMProcessMaster_By_MOMId" +
                                "\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSTP_tblMOMProcessMaster_By_MOMId.PrintSequenceNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMomIdNull() {
                return this.IsNull(this.tableSTP_tblMOMProcessMaster_By_MOMId.MomIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMomIdNull() {
                this[this.tableSTP_tblMOMProcessMaster_By_MOMId.MomIdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSrNoNull() {
                return this.IsNull(this.tableSTP_tblMOMProcessMaster_By_MOMId.SrNoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSrNoNull() {
                this[this.tableSTP_tblMOMProcessMaster_By_MOMId.SrNoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsNoteProSubProNull() {
                return this.IsNull(this.tableSTP_tblMOMProcessMaster_By_MOMId.IsNoteProSubProColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsNoteProSubProNull() {
                this[this.tableSTP_tblMOMProcessMaster_By_MOMId.IsNoteProSubProColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsProcessDescNull() {
                return this.IsNull(this.tableSTP_tblMOMProcessMaster_By_MOMId.ProcessDescColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetProcessDescNull() {
                this[this.tableSTP_tblMOMProcessMaster_By_MOMId.ProcessDescColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsScrapperNull() {
                return this.IsNull(this.tableSTP_tblMOMProcessMaster_By_MOMId.ScrapperColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetScrapperNull() {
                this[this.tableSTP_tblMOMProcessMaster_By_MOMId.ScrapperColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsImpellerNull() {
                return this.IsNull(this.tableSTP_tblMOMProcessMaster_By_MOMId.ImpellerColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetImpellerNull() {
                this[this.tableSTP_tblMOMProcessMaster_By_MOMId.ImpellerColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEmulsiferNull() {
                return this.IsNull(this.tableSTP_tblMOMProcessMaster_By_MOMId.EmulsiferColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEmulsiferNull() {
                this[this.tableSTP_tblMOMProcessMaster_By_MOMId.EmulsiferColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsVacNull() {
                return this.IsNull(this.tableSTP_tblMOMProcessMaster_By_MOMId.VacColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetVacNull() {
                this[this.tableSTP_tblMOMProcessMaster_By_MOMId.VacColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSymbNull() {
                return this.IsNull(this.tableSTP_tblMOMProcessMaster_By_MOMId.SymbColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSymbNull() {
                this[this.tableSTP_tblMOMProcessMaster_By_MOMId.SymbColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAccsessoriesNull() {
                return this.IsNull(this.tableSTP_tblMOMProcessMaster_By_MOMId.AccsessoriesColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAccsessoriesNull() {
                this[this.tableSTP_tblMOMProcessMaster_By_MOMId.AccsessoriesColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPrintSequenceNoNull() {
                return this.IsNull(this.tableSTP_tblMOMProcessMaster_By_MOMId.PrintSequenceNoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPrintSequenceNoNull() {
                this[this.tableSTP_tblMOMProcessMaster_By_MOMId.PrintSequenceNoColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class STP_tblMOMProcessMaster_By_MOMIdRowChangeEvent : global::System.EventArgs {
            
            private STP_tblMOMProcessMaster_By_MOMIdRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public STP_tblMOMProcessMaster_By_MOMIdRowChangeEvent(STP_tblMOMProcessMaster_By_MOMIdRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public STP_tblMOMProcessMaster_By_MOMIdRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
namespace QTMS.Reports.momdetaildsTableAdapters {
    
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class STP_tblMOMProcessMaster_By_MOMIdTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public STP_tblMOMProcessMaster_By_MOMIdTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "STP_tblMOMProcessMaster_By_MOMId";
            tableMapping.ColumnMappings.Add("DetailID", "DetailID");
            tableMapping.ColumnMappings.Add("MomId", "MomId");
            tableMapping.ColumnMappings.Add("SrNo", "SrNo");
            tableMapping.ColumnMappings.Add("IsNoteProSubPro", "IsNoteProSubPro");
            tableMapping.ColumnMappings.Add("ProcessDesc", "ProcessDesc");
            tableMapping.ColumnMappings.Add("Scrapper", "Scrapper");
            tableMapping.ColumnMappings.Add("Impeller", "Impeller");
            tableMapping.ColumnMappings.Add("Emulsifer", "Emulsifer");
            tableMapping.ColumnMappings.Add("Vac", "Vac");
            tableMapping.ColumnMappings.Add("Symb", "Symb");
            tableMapping.ColumnMappings.Add("Accsessories", "Accsessories");
            tableMapping.ColumnMappings.Add("PrintSequenceNo", "PrintSequenceNo");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::QTMS.Properties.Settings.Default.QTMS2ConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "dbo.STP_tblMOMProcessMaster_By_MOMId";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.StoredProcedure;
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RETURN_VALUE", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.ReturnValue, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@MOMId", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(momdetailds.STP_tblMOMProcessMaster_By_MOMIdDataTable dataTable, global::System.Nullable<int> MOMId) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((MOMId.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[1].Value = ((int)(MOMId.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual momdetailds.STP_tblMOMProcessMaster_By_MOMIdDataTable GetData(global::System.Nullable<int> MOMId) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((MOMId.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[1].Value = ((int)(MOMId.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            momdetailds.STP_tblMOMProcessMaster_By_MOMIdDataTable dataTable = new momdetailds.STP_tblMOMProcessMaster_By_MOMIdDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
}

#pragma warning restore 1591